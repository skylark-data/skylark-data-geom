{"version":3,"sources":["skylark-utils-math.js"],"names":["define","skylark","langx","math","log2","x","n","i","mixin","Math","Geometry","klass","klassName","Point","inherit","get","this","_","y","clone","move","dx","dy","notEqual","p","equal","init","fromString","s","a","split","parseFloat","fromPlain","o","fromArray","Zero","Direction","left","top","right","bottom","Arrow","bounds","box","width","height","direction","leftTop","leftBottom","rightTop","rightBottom","containPoint","undefined","Circle","cx","r","cy","diff","Ellipse","rx","ry","Line","min","x1","x2","y1","y2","abs","startPoint","endPointer","Polyline","points","l","length","t","bbox","b","PolyStar","radius","sides","pointSize","angle","Size","toArray","toPlain","toString","w","h","Rect","size","isEmpty","isIntersect","width2","height2","width1","height1","intersect","unite","max","DEG_TO_RAD","PI","_degToRadCache","degToRad","degree","Matrix","TransformMatrix","_multiplyPoint","m11","m21","m12","m22","alpha","shadow","compositeOperation","multiplyPoint","multiplyRectangle","rect","isIdentity","p0","p1","p2","p3","minx","miny","maxx","maxy","prepend","tx1","a1","c1","append","b1","d1","prependMatrix","matrix","prependProperties","appendMatrix","appendProperties","prependTransform","scaleX","scaleY","rotation","skewX","skewY","regX","regY","cos","sin","appendTransform","rotate","skew","scale","translate","identity","invert","decompose","target","sqrt","atan2","reinitialize","_initialize","multiply","mtx","rotateg","tan","skewXg","skewYg","reflect","arguments","a2","b2","n2","xx","xy","yx","yy","project","_sandwich","scaleAt","c","d","rotateAt","rotategAt","skewXAt","skewXgAt","skewYAt","skewYgAt","Transform","value","MatrixTransform","transform","point","transformBounds","initialize","RotateTransform","centerX","centerY","ScaleTransform","Class","SkewTransform","TranslateTransform","main"],"mappings":"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","file":"../skylark-utils-math.js","sourcesContent":["define('skylark-utils-math/math',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\"\r\n], function(skylark, langx) {\r\n\t\r\n\tvar math = skylark.math = {\r\n\r\n\t  log2 : function (x) {\r\n\t    var n = 1, i = 0;\r\n\t    while (x > n) {\r\n\t      n <<= 1;\r\n\t      i++;\r\n\t    }\r\n\t    return i;\r\n\t  }\r\n\r\n\t};\r\n\r\n\tlangx.mixin(math,Math);\r\n\r\n\treturn math;\r\n});\ndefine('skylark-utils-math/Geometry',[\r\n    \"skylark-langx/langx\",\r\n    \"./math\"\r\n],function(langx, math) {\r\n\tvar Geometry  = math.Geometry = langx.klass({\r\n\t\t\"klassName\"\t:\t\"Geometry\",\r\n\t});\r\n\r\n\r\n\treturn Geometry;\r\n\r\n});\r\n\ndefine('skylark-utils-math/Point',[\r\n    \"skylark-langx/langx\",\r\n    \"./math\",\r\n    \"./Geometry\",\r\n],function(langx, math, Geometry) {\r\n\r\n    var Point = math.Point = Geometry.inherit({\r\n        \"klassName\": \"Point\",\r\n        \"x\": {\r\n            get : function() {\r\n                return this._.x;\r\n            }\r\n        },\r\n        // y: Number\r\n        //\t\tThe Y coordinate of the default rectangle's position, value 0.\r\n        \"y\": {\r\n            get : function() {\r\n                return this._.y;\r\n            }\r\n        },\r\n\t\t\"clone\"\t: function(){\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn new Point(_.x,_.y);\r\n\t\t\r\n\t\t},\r\n\t\t\"move\"\t: function(/*Number*/dx,/*Number*/dy) {\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn new Point(_.x + dx,_.y + dy);\r\n\t\t},\r\n\t\t\"notEqual\"\t:\tfunction(/*Point*/p) {\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn !p || p.x != _.x || p.y != _.y;\r\n\t\t},\r\n\t\t\r\n\t\t\"equal\"\t:\tfunction(/*Point*/p){\r\n\t\t\treturn  !this.notEqual(p);\r\n\t\t},\r\n\t\t\r\n        \"init\" : function(x, y) {\r\n            var _ = this._ = {};\r\n            _.x = x || 0;\r\n            _.y = y || 0;\r\n        }\r\n\t});\r\n\t\r\n\tPoint.fromString = function(s) {\r\n\t\tvar a = s.split(\",\");\r\n\t\treturn new Point(parseFloat(a[0]),parseFloat(a[1]));\r\n\t};\r\n\r\n\tPoint.fromPlain = function(o) {\r\n\t\treturn new Point(o.x,o.y);\r\n\t};\r\n\r\n\tPoint.fromArray = function(a) {\r\n\t\treturn new Point(a[0],a[1]);\r\n\t};\r\n\t\r\n\tPoint.Zero = new Point(0,0);\r\n\r\n\treturn Point;\r\n\t\r\n});\t\r\n\ndefine('skylark-utils-math/Arrow',[\r\n    \"skylark-langx/langx\",\r\n    \"./math\",\r\n    \"./Geometry\",\r\n    \"./Point\"\r\n], function(langx, math, Geometry, Point) {\r\n    var Direction = {\r\n        \"left\" : 1,\r\n        \"top\" : 2,\r\n        \"right\" : 3, \r\n        \"bottom\" : 4\r\n    };\r\n\r\n    var Arrow = math.Arrow = Geometry.inherit({\r\n        \"klassName\": \"Arrow\",\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //\t\treturns the bounding box\r\n                var \r\n                    _ = this._,\r\n                    box = {\r\n                    x: _.x,\r\n                    y: this.y,\r\n                    width: _.width,\r\n                    height: _.height\r\n                };\r\n                return box;\r\n            }\r\n        },\r\n       \"x\": {\r\n            get : function() {\r\n                return this._.x;\r\n            }\r\n        },\r\n        // y: Number\r\n        //\t\tThe Y coordinate of the default rectangle's position, value 0.\r\n        \"y\": {\r\n            get : function() {\r\n                return this._.y;\r\n            }\r\n        },\r\n        // width: Number\r\n        //\t\tThe width of the default rectangle, value 100.\r\n        \"width\": {\r\n            get : function() {\r\n                return this._.width;\r\n            }\r\n        },\r\n        // height: Number\r\n        //\t\tThe height of the default rectangle, value 100.\r\n        \"height\": {\r\n            get : function() {\r\n                return this._.height;\r\n            }\r\n        },\r\n        // r: Number\r\n        //\t\tThe corner radius for the default rectangle, value 0.\r\n        \"direction\": {\r\n            get : function() {\r\n                return this._.direction;\r\n            }\r\n        },\r\n        \"leftTop\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x, _.y);\r\n            }\r\n        },\r\n        \"leftBottom\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x, _.y + _.height);\r\n            }\r\n        },\r\n        \"rightTop\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x + _.width, _.y);\r\n            }\r\n        },\r\n        \"rightBottom\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x + _.width, _.y + _.height);\r\n            }\r\n        },\r\n        \"move\": function(dx, dy) {\r\n            var _ = this._;\r\n            return new Arrow(_.x + dx,_.y + dy,_.width,_.height,_.direction);\r\n        },\r\n        \"containPoint\": function(x,y) {\r\n            // support function(p)\r\n            if (y === undefined) {\r\n                var p = x;\r\n                x = p.x;\r\n                y = p.y;\r\n            }\r\n            var _ = this._;\r\n\r\n            return (x >= _.x) && (x < _.x + _.width) && (y >= _.y) && (y < _.y + _.height);\r\n        },\r\n        \"init\" : function(x, y, width, height, direction) {\r\n            var _ = this._ = {};\r\n            _.x = x || 0;\r\n            _.y = y || 0;\r\n            _.width = width || 0;\r\n            _.height = height || 0;\r\n            _.direction = direction || Direction.top;\r\n        }\r\n    });\r\n\r\n    Arrow.Direction = Direction;\r\n\r\n    return Arrow;\r\n});\r\n\ndefine('skylark-utils-math/Circle',[\r\n    \"skylark-langx/langx\",\r\n    \"./math\",\r\n    \"./Geometry\"\r\n], function(langx, math, Geometry) {\r\n\r\n    var Circle = math.Circle = Geometry.inherit({\r\n        \"klassName\": \"Circle\",\r\n\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //      returns the bounding box\r\n                var _ = this._,\r\n                    box = {\r\n                        x: _.cx - _.r,\r\n                        y: _.cy - _.r,\r\n                        width: 2 * _.r,\r\n                        height: 2 * _.r\r\n                    };\r\n                return box;\r\n            }\r\n        },\r\n\r\n        // cx: Number\r\n        //\t\tThe X coordinate of the center of the circle, default value 0.\r\n        \"cx\": {\r\n            get : function() {\r\n                return this._.cx;\r\n            }\r\n        },\r\n        // cy: Number\r\n        //\t\tThe Y coordinate of the center of the circle, default value 0.\r\n        \"cy\": {\r\n            get : function() {\r\n                return this._.cy;\r\n            }\r\n        },\r\n        // r: Number\r\n        //\t\tThe radius, default value 100.\r\n        \"r\": {\r\n            get : function() {\r\n                return this._.r;\r\n            }\r\n        },\r\n        move: function(dx, dy) {\r\n            var _ = this._;            \r\n            return new Circle(_.cx + dx,_.cy + dy,_.r);\r\n        },\r\n        containPoint: function(x,y) {\r\n            // support function(p)\r\n            if (y === undefined) {\r\n                var p = x;\r\n                x = p.x;\r\n                y = p.y;\r\n            }\r\n            var _ = this._;\r\n\r\n            var diff = (x - _.x) * (x - _.x) + (y - _.y) * (y - _.y);\r\n            if (diff < _.r * _.r) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        \"init\" : function(cx, cy, r) {\r\n            var _ = this._ = {};\r\n            _.cx = cx || 0;\r\n            _.cy = cy || 0;\r\n            _.r = r || 0;\r\n        }\r\n\r\n    });\r\n\r\n    return Circle;\r\n});\r\n\ndefine('skylark-utils-math/Ellipse',[\r\n    \"skylark-langx/langx\",\r\n    \"./math\",\r\n    \"./Geometry\",\r\n], function(langx, math, Geometry) {\r\n\r\n    var Ellipse = math.Ellipse = Geometry.inherit({\r\n        \"klassName\": \"Ellipse\",\r\n\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //      returns the bounding box\r\n                var _ = this._,\r\n                    box = {\r\n                        x: _.cx - _.rx,\r\n                        y: _.cy - _.ry,\r\n                        width: 2 * _.rx,\r\n                        height: 2 * _.ry\r\n                    };\r\n                return box;\r\n            }\r\n        },\r\n\r\n        // cx: Number\r\n        //\t\tThe X coordinate of the center of the ellipse, default value 0.\r\n        \"cx\": {\r\n            get : function() {\r\n                return this._.cx;\r\n            }\r\n        },\r\n        // cy: Number\r\n        //\t\tThe Y coordinate of the center of the ellipse, default value 0.\r\n        \"cy\": {\r\n            get : function() {\r\n                return this._.cy;\r\n            }\r\n        },\r\n        // rx: Number\r\n        //\t\tThe radius of the ellipse in the X direction, default value 200.\r\n        \"rx\": {\r\n            get : function() {\r\n                return this._.rx;\r\n            }\r\n        },\r\n        // ry: Number\r\n        //\t\tThe radius of the ellipse in the Y direction, default value 200.\r\n        \"ry\": {\r\n            get : function() {\r\n                return this._.ry;\r\n            }\r\n        },\r\n        \"move\": function(dx, dy) {\r\n            var _ = this._;            \r\n            return new Ellipse(_.cx + dx,_.cy + dy,_.rx,_.ry);\r\n        },\r\n\r\n        \"containPoint\": function(p) {\r\n        },\r\n\r\n        \"init\" :  function(cx, cy, rx, ry) {\r\n            var _ = this._ = {};\r\n            _.cx = cx || 0;\r\n            _.cy = cy || 0;\r\n            _.rx = rx || 0;\r\n            _.ry = ry || 0;\r\n        }\r\n    });\r\n\r\n    return Ellipse;\r\n});\r\n\n/**\r\n *\r\n * Copyright (c) 2013 psteam Inc.(http://www.psteam.co.jp)\r\n * http://www.psteam.co.jp/qface/license\r\n * \r\n * @Author: liwenfeng\r\n * @Date: 2013/02/28\r\n */\r\ndefine('skylark-utils-math/Line',[\r\n    \"skylark-langx/langx\",\r\n    \"./math\",\r\n    \"./Geometry\",\r\n    \"./Point\"\r\n], function(langx, math, Geometry, Point) {\r\n\r\n    var Line = math.Line = Geometry.inherit({\r\n        \"klassName\": \"Line\",\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //\t\treturns the bounding box\r\n                var \r\n                    _ = this._,\r\n                    box = {\r\n\t\t\t\t\t\tx:\t\tMath.min(_.x1, _.x2),\r\n\t\t\t\t\t\ty:\t\tMath.min(_.y1, _.y2),\r\n\t\t\t\t\t\twidth:\tMath.abs(_.x2 - _.x1),\r\n\t\t\t\t\t\theight:\tMath.abs(_.y2 -_.y1)\r\n\t                };\r\n                return box;\r\n            }\r\n        },\r\n       \"x1\": {\r\n            get : function() {\r\n                return this._.x1;\r\n            }\r\n        },\r\n        // y: Number\r\n        //\t\tThe Y coordinate of the default rectangle's position, value 0.\r\n        \"y1\": {\r\n            get : function() {\r\n                return this._.y1;\r\n            }\r\n        },\r\n        \"x2\": {\r\n            get : function() {\r\n                return this._.x2;\r\n            }\r\n        },\r\n        \"y2\": {\r\n            get : function() {\r\n                return this._.y2;\r\n            }\r\n        },\r\n\r\n\t\t\"startPoint\" :{\r\n\t\t\tget : function(){\r\n\t\t\t\tvar _ = this._;\r\n\t\t\t\treturn new Point(_.x1,_.y1);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"endPointer\" :{\r\n\t\t\tget : function(){\r\n\t\t\t\tvar _ = this._;\r\n\t\t\t\treturn new Point(_.x2,_.y2);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\t\r\n\t\tmove\t: function(dx,dy) {\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn new Line(_.x1+dx,_.y1+dy,_.x2+dx,_.y2+dy);\r\n\t\t},\r\n\r\n\t\tcontainPoint : function(x,y) {\r\n            if (y === undefined) {\r\n                var p = x;\r\n                x = p.x;\r\n                y = p.y;\r\n            }\r\n            var _ = this._;\r\n\t\t\r\n    \t\treturn Math.abs((y-_.y1)*(_.x2-_.x1) - (_.y2-_.y1)*(x-_.x1)) < 1e-6;\r\n\r\n\t\t},\r\n\r\n        \"init\" : function(x1, y1, x2,y2) {\r\n            var _ = this._ = {};\r\n            _.x1 = x1 || 0;\r\n            _.y1 = y1 || 0;\r\n            _.x2 = x2 || 0;\r\n            _.y2 = y2 || 0;\r\n        }\r\n\t});\r\n\t\r\n\t\r\n\treturn Line;\r\n\t\r\n});\t\r\n\ndefine('skylark-utils-math/Polyline',[\r\n    \"skylark-langx/langx\",\r\n    \"./math\",\r\n    \"./Geometry\"\r\n], function(langx, math, Geometry) {\r\n\r\n    var Polyline = math.Polyline = Geometry.inherit({\r\n        \"klassName\": \"Polyline\",\r\n\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //      returns the bounding box\r\n                var _ = this._,\r\n\t\t\t\t\tp = _.points,\r\n\t\t\t\t\tl = p.length,\r\n\t\t\t\t\tt = p[0],\r\n\t\t\t\t\tbbox = {l: t.x, t: t.y, r: t.x, b: t.y};\r\n\t\t\t\tfor(var i = 1; i < l; ++i){\r\n\t\t\t\t\tt = p[i];\r\n\t\t\t\t\tif(bbox.l > t.x) bbox.l = t.x;\r\n\t\t\t\t\tif(bbox.r < t.x) bbox.r = t.x;\r\n\t\t\t\t\tif(bbox.t > t.y) bbox.t = t.y;\r\n\t\t\t\t\tif(bbox.b < t.y) bbox.b = t.y;\r\n\t\t\t\t}\r\n\t\t\t\tvar box = {\r\n\t\t\t\t\tx:\t\tbbox.l,\r\n\t\t\t\t\ty:\t\tbbox.t,\r\n\t\t\t\t\twidth:\tbbox.r - bbox.l,\r\n\t\t\t\t\theight:\tbbox.b - bbox.t\r\n\t\t\t\t};\r\n                return box;\r\n            }\r\n        },\r\n\t\t\"points\" : {\r\n            get : function() {\r\n                return this._.points;\r\n            }\r\n\t\t},\r\n\t\t\r\n\t\t\"init\" : function(/*Array*/points) {\r\n\t\t\t//TODO: will be modified\r\n\t\t\tvar _ = this._ = {};\r\n\t\t\t_.points = points?points:[];\r\n\t\t}\r\n\t});\r\n\t\r\n\t\r\n\treturn Polyline;\r\n\t\r\n});\t\r\n\ndefine('skylark-utils-math/PolyStar',[\r\n    \"skylark-langx/langx\",\r\n    \"./math\",\r\n    \"./Geometry\",\r\n],function(langx, math, Geometry) {\r\n\r\n    var PolyStar = math.PolyStar = Geometry.inherit({\r\n        \"klassName\": \"PolyStar\",\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //\t\treturns the bounding box\r\n\t\t\t\tvar _ = this._,\r\n\t\t\t\t\tp = _.points,\r\n\t\t\t\t\tl = p.length,\r\n\t\t\t\t\tt = p[0];\r\n\t\t\t\t\tbbox = {l: t.x, t: t.y, r: t.x, b: t.y};\r\n\t\t\t\tfor(var i = 1; i < l; ++i){\r\n\t\t\t\t\tt = p[i];\r\n\t\t\t\t\tif(bbox.l > t.x) bbox.l = t.x;\r\n\t\t\t\t\tif(bbox.r < t.x) bbox.r = t.x;\r\n\t\t\t\t\tif(bbox.t > t.y) bbox.t = t.y;\r\n\t\t\t\t\tif(bbox.b < t.y) bbox.b = t.y;\r\n\t\t\t\t}\r\n\t\t\t\tvar box = {\r\n\t\t\t\t\tx:\t\tbbox.l,\r\n\t\t\t\t\ty:\t\tbbox.t,\r\n\t\t\t\t\twidth:\tbbox.r - bbox.l,\r\n\t\t\t\t\theight:\tbbox.b - bbox.t\r\n\t\t\t\t};\r\n\t\t\t\treturn box;\t\r\n            }\r\n        },\r\n       \"x\": {\r\n            get : function() {\r\n                return this._.x;\r\n            }\r\n        },\r\n        // y: Number\r\n        //\t\tThe Y coordinate of the default rectangle's position, value 0.\r\n        \"y\": {\r\n            get : function() {\r\n                return this._.y;\r\n            }\r\n        },\r\n        \"radius\": {\r\n            get : function() {\r\n                return this._.radius;\r\n            }\r\n        },\r\n        \"sides\": {\r\n            get : function() {\r\n                return this._.sides;\r\n            }\r\n        },\r\n        \"pointSize\": {\r\n            get : function() {\r\n                return this._.pointSize;\r\n            }\r\n        },\r\n        \"angle\": {\r\n            get : function() {\r\n                return this._.angle;\r\n            }\r\n         },\r\n\t\t\"init\"\t:function(x, y, radius, sides, pointSize, angle){\r\n\t\t\tvar _ = this._;\r\n\t\t\t_.x = x;\r\n\t\t\t_.y = y;\r\n\t\t\t_.radius = radius;\r\n\t\t\t_.sides = sides;\r\n\t\t\t_.pointSize = pointSize;\r\n\t\t\t_.angle = angle;\r\n\t\t}\r\n\r\n\t});\r\n\t\r\n\t\r\n\treturn PolyStar;\r\n\t\r\n});\t\r\n\ndefine('skylark-utils-math/Size',[\r\n    \"skylark-langx/langx\",\r\n    \"./math\",\r\n    \"./Geometry\"\r\n],function(langx,math,Geometry) {\r\n\r\n    var Size = math.Size = Geometry.inherit({\r\n        \"klassName\": \"Size\",\r\n\t\t// width: Number\r\n\t\t//\t\tThe width of the default rectangle, value 100.\r\n\t\t\"width\" : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.width;\r\n\t\t\t}\r\n\t\t},\r\n\t\t// height: Number\r\n\t\t//\t\tThe height of the default rectangle, value 100.\r\n\t\t\"height\" : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.height;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"clone\"\t: function(){\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn new Size(_.width,_.height);\r\n\t\t},\r\n\r\n        \"toArray\" : function() {\r\n            return [this.width,this.height];\r\n        },\r\n\r\n        \"toPlain\" : function() {\r\n            return {\r\n                \"width\"  : this.width,\r\n                \"height\"  : this.height\r\n            };\r\n        },\r\n        \"toString\": function() {\r\n        \treturn this.width +\",\" + this.height;\r\n        },\r\n\r\n        \"init\" : function(width,height) {\r\n        \tvar _ = this._ = {};\r\n        \t_.width = width || 0;\r\n        \t_.height = height || 0;\r\n        }\r\n\t});\r\n\t\r\n\tSize.fromString = function(s) {\r\n\t\tvar a = s.split(\",\");\r\n\t\treturn new Size(parseFloat(a[0]),parseFloat(a[1]));\r\n\t};\r\n\r\n\tSize.fromPlain = function(o) {\r\n\t\treturn new Size(o.w || o.width,o.h || o.height);\r\n\t};\r\n\r\n\tSize.fromArray = function(a) {\r\n\t\treturn new Size(a[0],a[1]);\r\n\t};\r\n\r\n\tSize.Zero = new Size(0,0);\r\n\t\r\n\treturn Size;\r\n\t\r\n});\t\r\n\ndefine('skylark-utils-math/Rect',[\r\n    \"skylark-langx/langx\",\r\n    \"./math\",\r\n    \"./Geometry\",\r\n    \"./Point\",\r\n\t\"./Size\"\r\n],function(langx, math, Geometry,Point,Size) {\r\n\r\n    var Rect = math.Rect = Geometry.inherit({\r\n        \"klassName\": \"Rect\",\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //\t\treturns the bounding box\r\n                var \r\n                    _ = this._,\r\n                    box = {\r\n                    x: _.x,\r\n                    y: this.y,\r\n                    width: _.width,\r\n                    height: _.height\r\n                };\r\n                return box;\r\n            }\r\n        },\r\n       \"x\": {\r\n            get : function() {\r\n                return this._.x;\r\n            }\r\n        },\r\n        // y: Number\r\n        //\t\tThe Y coordinate of the default rectangle's position, value 0.\r\n        \"y\": {\r\n            get : function() {\r\n                return this._.y;\r\n            }\r\n        },\r\n        // width: Number\r\n        //\t\tThe width of the default rectangle, value 100.\r\n        \"width\": {\r\n            get : function() {\r\n                return this._.width;\r\n            }\r\n        },\r\n        // height: Number\r\n        //\t\tThe height of the default rectangle, value 100.\r\n        \"height\": {\r\n            get : function() {\r\n                return this._.height;\r\n            }\r\n        },\r\n        // r: Number\r\n        //\t\tThe corner radius for the default rectangle, value 0.\r\n        \"radius\": {\r\n            get : function() {\r\n                return this._.radius;\r\n            }\r\n        },\r\n        \"leftTop\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x, _.y);\r\n            }\r\n        },\r\n        \"leftBottom\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x, _.y + _.height);\r\n            }\r\n        },\r\n        \"rightTop\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x + _.width, _.y);\r\n            }\r\n        },\r\n        \"rightBottom\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x + _.width, _.y + _.height);\r\n            }\r\n        },\r\n\r\n        \"size\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Size(_.width, _.height);\r\n            }\r\n        },\r\n\r\n        \"move\": function(dx, dy) {\r\n            var _ = this._;\r\n            return new Rect(_.x + dx,_.y + dy,_.width,_.height,_.radius);\r\n        },\r\n\r\n        \"containPoint\": function(x,y) {\r\n            // support function(p)\r\n            if (y === undefined) {\r\n                var p = x;\r\n                x = p.x;\r\n                y = p.y;\r\n            }\r\n            var _ = this._;\r\n\r\n            return (x >= _.x) && (x < _.x + _.width) && (y >= _.y) && (y < _.y + _.height);\r\n        },\r\n\r\n\t\t\"isEmpty\"\t:\tfunction(){\r\n\t\t\treturn this.width <=0 || this.height<=0;\r\n\t\t},\r\n\t\t\r\n\t\t\"notEqual\"\t:\tfunction(/*Rect*/r) {\r\n\t\t\treturn !r || r.x != this.x || r.y != this.y || r.width != this.width || r.height != this.height || r.radius != this.radius;\r\n\t\t},\r\n\t\t\r\n\t\t\"equal\"\t:\tfunction(/*Rect*/r){\r\n\t\t\treturn  !this.notEqual(r);\r\n\t\t},\r\n\t\t\r\n\t\t\"isIntersect\"\t:function(/*Number*/x2,/*Number*/y2,/*Number*/width2,/*Number*/height2){\r\n\t\t\tvar x1 = this.x1,y1=this.y,width1=this.width,height1=this.height;\r\n\t\t\t \r\n\t\t    return (Math.min(x1 + width1, x2 + width2) - (x1 > x2 ? x1 : x2)) > 0 &&\r\n\t\t           (Math.min(y1 + height1, y2 + height2) - (y1 > y2 ? y1 : y2)) > 0;\r\n\t\t},\r\n\t\t\r\n\t\t\"intersect\"\t:\tfunction(/*Number*/x2,/*Number*/y2,/*Number*/width2,/*Number*/height2){\r\n\t\t\tvar x1 = this.x1,y1=this.y,width1=this.width,height1=this.height;\r\n\t\t\t \r\n\t\t    return (Math.min(x1 + width1, x2 + width2) - (x1 > x2 ? x1 : x2)) > 0 &&\r\n\t\t           (Math.min(y1 + height1, y2 + height2) - (y1 > y2 ? y1 : y2)) > 0;\r\n\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\"unite\"\t: function(/*Number*/x2,/*Number*/y2,/*Number*/width2,/*Number*/height2){\r\n\t\t\tvar x1 = this.x1,y1=this.y,width1=this.width,height1=this.height;\r\n\t\t\t \r\n\t\t\tvar x = x1 < x2 ? x1 : x2,\r\n\t\t\t\ty = y1 < y2 ? y1 : y2,\r\n\t\t\t\twidth  = Math.max(x1 + width1, x2 + width2) - x;\r\n\t\t\t\theight = Math.max(y1 + height1, y2 + height2) - y;\r\n\t\t    \r\n\t\t    return new Rect(x,y,width,height);\r\n\t\t},\r\n\t\t\r\n\t\t\"clone\"\t: function(){\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn new Rect(_.x,_.y,_.width,_.height,_.radius);\r\n\t\t},\r\n\r\n        \"init\" : function(x, y, width, height, radius) {\r\n            var _ = this._ = {};\r\n            _.x = x || 0;\r\n            _.y = y || 0;\r\n            _.width = width || 0;\r\n            _.height = height || 0;\r\n            _.radius = radius || 0;\r\n        }\r\n    });\r\n\r\n\r\n\tRect.fromString = function(s) {\r\n\t\tvar a = s.split(\",\");\r\n\t\treturn new Rect(parseFloat(a[0]),parseFloat(a[1]),parseFloat(a[2]),parseFloat(a[3]));\r\n\t};\r\n\r\n\tRect.fromPlain = function(o) {\r\n\t\treturn new Rect(o.x || o.l,o.y || o.t, o.w || o.width,o.h || o.height);\r\n\t};\r\n\r\n\tRect.fromArray = function(a) {\r\n\t\treturn new Rect(a[0],a[1],a[2],a[3]);\r\n\t};\r\n\t\r\n\tRect.Zero = new Rect(0,0,0,0);\r\n\t\r\n\treturn Rect;\r\n\t\r\n});\t\r\n\ndefine( 'skylark-utils-math/transform/Matrix',[\r\n    \"skylark-langx/langx\",\r\n    \"../math\",\r\n], function(langx,math){\r\n\t// reference easeljs/geom/Matrix2D  and dojox/gfx/matrix\r\n\t\r\n\tvar DEG_TO_RAD = Math.PI/180;\r\n\tvar _degToRadCache = {};\r\n\tvar degToRad = function(degree){\r\n\t\treturn _degToRadCache[degree] || (_degToRadCache[degree] = (Math.PI * degree / 180));\r\n\t};\r\n\tvar radToDeg = function(radian){ return radian / Math.PI * 180; };\r\n\t\r\n\r\n\t//Represents a 3 x 3 affine transformation matrix used for transformation in 2-D space.\r\n\t//|----------|\r\n\t//|m11|m21|dx| \r\n\t//|----------|\r\n\t//|m12|m22|dy|\r\n\t//|----------|\r\n\t//|  0|  0| 1|\r\n\t//|----------|\r\n\t\r\n    var Matrix = math.TransformMatrix = langx.klass({\r\n        \"klassName\": \"TransformMatrix\",\r\n\r\n\t\t\"_multiplyPoint\"\t: \tfunction(p){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies the matrix to a point\r\n\t\t\t// p: Point\r\n\t\t\t//\t\ta point\r\n\t\t\t// returns: Point\r\n\t\t\tvar _ = this._,\r\n\t\t\t\tx = p.x * _.m11 + p.y * _.m21  + _.dx,\r\n\t\t\t    y = p.x * _.m12 +  p.y * _.m22 + _.dy;\r\n\t\t\treturn new Point(x,y); // Point\r\n\t\t},\r\n\r\n       \"m11\": {\r\n       \t\t//Position (0, 0) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.m11;\r\n            }\r\n        },\r\n\r\n       \"m12\": {\r\n       \t\t//Position (0, 1) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.m12;\r\n            }\r\n        },\r\n\r\n       \"m21\": {\r\n       \t\t//Position (1, 0) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.m21;\r\n            }\r\n        },\r\n\r\n       \"m22\": {\r\n       \t\t//Position (1, 1) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.m22;\r\n            }\r\n        },\r\n\r\n       \"dx\": {\r\n       \t\t// Position (2, 1) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.dx;\r\n            }\r\n        },\r\n\r\n       \"dy\": {\r\n       \t\t// Position (2, 1) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.dy;\r\n            }\r\n        },\r\n\r\n       \"alpha\": {\r\n       \t\t// Property representing the alpha that will be applied to a display object. This is not part of matrix\r\n       \t\t// operations, but is used for operations like getConcatenatedMatrix to provide concatenated alpha values.\r\n            get : function() {\r\n                return this._.alpha;\r\n            }\r\n        },\r\n\r\n       \"shadow\": {\r\n       \t\t// Property representing the shadow that will be applied to a display object. This is not part of matrix\r\n       \t\t// operations, but is used for operations like getConcatenatedMatrix to provide concatenated shadow values..\r\n            get : function() {\r\n                return this._.shadow;\r\n            }\r\n        },\r\n\r\n       \"compositeOperation\": {\r\n\t\t\t/**\r\n\t\t\t * Property representing the compositeOperation that will be applied to a display object. This is not part of\r\n\t\t\t * matrix operations, but is used for operations like getConcatenatedMatrix to provide concatenated\r\n\t\t\t * compositeOperation values. You can find a list of valid composite operations at:\r\n\t\t\t * <a href=\"https://developer.mozilla.org/en/Canvas_tutorial/Compositing\">https://developer.mozilla.org/en/Canvas_tutorial/Compositing</a>\r\n\t\t\t * @property compositeOperation\r\n\t\t\t * @type String\r\n\t\t\t **/\r\n            get : function() {\r\n                return this._.compositeOperation;\r\n            }\r\n        },\r\n\r\n        //Converts the specified point with Matrix and returns the result.\r\n\t\tmultiplyPoint: /*Point*/function(/*Point */ p){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies the matrix to a point\r\n\t\t\treturn this._multiplyPoint(p); // Point\r\n\t\t},\r\n\t\t\t\t/**\r\n\t\t\t\t * 指定した矩形を Matrix で変換し、その結果を返します。\r\n\t\t\t\t */\r\n\t\tmultiplyRectangle: /*Rect*/function(/*Rect*/ rect){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tApplies the matrix to a rectangle.\r\n\t\t\t// returns: Rect\r\n\t\t\tif(this.isIdentity())\r\n\t\t\t\treturn rect.clone(); // Rect\r\n\t\t\tvar p0 = this.multiplyPoint(rect.leftTop),\r\n\t\t\t\tp1 = this.multiplyPoint(rect.leftBottom),\r\n\t\t\t\tp2 = this.multiplyPoint(rect.right),\r\n\t\t\t\tp3 = this.multiplyPoint(rect.rightBottom),\r\n\t\t\t\tminx = Math.min(p0.x, p1.x, p2.x, p3.x),\r\n\t\t\t\tminy = Math.min(p0.y, p1.y, p2.y, p3.y),\r\n\t\t\t\tmaxx = Math.max(p0.x, p1.x, p2.x, p3.x),\r\n\t\t\t\tmaxy = Math.max(p0.y, p1.y, p2.y, p3.y);\r\n\t\t\treturn new Rect(minx,miny,maxx-minx,maxy-miny);  // Rect\r\n\t\t},\r\n\t\t/**\r\n\t\t * Concatenates the specified matrix properties with this matrix. All parameters are required.\r\n\t\t * @method prepend\r\n\t\t * @param {Number} m11\r\n\t\t * @param {Number} m12\r\n\t\t * @param {Number} m21\r\n\t\t * @param {Number} m22\r\n\t\t * @param {Number} dx\r\n\t\t * @param {Number} dy\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tprepend : function(m11, m12, m21, m22, dx, dy) {\r\n\t\t\tvar tx1 = this.dx;\r\n\t\t\tif (m11 != 1 || m12 != 0 || m21 != 0 || m22 != 1) {\r\n\t\t\t\tvar a1 = this.m11;\r\n\t\t\t\tvar c1 = this.m21;\r\n\t\t\t\tthis.m11  = a1*m11+this.m12*m21;\r\n\t\t\t\tthis.m12  = a1*m12+this.m12*m22;\r\n\t\t\t\tthis.m21  = c1*m11+this.m22*m21;\r\n\t\t\t\tthis.m22  = c1*m12+this.m22*m22;\r\n\t\t\t}\r\n\t\t\tthis.dx = tx1*m11+this.dy*m21+dx;\r\n\t\t\tthis.dy = tx1*m12+this.dy*m22+dy;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Appends the specified matrix properties with this matrix. All parameters are required.\r\n\t\t * 指定した Matrixをこの Matrixに追加します。\r\n\t\t * @method append\r\n\t\t * @param {Number} m11\r\n\t\t * @param {Number} m12\r\n\t\t * @param {Number} m21\r\n\t\t * @param {Number} m22\r\n\t\t * @param {Number} dx\r\n\t\t * @param {Number} dy\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tappend : function(m11, m12, m21, m22, dx, dy) {\r\n\t\t\tvar a1 = this.m11;\r\n\t\t\tvar b1 = this.m12;\r\n\t\t\tvar c1 = this.m21;\r\n\t\t\tvar d1 = this.m22;\r\n\r\n\t\t\tthis.m11  = m11*a1+m12*c1;\r\n\t\t\tthis.m12  = m11*b1+m12*d1;\r\n\t\t\tthis.m21  = m21*a1+m22*c1;\r\n\t\t\tthis.m22  = m21*b1+m22*d1;\r\n\t\t\tthis.dx = dx*a1+dy*c1+this.dx;\r\n\t\t\tthis.dy = dx*b1+dy*d1+this.dy;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Prepends the specified matrix with this matrix.\r\n\t\t * @method prependMatrix\r\n\t\t * @param {Matrix} matrix\r\n\t\t **/\r\n\t\tprependMatrix : function(matrix) {\r\n\t\t\tthis.prepend(matrix.m11, matrix.m12, matrix.m21, matrix.m22, matrix.dx, matrix.dy);\r\n\t\t\tthis.prependProperties(matrix.alpha, matrix.shadow,  matrix.compositeOperation);\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Appends the specified matrix with this matrix.\r\n\t\t * 指定した Matrixをこの Matrixに追加します。\r\n\t\t * @method appendMatrix\r\n\t\t * @param {Matrix} matrix\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tappendMatrix : function(matrix) {\r\n\t\t\tthis.append(matrix.m11, matrix.m12, matrix.m21, matrix.m22, matrix.dx, matrix.dy);\r\n\t\t\tthis.appendProperties(matrix.alpha, matrix.shadow,  matrix.compositeOperation);\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Generates matrix properties from the specified display object transform properties, and prepends them with this matrix.\r\n\t\t * For example, you can use this to generate a matrix from a display object: var mtx = new Matrix();\r\n\t\t * mtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\r\n\t\t * @method prependTransform\r\n\t\t * @param {Number} x\r\n\t\t * @param {Number} y\r\n\t\t * @param {Number} scaleX\r\n\t\t * @param {Number} scaleY\r\n\t\t * @param {Number} rotation\r\n\t\t * @param {Number} skewX\r\n\t\t * @param {Number} skewY\r\n\t\t * @param {Number} regX Optional.\r\n\t\t * @param {Number} regY Optional.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tprependTransform : function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\r\n\t\t\tif (rotation%360) {\r\n\t\t\t\tvar r = rotation*DEG_TO_RAD;\r\n\t\t\t\tvar cos = Math.cos(r);\r\n\t\t\t\tvar sin = Math.sin(r);\r\n\t\t\t} else {\r\n\t\t\t\tcos = 1;\r\n\t\t\t\tsin = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (regX || regY) {\r\n\t\t\t\t// append the registration offset:\r\n\t\t\t\tthis.dx -= regX; this.dy -= regY;\r\n\t\t\t}\r\n\t\t\tif (skewX || skewY) {\r\n\t\t\t\t// TODO: can this be combined into a single prepend operation?\r\n\t\t\t\tskewX *= DEG_TO_RAD;\r\n\t\t\t\tskewY *= DEG_TO_RAD;\r\n\t\t\t\tthis.prepend(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);\r\n\t\t\t\tthis.prepend(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\r\n\t\t\t} else {\r\n\t\t\t\tthis.prepend(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, x, y);\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Generates matrix properties from the specified display object transform properties, and appends them with this matrix.\r\n\t\t * For example, you can use this to generate a matrix from a display object: var mtx = new Matrix();\r\n\t\t * mtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\r\n\t\t * @method appendTransform\r\n\t\t * @param {Number} x\r\n\t\t * @param {Number} y\r\n\t\t * @param {Number} scaleX\r\n\t\t * @param {Number} scaleY\r\n\t\t * @param {Number} rotation\r\n\t\t * @param {Number} skewX\r\n\t\t * @param {Number} skewY\r\n\t\t * @param {Number} regX Optional.\r\n\t\t * @param {Number} regY Optional.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tappendTransform : function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\r\n\t\t\tif (rotation%360) {\r\n\t\t\t\tvar r = rotation*DEG_TO_RAD;\r\n\t\t\t\tvar cos = Math.cos(r);\r\n\t\t\t\tvar sin = Math.sin(r);\r\n\t\t\t} else {\r\n\t\t\t\tcos = 1;\r\n\t\t\t\tsin = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (skewX || skewY) {\r\n\t\t\t\t// TODO: can this be combined into a single append?\r\n\t\t\t\tskewX *= DEG_TO_RAD;\r\n\t\t\t\tskewY *= DEG_TO_RAD;\r\n\t\t\t\tthis.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\r\n\t\t\t\tthis.append(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);\r\n\t\t\t} else {\r\n\t\t\t\tthis.append(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, x, y);\r\n\t\t\t}\r\n\r\n\t\t\tif (regX || regY) {\r\n\t\t\t\t// prepend the registration offset:\r\n\t\t\t\tthis.dx -= regX*this.m11+regY*this.m21; \r\n\t\t\t\tthis.dy -= regX*this.m12+regY*this.m22;\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Applies a rotation transformation to the matrix.\r\n\t\t * この Matrix の原点を中心とする指定した角度の回転を適用します。\r\n\t\t * @method rotate\r\n\t\t * @param {Number} angle The angle in degrees.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\trotate : function(angle) {\r\n\t\t\tvar cos = Math.cos(angle);\r\n\t\t\tvar sin = Math.sin(angle);\r\n\r\n\t\t\tvar a1 = this.m11;\r\n\t\t\tvar c1 = this.m21;\r\n\t\t\tvar tx1 = this.dx;\r\n\r\n\t\t\tthis.m11 = a1*cos-this.m12*sin;\r\n\t\t\tthis.m12 = a1*sin+this.m12*cos;\r\n\t\t\tthis.m21 = c1*cos-this.m22*sin;\r\n\t\t\tthis.m22 = c1*sin+this.m22*cos;\r\n\t\t\tthis.dx = tx1*cos-this.dy*sin;\r\n\t\t\tthis.dy = tx1*sin+this.dy*cos;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Applies a skew transformation to the matrix.\r\n\t\t * @method skew\r\n\t\t * @param {Number} skewX The amount to skew horizontally in degrees.\r\n\t\t * @param {Number} skewY The amount to skew vertically in degrees.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\tskew : function(skewX, skewY) {\r\n\t\t\tskewX = skewX*DEG_TO_RAD;\r\n\t\t\tskewY = skewY*DEG_TO_RAD;\r\n\t\t\tthis.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), 0, 0);\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Applies a scale transformation to the matrix.\r\n\t\t * @method scale\r\n\t\t * @param {Number} x\r\n\t\t * @param {Number} y\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tscale : function(x, y) {\r\n\t\t\tthis.m11 *= x;\r\n\t\t\tthis.m22 *= y;\r\n\t\t\tthis.dx *= x;\r\n\t\t\tthis.dy *= y;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Translates the matrix on the x and y axes.\r\n\t\t * @method translate\r\n\t\t * @param {Number} x\r\n\t\t * @param {Number} y\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\ttranslate : function(x, y) {\r\n\t\t\tthis.dx += x;\r\n\t\t\tthis.dy += y;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Sets the properties of the matrix to those of an identity matrix (one that applies a null transformation).\r\n\t\t * @method identity\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tidentity : function() {\r\n\t\t\tthis.alpha = this.m11 = this.m22 = 1;\r\n\t\t\tthis.m12 = this.m21 = this.dx = this.dy = 0;\r\n\t\t\tthis.shadow = this.compositeOperation = null;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Inverts the matrix, causing it to perform the opposite transformation.\r\n\t\t * @method invert\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tinvert : function() {\r\n\t\t\tvar a1 = this.m11;\r\n\t\t\tvar b1 = this.m12;\r\n\t\t\tvar c1 = this.m21;\r\n\t\t\tvar d1 = this.m22;\r\n\t\t\tvar tx1 = this.dx;\r\n\t\t\tvar n = a1*d1-b1*c1;\r\n\r\n\t\t\tthis.m11 = d1/n;\r\n\t\t\tthis.m12 = -b1/n;\r\n\t\t\tthis.m21 = -c1/n;\r\n\t\t\tthis.m22 = a1/n;\r\n\t\t\tthis.dx = (c1*this.dy-d1*tx1)/n;\r\n\t\t\tthis.dy = -(a1*this.dy-b1*tx1)/n;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns true if the matrix is an identity matrix.\r\n\t\t * @method isIdentity\r\n\t\t * @return {Boolean}\r\n\t\t **/\r\n\t\tisIdentity : function() {\r\n\t\t\treturn this.dx == 0 && this.dy == 0 && this.m11 == 1 && this.m12 == 0 && this.m21 == 0 && this.m22 == 1;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Decomposes the matrix into transform properties (x, y, scaleX, scaleY, and rotation). Note that this these values\r\n\t\t * may not match the transform properties you used to generate the matrix, though they will produce the same visual\r\n\t\t * results.\r\n\t\t * @method decompose\r\n\t\t * @param {Object} target The object to apply the transform properties to. If null, then a new object will be returned.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\tdecompose : function(target) {\r\n\t\t\t// TODO: it would be nice to be able to solve for whether the matrix can be decomposed into only scale/rotation\r\n\t\t\t// even when scale is negative\r\n\t\t\tif (target == null) { target = {}; }\r\n\t\t\ttarget.x = this.dx;\r\n\t\t\ttarget.y = this.dy;\r\n\t\t\ttarget.scaleX = Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12);\r\n\t\t\ttarget.scaleY = Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22);\r\n\r\n\t\t\tvar skewX = Math.atan2(-this.m21, this.m22);\r\n\t\t\tvar skewY = Math.atan2(this.m12, this.m11);\r\n\r\n\t\t\tif (skewX == skewY) {\r\n\t\t\t\ttarget.rotation = skewY/DEG_TO_RAD;\r\n\t\t\t\tif (this.m11 < 0 && this.m22 >= 0) {\r\n\t\t\t\t\ttarget.rotation += (target.rotation <= 0) ? 180 : -180;\r\n\t\t\t\t}\r\n\t\t\t\ttarget.skewX = target.skewY = 0;\r\n\t\t\t} else {\r\n\t\t\t\ttarget.skewX = skewX/DEG_TO_RAD;\r\n\t\t\t\ttarget.skewY = skewY/DEG_TO_RAD;\r\n\t\t\t}\r\n\t\t\treturn target;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Reinitializes all matrix properties to those specified.\r\n\t\t * @method appendProperties\r\n\t\t * @param {Number} m11\r\n\t\t * @param {Number} m12\r\n\t\t * @param {Number} m21\r\n\t\t * @param {Number} m22\r\n\t\t * @param {Number} dx\r\n\t\t * @param {Number} dy\r\n\t\t * @param {Number} alpha desired alpha value\r\n\t\t * @param {Shadow} shadow desired shadow value\r\n\t\t * @param {String} compositeOperation desired composite operation value\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\treinitialize : function(m11,m12,m21,m22,dx,dy,alpha,shadow,compositeOperation) {\r\n\t\t\tthis._initialize(m11,m12,m21,m22,dx,dy);\r\n\t\t\tthis.alpha = alpha || 1;\r\n\t\t\tthis.shadow = shadow;\r\n\t\t\tthis.compositeOperation = compositeOperation;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Appends the specified visual properties to the current matrix.\r\n\t\t * @method appendProperties\r\n\t\t * @param {Number} alpha desired alpha value\r\n\t\t * @param {Shadow} shadow desired shadow value\r\n\t\t * @param {String} compositeOperation desired composite operation value\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\tappendProperties : function(alpha, shadow, compositeOperation) {\r\n\t\t\tthis.alpha *= alpha;\r\n\t\t\tthis.shadow = shadow || this.shadow;\r\n\t\t\tthis.compositeOperation = compositeOperation || this.compositeOperation;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Prepends the specified visual properties to the current matrix.\r\n\t\t * @method prependProperties\r\n\t\t * @param {Number} alpha desired alpha value\r\n\t\t * @param {Shadow} shadow desired shadow value\r\n\t\t * @param {String} compositeOperation desired composite operation value\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\tprependProperties : function(alpha, shadow, compositeOperation) {\r\n\t\t\tthis.alpha *= alpha;\r\n\t\t\tthis.shadow = this.shadow || shadow;\r\n\t\t\tthis.compositeOperation = this.compositeOperation || compositeOperation;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t *Multiply Matrix by another Matrix.\r\n\t\t */\r\n\t\tmultiply: function(matrix){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcombines matrices by multiplying them sequentially in the given order\r\n\t\t\t// matrix: Matrix\r\n\t\t\t//\t\ta 2D matrix-like object,\r\n\t\t\t//\t\tall subsequent arguments are matrix-like objects too\r\n\r\n\t\t\t// combine matrices\r\n\t\t\tvar m11 = this.m11,m12 = this.m12,m21 = this.m21,m22=this.m22,dx=this.dx,dy=this.dy;\r\n\t\t\tvar r = matrix;\r\n\t\t\tthis.m11 = m11 * r.m11 + m21 * r.m12;\r\n\t\t\tthis.m12 = m12 * r.m11 + m22 * r.m12;\r\n\t\t\tthis.m21 = m11 * r.m21 + m21 * r.m22;\r\n\t\t\tthis.m22 = m12 * r.m21 + m22 * r.m22;\r\n\t\t\tthis.dx =  m11 * r.dx + m21 * r.dy + dx;\r\n\t\t\tthis.dy =  m12 * r.dx + m22 * r.dy + dy;\r\n\t\t\treturn this // Matrix\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns a clone of the Matrix instance.\r\n\t\t * @method clone\r\n\t\t * @return {Matrix} a clone of the Matrix instance.\r\n\t\t **/\r\n\t\tclone : function() {\r\n\r\n\t\t\tvar _ = this._,\r\n\t\t\t\tmtx = new Matrix(_.m11, _.m12, _.m21, _.m22, _.dx, _.dy);\r\n\t\t\tmtx.shadow = this.shadow;\r\n\t\t\tmtx.alpha = this.alpha;\r\n\t\t\tmtx.compositeOperation = this.compositeOperation;\r\n\t\t\treturn mtx;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns a string representation of this object.\r\n\t\t * @method toString\r\n\t\t * @return {String} a string representation of the instance.\r\n\t\t **/\r\n\t\ttoString : function() {\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn \"[Matrix (m11=\"+_.m11+\" m12=\"+_.m12+\" m21=\"+_.m21+\" m22=\"+_.m22+\" dx=\"+_.dx+\" dy=\"+_.dy+\")]\";\r\n\t\t},\r\n\t\t\r\n\t\t\"init\" : function(m11, m12, m21, m22, dx, dy) {\r\n\t\t\tvar _ = this._;\r\n\t\t\t_.m11 = m11 || 1;\r\n\t\t\t_.m12 = m12 || 0;\r\n\t\t\t_.m21 = m21 || 0;\r\n\t\t\t_.m22 = m22 || 1;\r\n\t\t\t_.dx = dx || 0;\r\n\t\t\t_.dy = dy || 0;\r\n\t\t}\r\n\r\n\t});\r\n\t\r\n\tlangx.mixin(Matrix,{\r\n\t\ttranslate: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a translation matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to translate (move) points by specified offsets.\r\n\t\t\t// a: Number\r\n\t\t\t//\t\tan x coordinate value\r\n\t\t\t// b: Number\r\n\t\t\t//\t\ta y coordinate value\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |  1|   0| a|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |  0|   1| b|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\r\n\t\t\treturn new Matrix(1,0,0,1,a,b); // Matrix\r\n\t\t},\r\n\t\tscale: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a scaling matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to scale (magnify) points by specified offsets.\r\n\t\t\t// a: Number\r\n\t\t\t//\t\ta scaling factor used for the x coordinate\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta scaling factor used for the y coordinate\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |  a|   0| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |  0|   b| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\treturn new Matrix(a,0,0,b?b:a,0,0); // Matrix\r\n\t\t},\r\n\t\trotate: function(angle){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\tan angle of rotation in radians (>0 for CW)\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |cos|-sin| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |sin| cos| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\tvar cos = Math.cos(angle);\r\n\t\t\tvar sin = Math.sin(angle);\r\n\t\t\treturn new Matrix(cos,sin,-sin,cos,0,0); // Matrix\r\n\t\t},\r\n\t\trotateg: function(degree){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSeerotate() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\tan angle of rotation in degrees (>0 for CW)\r\n\t\t\t// returns: Matrix\r\n\t\t\treturn this.rotate(degToRad(degree)); // Matrix\r\n\t\t},\r\n\t\tskewX: function(angle) {\r\n\t\t\t//TODO : will be modified\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms an x skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the x dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |  1| tan| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |  0|   1| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\tvar tan = Math.tan(angle);\r\n\t\t\treturn new Matrix(1,0,tan,1); // Matrix\r\n\t\t},\r\n\t\tskewXg: function(degree){\r\n\t\t\t//TODO : will be modified\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms an x skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the x dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSee dojox/gfx/matrix.skewX() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// returns: Matrix\r\n\t\t\treturn this.skewX(degToRad(degree)); // dojox/gfx/matrix.Matrix\r\n\t\t},\r\n\t\tskewY: function(angle){\r\n\t\t\t//TODO : will be modified\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a y skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the y dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |  1|   0| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |tan|   1| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\tvar tan = Math.tan(angle);\r\n\r\n\t\t\treturn new Matrix(1,tan,0,1); // Matrix\r\n\t\t},\r\n\t\tskewYg: function(degree){\r\n\t\t\t//TODO : will be modified\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a y skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the y dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSee skewY() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// returns: Matrix\r\n\t\t\treturn this.skewY(degToRad(degree)); // Matrix\r\n\t\t},\r\n\t\treflect: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a reflection matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to reflect points around a vector,\r\n\t\t\t//\t\twhich goes through the origin.\r\n\t\t\t// a: dojox/gfx.Point|Number\r\n\t\t\t//\t\ta point-like object, which specifies a vector of reflection, or an X value\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta Y value\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length == 1){\r\n\t\t\t\tb = a.y;\r\n\t\t\t\ta = a.x;\r\n\t\t\t}\r\n\t\t\t// make a unit vector\r\n\t\t\tvar a2 = a * a, b2 = b * b, n2 = a2 + b2, \r\n\t\t\t\txx=2 * a2 / n2 - 1, \r\n\t\t\t\txy = 2 * a * b / n2,\r\n\t\t\t\tyx = xy,\r\n\t\t\t\tyy = 2 * b2 / n2 - 1;\r\n\t\t\treturn new Matrix(xx,yx,xy, yy); // Matrix\r\n\t\t},\r\n\t\tproject: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms an orthogonal projection matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to project points orthogonally on a vector,\r\n\t\t\t//\t\twhich goes through the origin.\r\n\t\t\t// a:   Number\r\n\t\t\t//\t\tan x coordinate value\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y coordinate value\r\n\t\t\t// returns: Matrix\r\n\r\n\t\t\t// make a unit vector\r\n\t\t\tvar a2 = a * a, b2 = b * b, n2 = a2 + b2, \r\n\t\t\t\txx = a2 / n2,\r\n\t\t\t\txy = a * b / n2\r\n\t\t\t\tyx = xy,\r\n\t\t\t\tyy = b2 / n2;\r\n\t\t\treturn new Matrix(xx,yx,xy,yy); // Matrix\r\n\t\t},\r\n\r\n\t\t// common operations\r\n\r\n\t\t// high level operations\r\n\r\n\t\t_sandwich: function(matrix, x, y){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies a matrix at a central point\r\n\t\t\t// matrix: Matrix\r\n\t\t\t//\t\ta 2D matrix-like object, which is applied at a central point\r\n\t\t\t// x: Number\r\n\t\t\t//\t\tan x component of the central point\r\n\t\t\t// y: Number\r\n\t\t\t//\t\ta y component of the central point\r\n\t\t\treturn this.translate(x, y).multiply(matrix)\r\n\t\t\t                           .multiply(this.translate(-x, -y)); // Matrix\r\n\t\t},\r\n\t\tscaleAt: function(a, b, c, d){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tscales a picture using a specified point as a center of scaling\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with scale().\r\n\t\t\t// a: Number\r\n\t\t\t//\t\ta scaling factor used for the x coordinate, or a uniform scaling factor used for both coordinates\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta scaling factor used for the y coordinate\r\n\t\t\t// c: Number|Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// d: Number\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tswitch(arguments.length){\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\t// a and b are scale factor components, c and d are components of a point\r\n\t\t\t\t\treturn this._sandwich(this.scale(a, b), c, d); // Matrix\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tif(typeof c == \"number\"){\r\n\t\t\t\t\t\treturn this._sandwich(this.scale(a), b, c); // Matrix\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn this._sandwich(this.scale(a, b), c.x, c.y); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.scale(a), b.x, b.y); // Matrix\r\n\t\t},\r\n\t\trotateAt: function(angle, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\trotates a picture using a specified point as a center of rotation\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with rotate().\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\tan angle of rotation in radians (>0 for CW)\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.rotate(angle), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.rotate(angle), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\trotategAt: function(degree, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\trotates a picture using a specified point as a center of rotation\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with rotateg().\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\tan angle of rotation in degrees (>0 for CW)\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.rotateg(degree), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.rotateg(degree), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\tskewXAt: function(angle, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the x axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with skewX().\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.skewX(angle), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.skewX(angle), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\tskewXgAt: function(degree, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the x axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with skewXg().\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.skewXg(degree), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.skewXg(degree), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\tskewYAt: function(angle, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the y axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with skewY().\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.skewY(angle), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.skewY(angle), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\tskewYgAt: function(/* Number */ degree, /* Number||Point */ a, /* Number? */ b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the y axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with skewYg().\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.skewYg(degree), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.skewYg(degree), a.x, a.y); // Matrix\r\n\t\t}\r\n\t\r\n\t\r\n\t});\r\n\r\n\treturn Matrix;\r\n});\r\n\ndefine('skylark-utils-math/transform/Transform',[\r\n    \"skylark-langx/langx\",\r\n    \"../math\",\r\n\t\"./Matrix\"\r\n], function(langx,math, Matrix) {\r\n\r\n    var Transform = math.Transform = langx.klass({\r\n        \"klassName\": \"Transform\",\r\n\t\t\"value\": {\r\n\t\t\tget : function(){\r\n\t\t\t\treturn this._.value;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn Transform;\r\n});\r\n\ndefine('skylark-utils-math/transform/MatrixTransform',[\r\n    \"skylark-langx/langx\",\r\n    \"../math\",\r\n\t\"./Transform\",\r\n\t\"../Point\",\r\n\t\"../Rect\"\r\n],function(langx,math,Transform,Point,Rect) {\r\n\r\n    var MatrixTransform = math.MatrixTransform = Transform.inherit({\r\n        \"klassName\": \"MatrixTransform\",\r\n\r\n\t\t\"value\"\t:\t{\r\n\t\t\tget : function(){\r\n\t\t\t\treturn this.matrix.clone();\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t\"matrix\" : {\r\n\t\t\tget : function(){\r\n\t\t\t\treturn this._.matrix;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tclone : /*ScaleTransform*/function() {\r\n\t\t},\r\n\t\t\r\n\t\ttransform : /*Point*/function(/*Point*/point) {\r\n\t\t},\r\n\t\t\r\n\t\t//�w�肳�ꂽ���E�{�b�N�X��ϊ����A��������傤�Ǌi�[�ł���傫���̎����s���E�{�b�N�X��Ԃ��܂��B\r\n\t\ttransformBounds : /*Rect*/function(/*Rect*/rect) {\r\n\t\t},\t\t\r\n\t\t\"initialize\" : function(/*Martix*/matrix) {\r\n            var _ = this._;\r\n\t\t\t\r\n\t\t\t_.matrix = matrix;\r\n\t\t}\r\n\t\t\t\t\r\n\t});\r\n\r\n\treturn MatrixTransform;\r\n\t\r\n});\t\r\n\ndefine('skylark-utils-math/transform/RotateTransform',[\r\n    \"skylark-langx/langx\",\r\n    \"../math\",\r\n\t\"./Transform\",\r\n\t\"./Matrix\",\r\n\t\"../Point\",\r\n\t\"../Rect\"\r\n],function(langx,math,Transform,Matrix,Point,Rect) {\r\n\r\n\r\n    var RotateTransform = math.RotateTransform = Transform.inherit({\r\n        \"klassName\": \"RotateTransform\",\r\n\r\n        \"value\": {\r\n            get: function() {\r\n                return Matrix.rotateAt(this.angle, this.centerX, this.centerY);\r\n            }\r\n        },\r\n\r\n        \"angle\": {\r\n            get : function() {\r\n                return this._.angle;\r\n            }\r\n        },\r\n        // cy: Number\r\n        //\t\tThe Y coordinate of the center of the circle, default value 0.\r\n        \"centerX\": {\r\n            get : function() {\r\n                return this._.centerX;\r\n            }\r\n        },\r\n        // r: Number\r\n        //\t\tThe radius, default value 100.\r\n        \"centerY\": {\r\n            get : function() {\r\n                return this._.centerY;\r\n            }\r\n        },\r\n\r\n\t\tclone : /*ScaleTransform*/function() {\r\n\t\t},\r\n\t\t\r\n\t\ttransform : /*Point*/function(/*Point*/point) {\r\n\t\t},\r\n\t\t\r\n\t\ttransformBounds : /*Rect*/function(/*Rect*/rect) {\r\n\t\t},\r\n\t\t\r\n\t\t\"init\" : function(/*Number*/angle,/*Number*/centerX,/*Number*/centerY) {\r\n\t\t\tvar _ = this._ = {};\r\n\t\t\t_.angle = angle ? angle :0;\r\n\t\t\t_.centerX = centerX ? centerX :0;\r\n\t\t\t_.centerY = centerY ? centerY :0;\r\n\t\t}\r\n\t});\r\n\r\n\treturn RotateTransform;\r\n\t\r\n});\t\r\n\ndefine('skylark-utils-math/transform/ScaleTransform',[\r\n    \"skylark-langx/langx\",\r\n    \"../math\",\r\n    \"./Transform\",\r\n    \"./Matrix\",\r\n    \"../Point\",\r\n    \"../Rect\"\r\n], function(langx,math, Transform, Matrix, Point, Rect) {\r\n\r\n   var ScaleTransform = math.ScaleTransform = Transform.inherit({\r\n        \"klassName\": \"ScaleTransform\",\r\n\r\n        \"value\": {\r\n            get: function() {\r\n                    return Matrix.scaleAt(this.scaleX, this.scaleY, this.centerX, this.centerY);\r\n            }\r\n        },\r\n\r\n        \"scaleX\": {\r\n            get : function() {\r\n                return this._.scaleX;\r\n            }\r\n        },\r\n\r\n        \"scaleY\": {\r\n            get : function() {\r\n                return this._.scaleY;\r\n            }\r\n        },\r\n\r\n        // cy: Number\r\n        //      The Y coordinate of the center of the circle, default value 0.\r\n        \"centerX\": {\r\n            get : function() {\r\n                return this._.centerX;\r\n            }\r\n        },\r\n        // r: Number\r\n        //      The radius, default value 100.\r\n        \"centerY\": {\r\n            get : function() {\r\n                return this._.centerY;\r\n            }\r\n        },\r\n\r\n        clone: /*ScaleTransform*/ function() {},\r\n\r\n        transform: /*Point*/ function( /*Point*/ point) {},\r\n\r\n        transformBounds: /*Rect*/ function( /*Rect*/ rect) {},\r\n\r\n        \"init\": function( /*Number*/ scaleX, /*Number*/ scaleY, /*Number*/ centerX, /*Number*/ centerY) {\r\n            var _ = this._;\r\n\r\n            _.scaleX = scaleX ? scaleX : 1;\r\n            _.scaleY = scaleY ? scaleY : 1;\r\n            _.centerX = centerX ? centerX : 0;\r\n            _.centerY = centerY ? centerY : 0;\r\n        }\r\n    });\r\n\r\n    return ScaleTransform;\r\n\r\n});\r\n\ndefine('skylark-utils-math/transform/SkewTransform',[\r\n    \"skylark-langx/langx\",\r\n    \"../math\",\r\n    \"./Transform\",\r\n    \"./Matrix\",\r\n    \"../Point\",\r\n    \"../Rect\"\r\n], function(Class, Transform, Matrix, Point, Rect) {\r\n\r\n   var SkewTransform = math.SkewTransform = Transform.inherit({\r\n        \"klassName\": \"SkewTransform\",\r\n\r\n        \"value\": {\r\n            get: function() {\r\n                    return Matrix.scaleAt(this.skewX, this.skewY);\r\n            }\r\n        },\r\n\r\n        \"skewX\": {\r\n            get : function() {\r\n                return this._.skewX;\r\n            }\r\n        },\r\n\r\n        \"skewY\": {\r\n            get : function() {\r\n                return this._.skewY;\r\n            }\r\n        },\r\n\r\n        clone: /*SkewTransform*/ function() {},\r\n\r\n        transform: /*Point*/ function( /*Point*/ point) {},\r\n\r\n        transformBounds: /*Rect*/ function( /*Rect*/ rect) {},\r\n\r\n        \"init\": function( /*Number*/ skewX, /*Number*/ skewY) {\r\n            var _ = this._;\r\n\r\n            _.skewX = skewX ? skewX : 0;\r\n            _.skewY = skewY ? skewY : 0;\r\n        }\r\n    });\r\n\r\n    return SkewTransform;\r\n\r\n});\r\n\ndefine('skylark-utils-math/transform/TranslateTransform',[\r\n    \"skylark-langx/langx\",\r\n    \"../math\",\r\n    \"./Transform\",\r\n    \"./Matrix\",\r\n    \"../Point\",\r\n    \"../Rect\"\r\n],function(langx,math,Transform,Matrix,Point,Rect) {\r\n\r\n    //|1   0   dx|\r\n    //|0   1   dy|\r\n    //|0   0    1|\r\n\r\n   var TranslateTransform = math.TranslateTransform = Transform.inherit({\r\n        \"klassName\": \"TranslateTransform\",\r\n\r\n        \"value\": {\r\n            get: function() {\r\n                    return Matrix.scaleAt(this.x, this.y);\r\n            }\r\n        },\r\n\r\n        \"x\": {\r\n            get : function() {\r\n                return this._.x;\r\n            }\r\n        },\r\n\r\n        \"y\": {\r\n            get : function() {\r\n                return this._.y;\r\n            }\r\n        },\r\n\r\n        clone: /*SkewTransform*/ function() {},\r\n\r\n        transform: /*Point*/ function( /*Point*/ point) {},\r\n\r\n        transformBounds: /*Rect*/ function( /*Rect*/ rect) {},\r\n\r\n        \"init\": function( /*Number*/ x, /*Number*/ y) {\r\n            var _ = this._;\r\n\r\n            _.x = x ? x : 0;\r\n            _.y = y ? y : 0;\r\n        }\r\n    });\r\n\r\n    return TranslateTransform;\r\n\r\n\tvar TranslateTransform = Class.declare(Transform,{\r\n\t\t\"-parent-\"\t:\tTransform,\r\n\t\t\r\n\t\t\"-module-\"\t:\t\"qface/geom/transform/TranslateTransform\",\r\n\r\n\t\t\"-protected-\" : {\r\n\t\t\t\"-methods-\"\t:\t{\r\n\t\t\t\t_valueGetter : function(){\r\n\t\t\t\t\treturn Matrix.translate(this.x,this.y);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"-public-\" : {\r\n\t\t\t\"-attributes-\" : {\r\n\t\t\t\t//x ���ɉ����ĕ��s�ړ����鋗�����擾�܂��͐ݒ肵�܂��B\r\n\t\t\t\t\"x\" : {\r\n\t\t\t\t\ttype : Number,\r\n\t\t\t\t\treadOnly : true\r\n\t\t\t\t},\r\n\t\t\t\t//y ���ɉ����ăI�u�W�F�N�g��ϊ� (�ړ�) ���鋗�����擾�܂��͐ݒ肵�܂��B\r\n\t\t\t\t\"y\" : {\r\n\t\t\t\t\ttype : Number,\r\n\t\t\t\t\treadOnly : true\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"-methods-\"\t:\t{\r\n\t\t\t\t//���� ScaleTransform �̒l�̏ڍ׃R�s�[���쐬���ĕԂ��܂��B\r\n\t\t\t\tclone : /*ScaleTransform*/function() {\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\t//�w�肵���_��ϊ����A���ʂ�Ԃ��܂��B\r\n\t\t\t\ttransform : /*Point*/function(/*Point*/point) {\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\t//�w�肳�ꂽ���E�{�b�N�X��ϊ����A��������傤�Ǌi�[�ł���傫���̎����s���E�{�b�N�X��Ԃ��܂��B\r\n\t\t\t\ttransformBounds : /*Rect*/function(/*Rect*/rect) {\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"-constructor-\"\t:\t{\t\t\r\n\t\t\t\"initialize\" : function(x,y) {\r\n\t\t\t\tthis._x = x ? x :0;\r\n\t\t\t\tthis._y = y ? y :0;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn TranslateTransform;\r\n\t\r\n});\t\r\n\ndefine('skylark-utils-math/main',[\r\n    \"./math\",\r\n    \"./Arrow\",\r\n    \"./Circle\",\r\n    \"./Ellipse\",\r\n    \"./Geometry\",\r\n    \"./Line\",\r\n    \"./Point\",\r\n    \"./Polyline\",\r\n    \"./PolyStar\",\r\n    \"./Rect\",\r\n    \"./Size\",\r\n    \"./transform/Matrix\",\r\n    \"./transform/MatrixTransform\",\r\n    \"./transform/RotateTransform\",\r\n    \"./transform/ScaleTransform\",\r\n    \"./transform/SkewTransform\",\r\n    \"./transform/Transform\",\r\n    \"./transform/TranslateTransform\"\r\n], function(math) {\r\n\r\n\treturn math;\r\n});\ndefine('skylark-utils-math', ['skylark-utils-math/main'], function (main) { return main; });\n\n"]}