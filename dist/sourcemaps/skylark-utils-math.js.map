{"version":3,"sources":["skylark-utils-math.js"],"names":["factory","globals","absolute","relative","base","stack","split","parts","pop","i","length","push","join","define","require","isAmd","amd","isCmd","exports","map","id","deps","dep","hasOwnProperty","Error","module","args","forEach","apply","window","skylarkjs","skylark","langx","math","Geometry","klass","klassName","Point","inherit","x","get","this","_","y","clone","move","dx","dy","notEqual","p","equal","init","fromString","s","a","parseFloat","fromPlain","o","fromArray","Zero","Direction","left","top","right","bottom","Arrow","bounds","box","width","height","direction","leftTop","leftBottom","rightTop","rightBottom","containPoint","undefined","Circle","cx","r","cy","diff","Ellipse","rx","ry","Line","Math","min","x1","x2","y1","y2","abs","startPoint","endPointer","Polyline","points","l","t","bbox","b","PolyStar","radius","sides","pointSize","angle","Size","toArray","toPlain","toString","w","h","Rect","size","isEmpty","isIntersect","width2","height2","width1","height1","intersect","unite","max","DEG_TO_RAD","PI","_degToRadCache","degToRad","degree","Matrix","TransformMatrix","_multiplyPoint","m11","m21","m12","m22","alpha","shadow","compositeOperation","multiplyPoint","multiplyRectangle","rect","isIdentity","p0","p1","p2","p3","minx","miny","maxx","maxy","prepend","tx1","a1","c1","append","b1","d1","prependMatrix","matrix","prependProperties","appendMatrix","appendProperties","prependTransform","scaleX","scaleY","rotation","skewX","skewY","regX","regY","cos","sin","appendTransform","rotate","skew","scale","translate","identity","invert","n","decompose","target","sqrt","atan2","reinitialize","_initialize","multiply","mtx","mixin","rotateg","tan","skewXg","skewYg","reflect","arguments","a2","b2","n2","xx","xy","yx","yy","project","_sandwich","scaleAt","c","d","rotateAt","rotategAt","skewXAt","skewXgAt","skewYAt","skewYgAt","Transform","value","MatrixTransform","transform","point","transformBounds","initialize","RotateTransform","centerX","centerY","ScaleTransform","Class","SkewTransform","TranslateTransform","main"],"mappings":"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","file":"../skylark-utils-math.js","sourcesContent":["define('skylark-utils/skylark',[\"skylark-langx/skylark\"], function(skylark) {\r\n    return skylark;\r\n});\r\n\ndefine('skylark-utils/langx',[\r\n    \"skylark-langx/langx\"\r\n], function(langx) {\r\n    return langx;\r\n});\r\n\ndefine('skylark-utils-math/math',[\r\n    \"skylark-utils/skylark\",\r\n    \"skylark-utils/langx\"\r\n], function(skylark, langx) {\r\n\tvar math = skylark.math = {\r\n\r\n\t};\r\n\r\n\treturn math;\r\n});\ndefine('skylark-utils-math/Geometry',[\r\n    \"skylark-langx/langx\",\r\n    \"./math\"\r\n],function(langx, math) {\r\n\tvar Geometry  = math.Geometry = langx.klass({\r\n\t\t\"klassName\"\t:\t\"Geometry\",\r\n\t});\r\n\r\n\r\n\treturn Geometry;\r\n\r\n});\r\n\ndefine('skylark-utils-math/Point',[\r\n    \"skylark-langx/langx\",\r\n    \"./math\",\r\n    \"./Geometry\",\r\n],function(langx, math, Geometry) {\r\n\r\n    var Point = math.Point = Geometry.inherit({\r\n        \"klassName\": \"Point\",\r\n        \"x\": {\r\n            get : function() {\r\n                return this._.x;\r\n            }\r\n        },\r\n        // y: Number\r\n        //\t\tThe Y coordinate of the default rectangle's position, value 0.\r\n        \"y\": {\r\n            get : function() {\r\n                return this._.y;\r\n            }\r\n        },\r\n\t\t\"clone\"\t: function(){\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn new Point(_.x,_.y);\r\n\t\t\r\n\t\t},\r\n\t\t\"move\"\t: function(/*Number*/dx,/*Number*/dy) {\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn new Point(_.x + dx,_.y + dy);\r\n\t\t},\r\n\t\t\"notEqual\"\t:\tfunction(/*Point*/p) {\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn !p || p.x != _.x || p.y != _.y;\r\n\t\t},\r\n\t\t\r\n\t\t\"equal\"\t:\tfunction(/*Point*/p){\r\n\t\t\treturn  !this.notEqual(p);\r\n\t\t},\r\n\t\t\r\n        \"init\" : function(x, y) {\r\n            var _ = this._ = {};\r\n            _.x = x || 0;\r\n            _.y = y || 0;\r\n        }\r\n\t});\r\n\t\r\n\tPoint.fromString = function(s) {\r\n\t\tvar a = s.split(\",\");\r\n\t\treturn new Point(parseFloat(a[0]),parseFloat(a[1]));\r\n\t};\r\n\r\n\tPoint.fromPlain = function(o) {\r\n\t\treturn new Point(o.x,o.y);\r\n\t};\r\n\r\n\tPoint.fromArray = function(a) {\r\n\t\treturn new Point(a[0],a[1]);\r\n\t};\r\n\t\r\n\tPoint.Zero = new Point(0,0);\r\n\r\n\treturn Point;\r\n\t\r\n});\t\r\n\ndefine('skylark-utils-math/Arrow',[\r\n    \"skylark-langx/langx\",\r\n    \"./math\",\r\n    \"./Geometry\",\r\n    \"./Point\"\r\n], function(langx, math, Geometry, Point) {\r\n    var Direction = {\r\n        \"left\" : 1,\r\n        \"top\" : 2,\r\n        \"right\" : 3, \r\n        \"bottom\" : 4\r\n    };\r\n\r\n    var Arrow = math.Arrow = Geometry.inherit({\r\n        \"klassName\": \"Arrow\",\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //\t\treturns the bounding box\r\n                var \r\n                    _ = this._,\r\n                    box = {\r\n                    x: _.x,\r\n                    y: this.y,\r\n                    width: _.width,\r\n                    height: _.height\r\n                };\r\n                return box;\r\n            }\r\n        },\r\n       \"x\": {\r\n            get : function() {\r\n                return this._.x;\r\n            }\r\n        },\r\n        // y: Number\r\n        //\t\tThe Y coordinate of the default rectangle's position, value 0.\r\n        \"y\": {\r\n            get : function() {\r\n                return this._.y;\r\n            }\r\n        },\r\n        // width: Number\r\n        //\t\tThe width of the default rectangle, value 100.\r\n        \"width\": {\r\n            get : function() {\r\n                return this._.width;\r\n            }\r\n        },\r\n        // height: Number\r\n        //\t\tThe height of the default rectangle, value 100.\r\n        \"height\": {\r\n            get : function() {\r\n                return this._.height;\r\n            }\r\n        },\r\n        // r: Number\r\n        //\t\tThe corner radius for the default rectangle, value 0.\r\n        \"direction\": {\r\n            get : function() {\r\n                return this._.direction;\r\n            }\r\n        },\r\n        \"leftTop\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x, _.y);\r\n            }\r\n        },\r\n        \"leftBottom\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x, _.y + _.height);\r\n            }\r\n        },\r\n        \"rightTop\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x + _.width, _.y);\r\n            }\r\n        },\r\n        \"rightBottom\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x + _.width, _.y + _.height);\r\n            }\r\n        },\r\n        \"move\": function(dx, dy) {\r\n            var _ = this._;\r\n            return new Arrow(_.x + dx,_.y + dy,_.width,_.height,_.direction);\r\n        },\r\n        \"containPoint\": function(x,y) {\r\n            // support function(p)\r\n            if (y === undefined) {\r\n                var p = x;\r\n                x = p.x;\r\n                y = p.y;\r\n            }\r\n            var _ = this._;\r\n\r\n            return (x >= _.x) && (x < _.x + _.width) && (y >= _.y) && (y < _.y + _.height);\r\n        },\r\n        \"init\" : function(x, y, width, height, direction) {\r\n            var _ = this._ = {};\r\n            _.x = x || 0;\r\n            _.y = y || 0;\r\n            _.width = width || 0;\r\n            _.height = height || 0;\r\n            _.direction = direction || Direction.top;\r\n        }\r\n    });\r\n\r\n    Arrow.Direction = Direction;\r\n\r\n    return Arrow;\r\n});\r\n\ndefine('skylark-utils-math/Circle',[\r\n    \"skylark-langx/langx\",\r\n    \"./math\",\r\n    \"./Geometry\"\r\n], function(langx, math, Geometry) {\r\n\r\n    var Circle = math.Circle = Geometry.inherit({\r\n        \"klassName\": \"Circle\",\r\n\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //      returns the bounding box\r\n                var _ = this._,\r\n                    box = {\r\n                        x: _.cx - _.r,\r\n                        y: _.cy - _.r,\r\n                        width: 2 * _.r,\r\n                        height: 2 * _.r\r\n                    };\r\n                return box;\r\n            }\r\n        },\r\n\r\n        // cx: Number\r\n        //\t\tThe X coordinate of the center of the circle, default value 0.\r\n        \"cx\": {\r\n            get : function() {\r\n                return this._.cx;\r\n            }\r\n        },\r\n        // cy: Number\r\n        //\t\tThe Y coordinate of the center of the circle, default value 0.\r\n        \"cy\": {\r\n            get : function() {\r\n                return this._.cy;\r\n            }\r\n        },\r\n        // r: Number\r\n        //\t\tThe radius, default value 100.\r\n        \"r\": {\r\n            get : function() {\r\n                return this._.r;\r\n            }\r\n        },\r\n        move: function(dx, dy) {\r\n            var _ = this._;            \r\n            return new Circle(_.cx + dx,_.cy + dy,_.r);\r\n        },\r\n        containPoint: function(x,y) {\r\n            // support function(p)\r\n            if (y === undefined) {\r\n                var p = x;\r\n                x = p.x;\r\n                y = p.y;\r\n            }\r\n            var _ = this._;\r\n\r\n            var diff = (x - _.x) * (x - _.x) + (y - _.y) * (y - _.y);\r\n            if (diff < _.r * _.r) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        \"init\" : function(cx, cy, r) {\r\n            var _ = this._ = {};\r\n            _.cx = cx || 0;\r\n            _.cy = cy || 0;\r\n            _.r = r || 0;\r\n        }\r\n\r\n    });\r\n\r\n    return Circle;\r\n});\r\n\ndefine('skylark-utils-math/Ellipse',[\r\n    \"skylark-langx/langx\",\r\n    \"./math\",\r\n    \"./Geometry\",\r\n], function(langx, math, Geometry) {\r\n\r\n    var Ellipse = math.Ellipse = Geometry.inherit({\r\n        \"klassName\": \"Ellipse\",\r\n\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //      returns the bounding box\r\n                var _ = this._,\r\n                    box = {\r\n                        x: _.cx - _.rx,\r\n                        y: _.cy - _.ry,\r\n                        width: 2 * _.rx,\r\n                        height: 2 * _.ry\r\n                    };\r\n                return box;\r\n            }\r\n        },\r\n\r\n        // cx: Number\r\n        //\t\tThe X coordinate of the center of the ellipse, default value 0.\r\n        \"cx\": {\r\n            get : function() {\r\n                return this._.cx;\r\n            }\r\n        },\r\n        // cy: Number\r\n        //\t\tThe Y coordinate of the center of the ellipse, default value 0.\r\n        \"cy\": {\r\n            get : function() {\r\n                return this._.cy;\r\n            }\r\n        },\r\n        // rx: Number\r\n        //\t\tThe radius of the ellipse in the X direction, default value 200.\r\n        \"rx\": {\r\n            get : function() {\r\n                return this._.rx;\r\n            }\r\n        },\r\n        // ry: Number\r\n        //\t\tThe radius of the ellipse in the Y direction, default value 200.\r\n        \"ry\": {\r\n            get : function() {\r\n                return this._.ry;\r\n            }\r\n        },\r\n        \"move\": function(dx, dy) {\r\n            var _ = this._;            \r\n            return new Ellipse(_.cx + dx,_.cy + dy,_.rx,_.ry);\r\n        },\r\n\r\n        \"containPoint\": function(p) {\r\n        },\r\n\r\n        \"init\" :  function(cx, cy, rx, ry) {\r\n            var _ = this._ = {};\r\n            _.cx = cx || 0;\r\n            _.cy = cy || 0;\r\n            _.rx = rx || 0;\r\n            _.ry = ry || 0;\r\n        }\r\n    });\r\n\r\n    return Ellipse;\r\n});\r\n\n/**\r\n *\r\n * Copyright (c) 2013 psteam Inc.(http://www.psteam.co.jp)\r\n * http://www.psteam.co.jp/qface/license\r\n * \r\n * @Author: liwenfeng\r\n * @Date: 2013/02/28\r\n */\r\ndefine('skylark-utils-math/Line',[\r\n    \"skylark-langx/langx\",\r\n    \"./math\",\r\n    \"./Geometry\",\r\n    \"./Point\"\r\n], function(langx, math, Geometry, Point) {\r\n\r\n    var Line = math.Line = Geometry.inherit({\r\n        \"klassName\": \"Line\",\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //\t\treturns the bounding box\r\n                var \r\n                    _ = this._,\r\n                    box = {\r\n\t\t\t\t\t\tx:\t\tMath.min(_.x1, _.x2),\r\n\t\t\t\t\t\ty:\t\tMath.min(_.y1, _.y2),\r\n\t\t\t\t\t\twidth:\tMath.abs(_.x2 - _.x1),\r\n\t\t\t\t\t\theight:\tMath.abs(_.y2 -_.y1)\r\n\t                };\r\n                return box;\r\n            }\r\n        },\r\n       \"x1\": {\r\n            get : function() {\r\n                return this._.x1;\r\n            }\r\n        },\r\n        // y: Number\r\n        //\t\tThe Y coordinate of the default rectangle's position, value 0.\r\n        \"y1\": {\r\n            get : function() {\r\n                return this._.y1;\r\n            }\r\n        },\r\n        \"x2\": {\r\n            get : function() {\r\n                return this._.x2;\r\n            }\r\n        },\r\n        \"y2\": {\r\n            get : function() {\r\n                return this._.y2;\r\n            }\r\n        },\r\n\r\n\t\t\"startPoint\" :{\r\n\t\t\tget : function(){\r\n\t\t\t\tvar _ = this._;\r\n\t\t\t\treturn new Point(_.x1,_.y1);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"endPointer\" :{\r\n\t\t\tget : function(){\r\n\t\t\t\tvar _ = this._;\r\n\t\t\t\treturn new Point(_.x2,_.y2);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\t\r\n\t\tmove\t: function(dx,dy) {\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn new Line(_.x1+dx,_.y1+dy,_.x2+dx,_.y2+dy);\r\n\t\t},\r\n\r\n\t\tcontainPoint : function(x,y) {\r\n            if (y === undefined) {\r\n                var p = x;\r\n                x = p.x;\r\n                y = p.y;\r\n            }\r\n            var _ = this._;\r\n\t\t\r\n    \t\treturn Math.abs((y-_.y1)*(_.x2-_.x1) - (_.y2-_.y1)*(x-_.x1)) < 1e-6;\r\n\r\n\t\t},\r\n\r\n        \"init\" : function(x1, y1, x2,y2) {\r\n            var _ = this._ = {};\r\n            _.x1 = x1 || 0;\r\n            _.y1 = y1 || 0;\r\n            _.x2 = x2 || 0;\r\n            _.y2 = y2 || 0;\r\n        }\r\n\t});\r\n\t\r\n\t\r\n\treturn Line;\r\n\t\r\n});\t\r\n\ndefine('skylark-utils-math/Polyline',[\r\n    \"skylark-langx/langx\",\r\n    \"./math\",\r\n    \"./Geometry\"\r\n], function(langx, math, Geometry) {\r\n\r\n    var Polyline = math.Polyline = Geometry.inherit({\r\n        \"klassName\": \"Polyline\",\r\n\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //      returns the bounding box\r\n                var _ = this._,\r\n\t\t\t\t\tp = _.points,\r\n\t\t\t\t\tl = p.length,\r\n\t\t\t\t\tt = p[0],\r\n\t\t\t\t\tbbox = {l: t.x, t: t.y, r: t.x, b: t.y};\r\n\t\t\t\tfor(var i = 1; i < l; ++i){\r\n\t\t\t\t\tt = p[i];\r\n\t\t\t\t\tif(bbox.l > t.x) bbox.l = t.x;\r\n\t\t\t\t\tif(bbox.r < t.x) bbox.r = t.x;\r\n\t\t\t\t\tif(bbox.t > t.y) bbox.t = t.y;\r\n\t\t\t\t\tif(bbox.b < t.y) bbox.b = t.y;\r\n\t\t\t\t}\r\n\t\t\t\tvar box = {\r\n\t\t\t\t\tx:\t\tbbox.l,\r\n\t\t\t\t\ty:\t\tbbox.t,\r\n\t\t\t\t\twidth:\tbbox.r - bbox.l,\r\n\t\t\t\t\theight:\tbbox.b - bbox.t\r\n\t\t\t\t};\r\n                return box;\r\n            }\r\n        },\r\n\t\t\"points\" : {\r\n            get : function() {\r\n                return this._.points;\r\n            }\r\n\t\t},\r\n\t\t\r\n\t\t\"init\" : function(/*Array*/points) {\r\n\t\t\t//TODO: will be modified\r\n\t\t\tvar _ = this._ = {};\r\n\t\t\t_.points = points?points:[];\r\n\t\t}\r\n\t});\r\n\t\r\n\t\r\n\treturn Polyline;\r\n\t\r\n});\t\r\n\ndefine('skylark-utils-math/PolyStar',[\r\n    \"skylark-langx/langx\",\r\n    \"./math\",\r\n    \"./Geometry\",\r\n],function(langx, math, Geometry) {\r\n\r\n    var PolyStar = math.PolyStar = Geometry.inherit({\r\n        \"klassName\": \"PolyStar\",\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //\t\treturns the bounding box\r\n\t\t\t\tvar _ = this._,\r\n\t\t\t\t\tp = _.points,\r\n\t\t\t\t\tl = p.length,\r\n\t\t\t\t\tt = p[0];\r\n\t\t\t\t\tbbox = {l: t.x, t: t.y, r: t.x, b: t.y};\r\n\t\t\t\tfor(var i = 1; i < l; ++i){\r\n\t\t\t\t\tt = p[i];\r\n\t\t\t\t\tif(bbox.l > t.x) bbox.l = t.x;\r\n\t\t\t\t\tif(bbox.r < t.x) bbox.r = t.x;\r\n\t\t\t\t\tif(bbox.t > t.y) bbox.t = t.y;\r\n\t\t\t\t\tif(bbox.b < t.y) bbox.b = t.y;\r\n\t\t\t\t}\r\n\t\t\t\tvar box = {\r\n\t\t\t\t\tx:\t\tbbox.l,\r\n\t\t\t\t\ty:\t\tbbox.t,\r\n\t\t\t\t\twidth:\tbbox.r - bbox.l,\r\n\t\t\t\t\theight:\tbbox.b - bbox.t\r\n\t\t\t\t};\r\n\t\t\t\treturn box;\t\r\n            }\r\n        },\r\n       \"x\": {\r\n            get : function() {\r\n                return this._.x;\r\n            }\r\n        },\r\n        // y: Number\r\n        //\t\tThe Y coordinate of the default rectangle's position, value 0.\r\n        \"y\": {\r\n            get : function() {\r\n                return this._.y;\r\n            }\r\n        },\r\n        \"radius\": {\r\n            get : function() {\r\n                return this._.radius;\r\n            }\r\n        },\r\n        \"sides\": {\r\n            get : function() {\r\n                return this._.sides;\r\n            }\r\n        },\r\n        \"pointSize\": {\r\n            get : function() {\r\n                return this._.pointSize;\r\n            }\r\n        },\r\n        \"angle\": {\r\n            get : function() {\r\n                return this._.angle;\r\n            }\r\n         },\r\n\t\t\"init\"\t:function(x, y, radius, sides, pointSize, angle){\r\n\t\t\tvar _ = this._;\r\n\t\t\t_.x = x;\r\n\t\t\t_.y = y;\r\n\t\t\t_.radius = radius;\r\n\t\t\t_.sides = sides;\r\n\t\t\t_.pointSize = pointSize;\r\n\t\t\t_.angle = angle;\r\n\t\t}\r\n\r\n\t});\r\n\t\r\n\t\r\n\treturn PolyStar;\r\n\t\r\n});\t\r\n\ndefine('skylark-utils-math/Size',[\r\n    \"skylark-langx/langx\",\r\n    \"./math\",\r\n    \"./Geometry\"\r\n],function(langx,math,Geometry) {\r\n\r\n    var Size = math.Size = Geometry.inherit({\r\n        \"klassName\": \"Size\",\r\n\t\t// width: Number\r\n\t\t//\t\tThe width of the default rectangle, value 100.\r\n\t\t\"width\" : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.width;\r\n\t\t\t}\r\n\t\t},\r\n\t\t// height: Number\r\n\t\t//\t\tThe height of the default rectangle, value 100.\r\n\t\t\"height\" : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.height;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"clone\"\t: function(){\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn new Size(_.width,_.height);\r\n\t\t},\r\n\r\n        \"toArray\" : function() {\r\n            return [this.width,this.height];\r\n        },\r\n\r\n        \"toPlain\" : function() {\r\n            return {\r\n                \"width\"  : this.width,\r\n                \"height\"  : this.height\r\n            };\r\n        },\r\n        \"toString\": function() {\r\n        \treturn this.width +\",\" + this.height;\r\n        },\r\n\r\n        \"init\" : function(width,height) {\r\n        \tvar _ = this._ = {};\r\n        \t_.width = width || 0;\r\n        \t_.height = height || 0;\r\n        }\r\n\t});\r\n\t\r\n\tSize.fromString = function(s) {\r\n\t\tvar a = s.split(\",\");\r\n\t\treturn new Size(parseFloat(a[0]),parseFloat(a[1]));\r\n\t};\r\n\r\n\tSize.fromPlain = function(o) {\r\n\t\treturn new Size(o.w || o.width,o.h || o.height);\r\n\t};\r\n\r\n\tSize.fromArray = function(a) {\r\n\t\treturn new Size(a[0],a[1]);\r\n\t};\r\n\r\n\tSize.Zero = new Size(0,0);\r\n\t\r\n\treturn Size;\r\n\t\r\n});\t\r\n\ndefine('skylark-utils-math/Rect',[\r\n    \"skylark-langx/langx\",\r\n    \"./math\",\r\n    \"./Geometry\",\r\n    \"./Point\",\r\n\t\"./Size\"\r\n],function(langx, math, Geometry,Point,Size) {\r\n\r\n    var Rect = math.Rect = Geometry.inherit({\r\n        \"klassName\": \"Rect\",\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //\t\treturns the bounding box\r\n                var \r\n                    _ = this._,\r\n                    box = {\r\n                    x: _.x,\r\n                    y: this.y,\r\n                    width: _.width,\r\n                    height: _.height\r\n                };\r\n                return box;\r\n            }\r\n        },\r\n       \"x\": {\r\n            get : function() {\r\n                return this._.x;\r\n            }\r\n        },\r\n        // y: Number\r\n        //\t\tThe Y coordinate of the default rectangle's position, value 0.\r\n        \"y\": {\r\n            get : function() {\r\n                return this._.y;\r\n            }\r\n        },\r\n        // width: Number\r\n        //\t\tThe width of the default rectangle, value 100.\r\n        \"width\": {\r\n            get : function() {\r\n                return this._.width;\r\n            }\r\n        },\r\n        // height: Number\r\n        //\t\tThe height of the default rectangle, value 100.\r\n        \"height\": {\r\n            get : function() {\r\n                return this._.height;\r\n            }\r\n        },\r\n        // r: Number\r\n        //\t\tThe corner radius for the default rectangle, value 0.\r\n        \"radius\": {\r\n            get : function() {\r\n                return this._.radius;\r\n            }\r\n        },\r\n        \"leftTop\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x, _.y);\r\n            }\r\n        },\r\n        \"leftBottom\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x, _.y + _.height);\r\n            }\r\n        },\r\n        \"rightTop\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x + _.width, _.y);\r\n            }\r\n        },\r\n        \"rightBottom\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x + _.width, _.y + _.height);\r\n            }\r\n        },\r\n\r\n        \"size\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Size(_.width, _.height);\r\n            }\r\n        },\r\n\r\n        \"move\": function(dx, dy) {\r\n            var _ = this._;\r\n            return new Rect(_.x + dx,_.y + dy,_.width,_.height,_.radius);\r\n        },\r\n\r\n        \"containPoint\": function(x,y) {\r\n            // support function(p)\r\n            if (y === undefined) {\r\n                var p = x;\r\n                x = p.x;\r\n                y = p.y;\r\n            }\r\n            var _ = this._;\r\n\r\n            return (x >= _.x) && (x < _.x + _.width) && (y >= _.y) && (y < _.y + _.height);\r\n        },\r\n\r\n\t\t\"isEmpty\"\t:\tfunction(){\r\n\t\t\treturn this.width <=0 || this.height<=0;\r\n\t\t},\r\n\t\t\r\n\t\t\"notEqual\"\t:\tfunction(/*Rect*/r) {\r\n\t\t\treturn !r || r.x != this.x || r.y != this.y || r.width != this.width || r.height != this.height || r.radius != this.radius;\r\n\t\t},\r\n\t\t\r\n\t\t\"equal\"\t:\tfunction(/*Rect*/r){\r\n\t\t\treturn  !this.notEqual(r);\r\n\t\t},\r\n\t\t\r\n\t\t\"isIntersect\"\t:function(/*Number*/x2,/*Number*/y2,/*Number*/width2,/*Number*/height2){\r\n\t\t\tvar x1 = this.x1,y1=this.y,width1=this.width,height1=this.height;\r\n\t\t\t \r\n\t\t    return (Math.min(x1 + width1, x2 + width2) - (x1 > x2 ? x1 : x2)) > 0 &&\r\n\t\t           (Math.min(y1 + height1, y2 + height2) - (y1 > y2 ? y1 : y2)) > 0;\r\n\t\t},\r\n\t\t\r\n\t\t\"intersect\"\t:\tfunction(/*Number*/x2,/*Number*/y2,/*Number*/width2,/*Number*/height2){\r\n\t\t\tvar x1 = this.x1,y1=this.y,width1=this.width,height1=this.height;\r\n\t\t\t \r\n\t\t    return (Math.min(x1 + width1, x2 + width2) - (x1 > x2 ? x1 : x2)) > 0 &&\r\n\t\t           (Math.min(y1 + height1, y2 + height2) - (y1 > y2 ? y1 : y2)) > 0;\r\n\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\"unite\"\t: function(/*Number*/x2,/*Number*/y2,/*Number*/width2,/*Number*/height2){\r\n\t\t\tvar x1 = this.x1,y1=this.y,width1=this.width,height1=this.height;\r\n\t\t\t \r\n\t\t\tvar x = x1 < x2 ? x1 : x2,\r\n\t\t\t\ty = y1 < y2 ? y1 : y2,\r\n\t\t\t\twidth  = Math.max(x1 + width1, x2 + width2) - x;\r\n\t\t\t\theight = Math.max(y1 + height1, y2 + height2) - y;\r\n\t\t    \r\n\t\t    return new Rect(x,y,width,height);\r\n\t\t},\r\n\t\t\r\n\t\t\"clone\"\t: function(){\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn new Rect(_.x,_.y,_.width,_.height,_.radius);\r\n\t\t},\r\n\r\n        \"init\" : function(x, y, width, height, radius) {\r\n            var _ = this._ = {};\r\n            _.x = x || 0;\r\n            _.y = y || 0;\r\n            _.width = width || 0;\r\n            _.height = height || 0;\r\n            _.radius = radius || 0;\r\n        }\r\n    });\r\n\r\n\r\n\tRect.fromString = function(s) {\r\n\t\tvar a = s.split(\",\");\r\n\t\treturn new Rect(parseFloat(a[0]),parseFloat(a[1]),parseFloat(a[2]),parseFloat(a[3]));\r\n\t};\r\n\r\n\tRect.fromPlain = function(o) {\r\n\t\treturn new Rect(o.x || o.l,o.y || o.t, o.w || o.width,o.h || o.height);\r\n\t};\r\n\r\n\tRect.fromArray = function(a) {\r\n\t\treturn new Rect(a[0],a[1],a[2],a[3]);\r\n\t};\r\n\t\r\n\tRect.Zero = new Rect(0,0,0,0);\r\n\t\r\n\treturn Rect;\r\n\t\r\n});\t\r\n\ndefine( 'skylark-utils-math/transform/Matrix',[\r\n    \"skylark-langx/langx\",\r\n    \"../math\",\r\n], function(langx,math){\r\n\t// reference easeljs/geom/Matrix2D  and dojox/gfx/matrix\r\n\t\r\n\tvar DEG_TO_RAD = Math.PI/180;\r\n\tvar _degToRadCache = {};\r\n\tvar degToRad = function(degree){\r\n\t\treturn _degToRadCache[degree] || (_degToRadCache[degree] = (Math.PI * degree / 180));\r\n\t};\r\n\tvar radToDeg = function(radian){ return radian / Math.PI * 180; };\r\n\t\r\n\r\n\t//Represents a 3 x 3 affine transformation matrix used for transformation in 2-D space.\r\n\t//|----------|\r\n\t//|m11|m21|dx| \r\n\t//|----------|\r\n\t//|m12|m22|dy|\r\n\t//|----------|\r\n\t//|  0|  0| 1|\r\n\t//|----------|\r\n\t\r\n    var Matrix = math.TransformMatrix = langx.klass({\r\n        \"klassName\": \"TransformMatrix\",\r\n\r\n\t\t\"_multiplyPoint\"\t: \tfunction(p){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies the matrix to a point\r\n\t\t\t// p: Point\r\n\t\t\t//\t\ta point\r\n\t\t\t// returns: Point\r\n\t\t\tvar _ = this._,\r\n\t\t\t\tx = p.x * _.m11 + p.y * _.m21  + _.dx,\r\n\t\t\t    y = p.x * _.m12 +  p.y * _.m22 + _.dy;\r\n\t\t\treturn new Point(x,y); // Point\r\n\t\t},\r\n\r\n       \"m11\": {\r\n       \t\t//Position (0, 0) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.m11;\r\n            }\r\n        },\r\n\r\n       \"m12\": {\r\n       \t\t//Position (0, 1) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.m12;\r\n            }\r\n        },\r\n\r\n       \"m21\": {\r\n       \t\t//Position (1, 0) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.m21;\r\n            }\r\n        },\r\n\r\n       \"m22\": {\r\n       \t\t//Position (1, 1) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.m22;\r\n            }\r\n        },\r\n\r\n       \"dx\": {\r\n       \t\t// Position (2, 1) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.dx;\r\n            }\r\n        },\r\n\r\n       \"dy\": {\r\n       \t\t// Position (2, 1) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.dy;\r\n            }\r\n        },\r\n\r\n       \"alpha\": {\r\n       \t\t// Property representing the alpha that will be applied to a display object. This is not part of matrix\r\n       \t\t// operations, but is used for operations like getConcatenatedMatrix to provide concatenated alpha values.\r\n            get : function() {\r\n                return this._.alpha;\r\n            }\r\n        },\r\n\r\n       \"shadow\": {\r\n       \t\t// Property representing the shadow that will be applied to a display object. This is not part of matrix\r\n       \t\t// operations, but is used for operations like getConcatenatedMatrix to provide concatenated shadow values..\r\n            get : function() {\r\n                return this._.shadow;\r\n            }\r\n        },\r\n\r\n       \"compositeOperation\": {\r\n\t\t\t/**\r\n\t\t\t * Property representing the compositeOperation that will be applied to a display object. This is not part of\r\n\t\t\t * matrix operations, but is used for operations like getConcatenatedMatrix to provide concatenated\r\n\t\t\t * compositeOperation values. You can find a list of valid composite operations at:\r\n\t\t\t * <a href=\"https://developer.mozilla.org/en/Canvas_tutorial/Compositing\">https://developer.mozilla.org/en/Canvas_tutorial/Compositing</a>\r\n\t\t\t * @property compositeOperation\r\n\t\t\t * @type String\r\n\t\t\t **/\r\n            get : function() {\r\n                return this._.compositeOperation;\r\n            }\r\n        },\r\n\r\n        //Converts the specified point with Matrix and returns the result.\r\n\t\tmultiplyPoint: /*Point*/function(/*Point */ p){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies the matrix to a point\r\n\t\t\treturn this._multiplyPoint(p); // Point\r\n\t\t},\r\n\t\t\t\t/**\r\n\t\t\t\t * 指定した矩形を Matrix で変換し、その結果を返します。\r\n\t\t\t\t */\r\n\t\tmultiplyRectangle: /*Rect*/function(/*Rect*/ rect){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tApplies the matrix to a rectangle.\r\n\t\t\t// returns: Rect\r\n\t\t\tif(this.isIdentity())\r\n\t\t\t\treturn rect.clone(); // Rect\r\n\t\t\tvar p0 = this.multiplyPoint(rect.leftTop),\r\n\t\t\t\tp1 = this.multiplyPoint(rect.leftBottom),\r\n\t\t\t\tp2 = this.multiplyPoint(rect.right),\r\n\t\t\t\tp3 = this.multiplyPoint(rect.rightBottom),\r\n\t\t\t\tminx = Math.min(p0.x, p1.x, p2.x, p3.x),\r\n\t\t\t\tminy = Math.min(p0.y, p1.y, p2.y, p3.y),\r\n\t\t\t\tmaxx = Math.max(p0.x, p1.x, p2.x, p3.x),\r\n\t\t\t\tmaxy = Math.max(p0.y, p1.y, p2.y, p3.y);\r\n\t\t\treturn new Rect(minx,miny,maxx-minx,maxy-miny);  // Rect\r\n\t\t},\r\n\t\t/**\r\n\t\t * Concatenates the specified matrix properties with this matrix. All parameters are required.\r\n\t\t * @method prepend\r\n\t\t * @param {Number} m11\r\n\t\t * @param {Number} m12\r\n\t\t * @param {Number} m21\r\n\t\t * @param {Number} m22\r\n\t\t * @param {Number} dx\r\n\t\t * @param {Number} dy\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tprepend : function(m11, m12, m21, m22, dx, dy) {\r\n\t\t\tvar tx1 = this.dx;\r\n\t\t\tif (m11 != 1 || m12 != 0 || m21 != 0 || m22 != 1) {\r\n\t\t\t\tvar a1 = this.m11;\r\n\t\t\t\tvar c1 = this.m21;\r\n\t\t\t\tthis.m11  = a1*m11+this.m12*m21;\r\n\t\t\t\tthis.m12  = a1*m12+this.m12*m22;\r\n\t\t\t\tthis.m21  = c1*m11+this.m22*m21;\r\n\t\t\t\tthis.m22  = c1*m12+this.m22*m22;\r\n\t\t\t}\r\n\t\t\tthis.dx = tx1*m11+this.dy*m21+dx;\r\n\t\t\tthis.dy = tx1*m12+this.dy*m22+dy;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Appends the specified matrix properties with this matrix. All parameters are required.\r\n\t\t * 指定した Matrixをこの Matrixに追加します。\r\n\t\t * @method append\r\n\t\t * @param {Number} m11\r\n\t\t * @param {Number} m12\r\n\t\t * @param {Number} m21\r\n\t\t * @param {Number} m22\r\n\t\t * @param {Number} dx\r\n\t\t * @param {Number} dy\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tappend : function(m11, m12, m21, m22, dx, dy) {\r\n\t\t\tvar a1 = this.m11;\r\n\t\t\tvar b1 = this.m12;\r\n\t\t\tvar c1 = this.m21;\r\n\t\t\tvar d1 = this.m22;\r\n\r\n\t\t\tthis.m11  = m11*a1+m12*c1;\r\n\t\t\tthis.m12  = m11*b1+m12*d1;\r\n\t\t\tthis.m21  = m21*a1+m22*c1;\r\n\t\t\tthis.m22  = m21*b1+m22*d1;\r\n\t\t\tthis.dx = dx*a1+dy*c1+this.dx;\r\n\t\t\tthis.dy = dx*b1+dy*d1+this.dy;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Prepends the specified matrix with this matrix.\r\n\t\t * @method prependMatrix\r\n\t\t * @param {Matrix} matrix\r\n\t\t **/\r\n\t\tprependMatrix : function(matrix) {\r\n\t\t\tthis.prepend(matrix.m11, matrix.m12, matrix.m21, matrix.m22, matrix.dx, matrix.dy);\r\n\t\t\tthis.prependProperties(matrix.alpha, matrix.shadow,  matrix.compositeOperation);\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Appends the specified matrix with this matrix.\r\n\t\t * 指定した Matrixをこの Matrixに追加します。\r\n\t\t * @method appendMatrix\r\n\t\t * @param {Matrix} matrix\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tappendMatrix : function(matrix) {\r\n\t\t\tthis.append(matrix.m11, matrix.m12, matrix.m21, matrix.m22, matrix.dx, matrix.dy);\r\n\t\t\tthis.appendProperties(matrix.alpha, matrix.shadow,  matrix.compositeOperation);\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Generates matrix properties from the specified display object transform properties, and prepends them with this matrix.\r\n\t\t * For example, you can use this to generate a matrix from a display object: var mtx = new Matrix();\r\n\t\t * mtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\r\n\t\t * @method prependTransform\r\n\t\t * @param {Number} x\r\n\t\t * @param {Number} y\r\n\t\t * @param {Number} scaleX\r\n\t\t * @param {Number} scaleY\r\n\t\t * @param {Number} rotation\r\n\t\t * @param {Number} skewX\r\n\t\t * @param {Number} skewY\r\n\t\t * @param {Number} regX Optional.\r\n\t\t * @param {Number} regY Optional.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tprependTransform : function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\r\n\t\t\tif (rotation%360) {\r\n\t\t\t\tvar r = rotation*DEG_TO_RAD;\r\n\t\t\t\tvar cos = Math.cos(r);\r\n\t\t\t\tvar sin = Math.sin(r);\r\n\t\t\t} else {\r\n\t\t\t\tcos = 1;\r\n\t\t\t\tsin = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (regX || regY) {\r\n\t\t\t\t// append the registration offset:\r\n\t\t\t\tthis.dx -= regX; this.dy -= regY;\r\n\t\t\t}\r\n\t\t\tif (skewX || skewY) {\r\n\t\t\t\t// TODO: can this be combined into a single prepend operation?\r\n\t\t\t\tskewX *= DEG_TO_RAD;\r\n\t\t\t\tskewY *= DEG_TO_RAD;\r\n\t\t\t\tthis.prepend(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);\r\n\t\t\t\tthis.prepend(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\r\n\t\t\t} else {\r\n\t\t\t\tthis.prepend(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, x, y);\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Generates matrix properties from the specified display object transform properties, and appends them with this matrix.\r\n\t\t * For example, you can use this to generate a matrix from a display object: var mtx = new Matrix();\r\n\t\t * mtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\r\n\t\t * @method appendTransform\r\n\t\t * @param {Number} x\r\n\t\t * @param {Number} y\r\n\t\t * @param {Number} scaleX\r\n\t\t * @param {Number} scaleY\r\n\t\t * @param {Number} rotation\r\n\t\t * @param {Number} skewX\r\n\t\t * @param {Number} skewY\r\n\t\t * @param {Number} regX Optional.\r\n\t\t * @param {Number} regY Optional.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tappendTransform : function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\r\n\t\t\tif (rotation%360) {\r\n\t\t\t\tvar r = rotation*DEG_TO_RAD;\r\n\t\t\t\tvar cos = Math.cos(r);\r\n\t\t\t\tvar sin = Math.sin(r);\r\n\t\t\t} else {\r\n\t\t\t\tcos = 1;\r\n\t\t\t\tsin = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (skewX || skewY) {\r\n\t\t\t\t// TODO: can this be combined into a single append?\r\n\t\t\t\tskewX *= DEG_TO_RAD;\r\n\t\t\t\tskewY *= DEG_TO_RAD;\r\n\t\t\t\tthis.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\r\n\t\t\t\tthis.append(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);\r\n\t\t\t} else {\r\n\t\t\t\tthis.append(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, x, y);\r\n\t\t\t}\r\n\r\n\t\t\tif (regX || regY) {\r\n\t\t\t\t// prepend the registration offset:\r\n\t\t\t\tthis.dx -= regX*this.m11+regY*this.m21; \r\n\t\t\t\tthis.dy -= regX*this.m12+regY*this.m22;\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Applies a rotation transformation to the matrix.\r\n\t\t * この Matrix の原点を中心とする指定した角度の回転を適用します。\r\n\t\t * @method rotate\r\n\t\t * @param {Number} angle The angle in degrees.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\trotate : function(angle) {\r\n\t\t\tvar cos = Math.cos(angle);\r\n\t\t\tvar sin = Math.sin(angle);\r\n\r\n\t\t\tvar a1 = this.m11;\r\n\t\t\tvar c1 = this.m21;\r\n\t\t\tvar tx1 = this.dx;\r\n\r\n\t\t\tthis.m11 = a1*cos-this.m12*sin;\r\n\t\t\tthis.m12 = a1*sin+this.m12*cos;\r\n\t\t\tthis.m21 = c1*cos-this.m22*sin;\r\n\t\t\tthis.m22 = c1*sin+this.m22*cos;\r\n\t\t\tthis.dx = tx1*cos-this.dy*sin;\r\n\t\t\tthis.dy = tx1*sin+this.dy*cos;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Applies a skew transformation to the matrix.\r\n\t\t * @method skew\r\n\t\t * @param {Number} skewX The amount to skew horizontally in degrees.\r\n\t\t * @param {Number} skewY The amount to skew vertically in degrees.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\tskew : function(skewX, skewY) {\r\n\t\t\tskewX = skewX*DEG_TO_RAD;\r\n\t\t\tskewY = skewY*DEG_TO_RAD;\r\n\t\t\tthis.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), 0, 0);\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Applies a scale transformation to the matrix.\r\n\t\t * @method scale\r\n\t\t * @param {Number} x\r\n\t\t * @param {Number} y\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tscale : function(x, y) {\r\n\t\t\tthis.m11 *= x;\r\n\t\t\tthis.m22 *= y;\r\n\t\t\tthis.dx *= x;\r\n\t\t\tthis.dy *= y;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Translates the matrix on the x and y axes.\r\n\t\t * @method translate\r\n\t\t * @param {Number} x\r\n\t\t * @param {Number} y\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\ttranslate : function(x, y) {\r\n\t\t\tthis.dx += x;\r\n\t\t\tthis.dy += y;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Sets the properties of the matrix to those of an identity matrix (one that applies a null transformation).\r\n\t\t * @method identity\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tidentity : function() {\r\n\t\t\tthis.alpha = this.m11 = this.m22 = 1;\r\n\t\t\tthis.m12 = this.m21 = this.dx = this.dy = 0;\r\n\t\t\tthis.shadow = this.compositeOperation = null;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Inverts the matrix, causing it to perform the opposite transformation.\r\n\t\t * @method invert\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tinvert : function() {\r\n\t\t\tvar a1 = this.m11;\r\n\t\t\tvar b1 = this.m12;\r\n\t\t\tvar c1 = this.m21;\r\n\t\t\tvar d1 = this.m22;\r\n\t\t\tvar tx1 = this.dx;\r\n\t\t\tvar n = a1*d1-b1*c1;\r\n\r\n\t\t\tthis.m11 = d1/n;\r\n\t\t\tthis.m12 = -b1/n;\r\n\t\t\tthis.m21 = -c1/n;\r\n\t\t\tthis.m22 = a1/n;\r\n\t\t\tthis.dx = (c1*this.dy-d1*tx1)/n;\r\n\t\t\tthis.dy = -(a1*this.dy-b1*tx1)/n;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns true if the matrix is an identity matrix.\r\n\t\t * @method isIdentity\r\n\t\t * @return {Boolean}\r\n\t\t **/\r\n\t\tisIdentity : function() {\r\n\t\t\treturn this.dx == 0 && this.dy == 0 && this.m11 == 1 && this.m12 == 0 && this.m21 == 0 && this.m22 == 1;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Decomposes the matrix into transform properties (x, y, scaleX, scaleY, and rotation). Note that this these values\r\n\t\t * may not match the transform properties you used to generate the matrix, though they will produce the same visual\r\n\t\t * results.\r\n\t\t * @method decompose\r\n\t\t * @param {Object} target The object to apply the transform properties to. If null, then a new object will be returned.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\tdecompose : function(target) {\r\n\t\t\t// TODO: it would be nice to be able to solve for whether the matrix can be decomposed into only scale/rotation\r\n\t\t\t// even when scale is negative\r\n\t\t\tif (target == null) { target = {}; }\r\n\t\t\ttarget.x = this.dx;\r\n\t\t\ttarget.y = this.dy;\r\n\t\t\ttarget.scaleX = Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12);\r\n\t\t\ttarget.scaleY = Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22);\r\n\r\n\t\t\tvar skewX = Math.atan2(-this.m21, this.m22);\r\n\t\t\tvar skewY = Math.atan2(this.m12, this.m11);\r\n\r\n\t\t\tif (skewX == skewY) {\r\n\t\t\t\ttarget.rotation = skewY/DEG_TO_RAD;\r\n\t\t\t\tif (this.m11 < 0 && this.m22 >= 0) {\r\n\t\t\t\t\ttarget.rotation += (target.rotation <= 0) ? 180 : -180;\r\n\t\t\t\t}\r\n\t\t\t\ttarget.skewX = target.skewY = 0;\r\n\t\t\t} else {\r\n\t\t\t\ttarget.skewX = skewX/DEG_TO_RAD;\r\n\t\t\t\ttarget.skewY = skewY/DEG_TO_RAD;\r\n\t\t\t}\r\n\t\t\treturn target;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Reinitializes all matrix properties to those specified.\r\n\t\t * @method appendProperties\r\n\t\t * @param {Number} m11\r\n\t\t * @param {Number} m12\r\n\t\t * @param {Number} m21\r\n\t\t * @param {Number} m22\r\n\t\t * @param {Number} dx\r\n\t\t * @param {Number} dy\r\n\t\t * @param {Number} alpha desired alpha value\r\n\t\t * @param {Shadow} shadow desired shadow value\r\n\t\t * @param {String} compositeOperation desired composite operation value\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\treinitialize : function(m11,m12,m21,m22,dx,dy,alpha,shadow,compositeOperation) {\r\n\t\t\tthis._initialize(m11,m12,m21,m22,dx,dy);\r\n\t\t\tthis.alpha = alpha || 1;\r\n\t\t\tthis.shadow = shadow;\r\n\t\t\tthis.compositeOperation = compositeOperation;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Appends the specified visual properties to the current matrix.\r\n\t\t * @method appendProperties\r\n\t\t * @param {Number} alpha desired alpha value\r\n\t\t * @param {Shadow} shadow desired shadow value\r\n\t\t * @param {String} compositeOperation desired composite operation value\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\tappendProperties : function(alpha, shadow, compositeOperation) {\r\n\t\t\tthis.alpha *= alpha;\r\n\t\t\tthis.shadow = shadow || this.shadow;\r\n\t\t\tthis.compositeOperation = compositeOperation || this.compositeOperation;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Prepends the specified visual properties to the current matrix.\r\n\t\t * @method prependProperties\r\n\t\t * @param {Number} alpha desired alpha value\r\n\t\t * @param {Shadow} shadow desired shadow value\r\n\t\t * @param {String} compositeOperation desired composite operation value\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\tprependProperties : function(alpha, shadow, compositeOperation) {\r\n\t\t\tthis.alpha *= alpha;\r\n\t\t\tthis.shadow = this.shadow || shadow;\r\n\t\t\tthis.compositeOperation = this.compositeOperation || compositeOperation;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t *Multiply Matrix by another Matrix.\r\n\t\t */\r\n\t\tmultiply: function(matrix){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcombines matrices by multiplying them sequentially in the given order\r\n\t\t\t// matrix: Matrix\r\n\t\t\t//\t\ta 2D matrix-like object,\r\n\t\t\t//\t\tall subsequent arguments are matrix-like objects too\r\n\r\n\t\t\t// combine matrices\r\n\t\t\tvar m11 = this.m11,m12 = this.m12,m21 = this.m21,m22=this.m22,dx=this.dx,dy=this.dy;\r\n\t\t\tvar r = matrix;\r\n\t\t\tthis.m11 = m11 * r.m11 + m21 * r.m12;\r\n\t\t\tthis.m12 = m12 * r.m11 + m22 * r.m12;\r\n\t\t\tthis.m21 = m11 * r.m21 + m21 * r.m22;\r\n\t\t\tthis.m22 = m12 * r.m21 + m22 * r.m22;\r\n\t\t\tthis.dx =  m11 * r.dx + m21 * r.dy + dx;\r\n\t\t\tthis.dy =  m12 * r.dx + m22 * r.dy + dy;\r\n\t\t\treturn this // Matrix\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns a clone of the Matrix instance.\r\n\t\t * @method clone\r\n\t\t * @return {Matrix} a clone of the Matrix instance.\r\n\t\t **/\r\n\t\tclone : function() {\r\n\r\n\t\t\tvar _ = this._,\r\n\t\t\t\tmtx = new Matrix(_.m11, _.m12, _.m21, _.m22, _.dx, _.dy);\r\n\t\t\tmtx.shadow = this.shadow;\r\n\t\t\tmtx.alpha = this.alpha;\r\n\t\t\tmtx.compositeOperation = this.compositeOperation;\r\n\t\t\treturn mtx;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns a string representation of this object.\r\n\t\t * @method toString\r\n\t\t * @return {String} a string representation of the instance.\r\n\t\t **/\r\n\t\ttoString : function() {\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn \"[Matrix (m11=\"+_.m11+\" m12=\"+_.m12+\" m21=\"+_.m21+\" m22=\"+_.m22+\" dx=\"+_.dx+\" dy=\"+_.dy+\")]\";\r\n\t\t},\r\n\t\t\r\n\t\t\"init\" : function(m11, m12, m21, m22, dx, dy) {\r\n\t\t\tvar _ = this._;\r\n\t\t\t_.m11 = m11 || 1;\r\n\t\t\t_.m12 = m12 || 0;\r\n\t\t\t_.m21 = m21 || 0;\r\n\t\t\t_.m22 = m22 || 1;\r\n\t\t\t_.dx = dx || 0;\r\n\t\t\t_.dy = dy || 0;\r\n\t\t}\r\n\r\n\t});\r\n\t\r\n\tlangx.mixin(Matrix,{\r\n\t\ttranslate: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a translation matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to translate (move) points by specified offsets.\r\n\t\t\t// a: Number\r\n\t\t\t//\t\tan x coordinate value\r\n\t\t\t// b: Number\r\n\t\t\t//\t\ta y coordinate value\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |  1|   0| a|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |  0|   1| b|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\r\n\t\t\treturn new Matrix(1,0,0,1,a,b); // Matrix\r\n\t\t},\r\n\t\tscale: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a scaling matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to scale (magnify) points by specified offsets.\r\n\t\t\t// a: Number\r\n\t\t\t//\t\ta scaling factor used for the x coordinate\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta scaling factor used for the y coordinate\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |  a|   0| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |  0|   b| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\treturn new Matrix(a,0,0,b?b:a,0,0); // Matrix\r\n\t\t},\r\n\t\trotate: function(angle){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\tan angle of rotation in radians (>0 for CW)\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |cos|-sin| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |sin| cos| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\tvar cos = Math.cos(angle);\r\n\t\t\tvar sin = Math.sin(angle);\r\n\t\t\treturn new Matrix(cos,sin,-sin,cos,0,0); // Matrix\r\n\t\t},\r\n\t\trotateg: function(degree){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSeerotate() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\tan angle of rotation in degrees (>0 for CW)\r\n\t\t\t// returns: Matrix\r\n\t\t\treturn this.rotate(degToRad(degree)); // Matrix\r\n\t\t},\r\n\t\tskewX: function(angle) {\r\n\t\t\t//TODO : will be modified\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms an x skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the x dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |  1| tan| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |  0|   1| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\tvar tan = Math.tan(angle);\r\n\t\t\treturn new Matrix(1,0,tan,1); // Matrix\r\n\t\t},\r\n\t\tskewXg: function(degree){\r\n\t\t\t//TODO : will be modified\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms an x skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the x dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSee dojox/gfx/matrix.skewX() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// returns: Matrix\r\n\t\t\treturn this.skewX(degToRad(degree)); // dojox/gfx/matrix.Matrix\r\n\t\t},\r\n\t\tskewY: function(angle){\r\n\t\t\t//TODO : will be modified\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a y skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the y dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |  1|   0| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |tan|   1| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\tvar tan = Math.tan(angle);\r\n\r\n\t\t\treturn new Matrix(1,tan,0,1); // Matrix\r\n\t\t},\r\n\t\tskewYg: function(degree){\r\n\t\t\t//TODO : will be modified\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a y skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the y dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSee skewY() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// returns: Matrix\r\n\t\t\treturn this.skewY(degToRad(degree)); // Matrix\r\n\t\t},\r\n\t\treflect: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a reflection matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to reflect points around a vector,\r\n\t\t\t//\t\twhich goes through the origin.\r\n\t\t\t// a: dojox/gfx.Point|Number\r\n\t\t\t//\t\ta point-like object, which specifies a vector of reflection, or an X value\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta Y value\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length == 1){\r\n\t\t\t\tb = a.y;\r\n\t\t\t\ta = a.x;\r\n\t\t\t}\r\n\t\t\t// make a unit vector\r\n\t\t\tvar a2 = a * a, b2 = b * b, n2 = a2 + b2, \r\n\t\t\t\txx=2 * a2 / n2 - 1, \r\n\t\t\t\txy = 2 * a * b / n2,\r\n\t\t\t\tyx = xy,\r\n\t\t\t\tyy = 2 * b2 / n2 - 1;\r\n\t\t\treturn new Matrix(xx,yx,xy, yy); // Matrix\r\n\t\t},\r\n\t\tproject: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms an orthogonal projection matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to project points orthogonally on a vector,\r\n\t\t\t//\t\twhich goes through the origin.\r\n\t\t\t// a:   Number\r\n\t\t\t//\t\tan x coordinate value\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y coordinate value\r\n\t\t\t// returns: Matrix\r\n\r\n\t\t\t// make a unit vector\r\n\t\t\tvar a2 = a * a, b2 = b * b, n2 = a2 + b2, \r\n\t\t\t\txx = a2 / n2,\r\n\t\t\t\txy = a * b / n2\r\n\t\t\t\tyx = xy,\r\n\t\t\t\tyy = b2 / n2;\r\n\t\t\treturn new Matrix(xx,yx,xy,yy); // Matrix\r\n\t\t},\r\n\r\n\t\t// common operations\r\n\r\n\t\t// high level operations\r\n\r\n\t\t_sandwich: function(matrix, x, y){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies a matrix at a central point\r\n\t\t\t// matrix: Matrix\r\n\t\t\t//\t\ta 2D matrix-like object, which is applied at a central point\r\n\t\t\t// x: Number\r\n\t\t\t//\t\tan x component of the central point\r\n\t\t\t// y: Number\r\n\t\t\t//\t\ta y component of the central point\r\n\t\t\treturn this.translate(x, y).multiply(matrix)\r\n\t\t\t                           .multiply(this.translate(-x, -y)); // Matrix\r\n\t\t},\r\n\t\tscaleAt: function(a, b, c, d){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tscales a picture using a specified point as a center of scaling\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with scale().\r\n\t\t\t// a: Number\r\n\t\t\t//\t\ta scaling factor used for the x coordinate, or a uniform scaling factor used for both coordinates\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta scaling factor used for the y coordinate\r\n\t\t\t// c: Number|Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// d: Number\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tswitch(arguments.length){\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\t// a and b are scale factor components, c and d are components of a point\r\n\t\t\t\t\treturn this._sandwich(this.scale(a, b), c, d); // Matrix\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tif(typeof c == \"number\"){\r\n\t\t\t\t\t\treturn this._sandwich(this.scale(a), b, c); // Matrix\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn this._sandwich(this.scale(a, b), c.x, c.y); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.scale(a), b.x, b.y); // Matrix\r\n\t\t},\r\n\t\trotateAt: function(angle, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\trotates a picture using a specified point as a center of rotation\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with rotate().\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\tan angle of rotation in radians (>0 for CW)\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.rotate(angle), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.rotate(angle), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\trotategAt: function(degree, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\trotates a picture using a specified point as a center of rotation\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with rotateg().\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\tan angle of rotation in degrees (>0 for CW)\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.rotateg(degree), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.rotateg(degree), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\tskewXAt: function(angle, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the x axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with skewX().\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.skewX(angle), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.skewX(angle), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\tskewXgAt: function(degree, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the x axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with skewXg().\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.skewXg(degree), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.skewXg(degree), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\tskewYAt: function(angle, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the y axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with skewY().\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.skewY(angle), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.skewY(angle), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\tskewYgAt: function(/* Number */ degree, /* Number||Point */ a, /* Number? */ b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the y axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with skewYg().\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.skewYg(degree), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.skewYg(degree), a.x, a.y); // Matrix\r\n\t\t}\r\n\t\r\n\t\r\n\t});\r\n\r\n\treturn Matrix;\r\n});\r\n\ndefine('skylark-utils-math/transform/Transform',[\r\n    \"skylark-langx/langx\",\r\n    \"../math\",\r\n\t\"./Matrix\"\r\n], function(langx,math, Matrix) {\r\n\r\n    var Transform = math.Transform = langx.klass({\r\n        \"klassName\": \"Transform\",\r\n\t\t\"value\": {\r\n\t\t\tget : function(){\r\n\t\t\t\treturn this._.value;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn Transform;\r\n});\r\n\ndefine('skylark-utils-math/transform/MatrixTransform',[\r\n    \"skylark-langx/langx\",\r\n    \"../math\",\r\n\t\"./Transform\",\r\n\t\"../Point\",\r\n\t\"../Rect\"\r\n],function(langx,math,Transform,Point,Rect) {\r\n\r\n    var MatrixTransform = math.MatrixTransform = Transform.inherit({\r\n        \"klassName\": \"MatrixTransform\",\r\n\r\n\t\t\"value\"\t:\t{\r\n\t\t\tget : function(){\r\n\t\t\t\treturn this.matrix.clone();\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t\"matrix\" : {\r\n\t\t\tget : function(){\r\n\t\t\t\treturn this._.matrix;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tclone : /*ScaleTransform*/function() {\r\n\t\t},\r\n\t\t\r\n\t\ttransform : /*Point*/function(/*Point*/point) {\r\n\t\t},\r\n\t\t\r\n\t\t//�w�肳�ꂽ���E�{�b�N�X���ϊ����A���������傤�Ǌi�[�ł����傫���̎����s���E�{�b�N�X���Ԃ��܂��B\r\n\t\ttransformBounds : /*Rect*/function(/*Rect*/rect) {\r\n\t\t},\t\t\r\n\t\t\"initialize\" : function(/*Martix*/matrix) {\r\n            var _ = this._;\r\n\t\t\t\r\n\t\t\t_.matrix = matrix;\r\n\t\t}\r\n\t\t\t\t\r\n\t});\r\n\r\n\treturn MatrixTransform;\r\n\t\r\n});\t\r\n\ndefine('skylark-utils-math/transform/RotateTransform',[\r\n    \"skylark-langx/langx\",\r\n    \"../math\",\r\n\t\"./Transform\",\r\n\t\"./Matrix\",\r\n\t\"../Point\",\r\n\t\"../Rect\"\r\n],function(langx,math,Transform,Matrix,Point,Rect) {\r\n\r\n\r\n    var RotateTransform = math.RotateTransform = Transform.inherit({\r\n        \"klassName\": \"RotateTransform\",\r\n\r\n        \"value\": {\r\n            get: function() {\r\n                return Matrix.rotateAt(this.angle, this.centerX, this.centerY);\r\n            }\r\n        },\r\n\r\n        \"angle\": {\r\n            get : function() {\r\n                return this._.angle;\r\n            }\r\n        },\r\n        // cy: Number\r\n        //\t\tThe Y coordinate of the center of the circle, default value 0.\r\n        \"centerX\": {\r\n            get : function() {\r\n                return this._.centerX;\r\n            }\r\n        },\r\n        // r: Number\r\n        //\t\tThe radius, default value 100.\r\n        \"centerY\": {\r\n            get : function() {\r\n                return this._.centerY;\r\n            }\r\n        },\r\n\r\n\t\tclone : /*ScaleTransform*/function() {\r\n\t\t},\r\n\t\t\r\n\t\ttransform : /*Point*/function(/*Point*/point) {\r\n\t\t},\r\n\t\t\r\n\t\ttransformBounds : /*Rect*/function(/*Rect*/rect) {\r\n\t\t},\r\n\t\t\r\n\t\t\"init\" : function(/*Number*/angle,/*Number*/centerX,/*Number*/centerY) {\r\n\t\t\tvar _ = this._ = {};\r\n\t\t\t_.angle = angle ? angle :0;\r\n\t\t\t_.centerX = centerX ? centerX :0;\r\n\t\t\t_.centerY = centerY ? centerY :0;\r\n\t\t}\r\n\t});\r\n\r\n\treturn RotateTransform;\r\n\t\r\n});\t\r\n\ndefine('skylark-utils-math/transform/ScaleTransform',[\r\n    \"skylark-langx/langx\",\r\n    \"../math\",\r\n    \"./Transform\",\r\n    \"./Matrix\",\r\n    \"../Point\",\r\n    \"../Rect\"\r\n], function(langx,math, Transform, Matrix, Point, Rect) {\r\n\r\n   var ScaleTransform = math.ScaleTransform = Transform.inherit({\r\n        \"klassName\": \"ScaleTransform\",\r\n\r\n        \"value\": {\r\n            get: function() {\r\n                    return Matrix.scaleAt(this.scaleX, this.scaleY, this.centerX, this.centerY);\r\n            }\r\n        },\r\n\r\n        \"scaleX\": {\r\n            get : function() {\r\n                return this._.scaleX;\r\n            }\r\n        },\r\n\r\n        \"scaleY\": {\r\n            get : function() {\r\n                return this._.scaleY;\r\n            }\r\n        },\r\n\r\n        // cy: Number\r\n        //      The Y coordinate of the center of the circle, default value 0.\r\n        \"centerX\": {\r\n            get : function() {\r\n                return this._.centerX;\r\n            }\r\n        },\r\n        // r: Number\r\n        //      The radius, default value 100.\r\n        \"centerY\": {\r\n            get : function() {\r\n                return this._.centerY;\r\n            }\r\n        },\r\n\r\n        clone: /*ScaleTransform*/ function() {},\r\n\r\n        transform: /*Point*/ function( /*Point*/ point) {},\r\n\r\n        transformBounds: /*Rect*/ function( /*Rect*/ rect) {},\r\n\r\n        \"init\": function( /*Number*/ scaleX, /*Number*/ scaleY, /*Number*/ centerX, /*Number*/ centerY) {\r\n            var _ = this._;\r\n\r\n            _.scaleX = scaleX ? scaleX : 1;\r\n            _.scaleY = scaleY ? scaleY : 1;\r\n            _.centerX = centerX ? centerX : 0;\r\n            _.centerY = centerY ? centerY : 0;\r\n        }\r\n    });\r\n\r\n    return ScaleTransform;\r\n\r\n});\r\n\ndefine('skylark-utils-math/transform/SkewTransform',[\r\n    \"skylark-langx/langx\",\r\n    \"../math\",\r\n    \"./Transform\",\r\n    \"./Matrix\",\r\n    \"../Point\",\r\n    \"../Rect\"\r\n], function(Class, Transform, Matrix, Point, Rect) {\r\n\r\n   var SkewTransform = math.SkewTransform = Transform.inherit({\r\n        \"klassName\": \"SkewTransform\",\r\n\r\n        \"value\": {\r\n            get: function() {\r\n                    return Matrix.scaleAt(this.skewX, this.skewY);\r\n            }\r\n        },\r\n\r\n        \"skewX\": {\r\n            get : function() {\r\n                return this._.skewX;\r\n            }\r\n        },\r\n\r\n        \"skewY\": {\r\n            get : function() {\r\n                return this._.skewY;\r\n            }\r\n        },\r\n\r\n        clone: /*SkewTransform*/ function() {},\r\n\r\n        transform: /*Point*/ function( /*Point*/ point) {},\r\n\r\n        transformBounds: /*Rect*/ function( /*Rect*/ rect) {},\r\n\r\n        \"init\": function( /*Number*/ skewX, /*Number*/ skewY) {\r\n            var _ = this._;\r\n\r\n            _.skewX = skewX ? skewX : 0;\r\n            _.skewY = skewY ? skewY : 0;\r\n        }\r\n    });\r\n\r\n    return SkewTransform;\r\n\r\n});\r\n\ndefine('skylark-utils-math/transform/TranslateTransform',[\r\n    \"skylark-langx/langx\",\r\n    \"../math\",\r\n    \"./Transform\",\r\n    \"./Matrix\",\r\n    \"../Point\",\r\n    \"../Rect\"\r\n],function(langx,math,Transform,Matrix,Point,Rect) {\r\n\r\n    //|1   0   dx|\r\n    //|0   1   dy|\r\n    //|0   0    1|\r\n\r\n   var TranslateTransform = math.TranslateTransform = Transform.inherit({\r\n        \"klassName\": \"TranslateTransform\",\r\n\r\n        \"value\": {\r\n            get: function() {\r\n                    return Matrix.scaleAt(this.x, this.y);\r\n            }\r\n        },\r\n\r\n        \"x\": {\r\n            get : function() {\r\n                return this._.x;\r\n            }\r\n        },\r\n\r\n        \"y\": {\r\n            get : function() {\r\n                return this._.y;\r\n            }\r\n        },\r\n\r\n        clone: /*SkewTransform*/ function() {},\r\n\r\n        transform: /*Point*/ function( /*Point*/ point) {},\r\n\r\n        transformBounds: /*Rect*/ function( /*Rect*/ rect) {},\r\n\r\n        \"init\": function( /*Number*/ x, /*Number*/ y) {\r\n            var _ = this._;\r\n\r\n            _.x = x ? x : 0;\r\n            _.y = y ? y : 0;\r\n        }\r\n    });\r\n\r\n    return TranslateTransform;\r\n\r\n\tvar TranslateTransform = Class.declare(Transform,{\r\n\t\t\"-parent-\"\t:\tTransform,\r\n\t\t\r\n\t\t\"-module-\"\t:\t\"qface/geom/transform/TranslateTransform\",\r\n\r\n\t\t\"-protected-\" : {\r\n\t\t\t\"-methods-\"\t:\t{\r\n\t\t\t\t_valueGetter : function(){\r\n\t\t\t\t\treturn Matrix.translate(this.x,this.y);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"-public-\" : {\r\n\t\t\t\"-attributes-\" : {\r\n\t\t\t\t//x ���ɉ����ĕ��s�ړ����鋗�����擾�܂��͐ݒ肵�܂��B\r\n\t\t\t\t\"x\" : {\r\n\t\t\t\t\ttype : Number,\r\n\t\t\t\t\treadOnly : true\r\n\t\t\t\t},\r\n\t\t\t\t//y ���ɉ����ăI�u�W�F�N�g���ϊ� (�ړ�) ���鋗�����擾�܂��͐ݒ肵�܂��B\r\n\t\t\t\t\"y\" : {\r\n\t\t\t\t\ttype : Number,\r\n\t\t\t\t\treadOnly : true\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"-methods-\"\t:\t{\r\n\t\t\t\t//���� ScaleTransform �̒l�̏ڍ׃R�s�[���쐬���ĕԂ��܂��B\r\n\t\t\t\tclone : /*ScaleTransform*/function() {\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\t//�w�肵���_���ϊ����A���ʂ��Ԃ��܂��B\r\n\t\t\t\ttransform : /*Point*/function(/*Point*/point) {\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\t//�w�肳�ꂽ���E�{�b�N�X���ϊ����A���������傤�Ǌi�[�ł����傫���̎����s���E�{�b�N�X���Ԃ��܂��B\r\n\t\t\t\ttransformBounds : /*Rect*/function(/*Rect*/rect) {\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"-constructor-\"\t:\t{\t\t\r\n\t\t\t\"initialize\" : function(x,y) {\r\n\t\t\t\tthis._x = x ? x :0;\r\n\t\t\t\tthis._y = y ? y :0;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn TranslateTransform;\r\n\t\r\n});\t\r\n\ndefine('skylark-utils-math/main',[\r\n    \"./math\",\r\n    \"./Arrow\",\r\n    \"./Circle\",\r\n    \"./Ellipse\",\r\n    \"./Geometry\",\r\n    \"./Line\",\r\n    \"./Point\",\r\n    \"./Polyline\",\r\n    \"./PolyStar\",\r\n    \"./Rect\",\r\n    \"./Size\",\r\n    \"./transform/Matrix\",\r\n    \"./transform/MatrixTransform\",\r\n    \"./transform/RotateTransform\",\r\n    \"./transform/ScaleTransform\",\r\n    \"./transform/SkewTransform\",\r\n    \"./transform/Transform\",\r\n    \"./transform/TranslateTransform\"\r\n], function(math) {\r\n\r\n\treturn math;\r\n});\ndefine('skylark-utils-math', ['skylark-utils-math/main'], function (main) { return main; });\n\n"]}