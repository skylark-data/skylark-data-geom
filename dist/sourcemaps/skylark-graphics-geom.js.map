{"version":3,"sources":["skylark-graphics-geom.js"],"names":["define","skylark","langx","attach","log2","x","n","i","geom","Geometry","klass","klassName","Point","inherit","get","this","_","y","clone","move","dx","dy","notEqual","p","equal","init","fromString","s","a","split","parseFloat","fromPlain","o","fromArray","Zero","Direction","left","top","right","bottom","Arrow","bounds","box","width","height","direction","leftTop","leftBottom","rightTop","rightBottom","containPoint","undefined","Circle","cx","r","cy","diff","Ellipse","rx","ry","Line","Math","min","x1","x2","y1","y2","abs","startPoint","endPointer","Polyline","points","l","length","t","bbox","b","PolyStar","radius","sides","pointSize","angle","Size","toArray","toPlain","toString","w","h","Rect","size","isEmpty","isIntersect","width2","height2","width1","height1","intersect","unite","max","DEG_TO_RAD","PI","_degToRadCache","degToRad","degree","Matrix","TransformMatrix","_multiplyPoint","m11","m21","m12","m22","alpha","shadow","compositeOperation","multiplyPoint","multiplyRectangle","rect","isIdentity","p0","p1","p2","p3","minx","miny","maxx","maxy","prepend","tx1","a1","c1","append","b1","d1","prependMatrix","matrix","prependProperties","appendMatrix","appendProperties","prependTransform","scaleX","scaleY","rotation","skewX","skewY","regX","regY","cos","sin","appendTransform","rotate","skew","scale","translate","identity","invert","decompose","target","sqrt","atan2","reinitialize","_initialize","multiply","mtx","mixin","rotateg","tan","skewXg","skewYg","reflect","arguments","a2","b2","n2","xx","xy","yx","yy","project","_sandwich","scaleAt","c","d","rotateAt","rotategAt","skewXAt","skewXgAt","skewYAt","skewYgAt","Transform","value","MatrixTransform","transform","point","transformBounds","initialize","RotateTransform","centerX","centerY","ScaleTransform","Class","SkewTransform","TranslateTransform","main"],"mappings":"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","file":"../skylark-graphics-geom.js","sourcesContent":["define('skylark-graphics-geom/geom',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\"\r\n], function(skylark, langx) {\r\n\t\r\n\tvar geom =  {\r\n\r\n\t  log2 : function (x) {\r\n\t    var n = 1, i = 0;\r\n\t    while (x > n) {\r\n\t      n <<= 1;\r\n\t      i++;\r\n\t    }\r\n\t    return i;\r\n\t  }\r\n\r\n\t};\r\n\r\n\r\n\treturn skylark.attach(\"data.geom\",geom);\r\n});\ndefine('skylark-graphics-geom/Geometry',[\r\n    \"skylark-langx/langx\",\r\n    \"./geom\"\r\n],function(langx, geom) {\r\n\tvar Geometry  = geom.Geometry = langx.klass({\r\n\t\t\"klassName\"\t:\t\"Geometry\",\r\n\t});\r\n\r\n\r\n\treturn Geometry;\r\n\r\n});\r\n\ndefine('skylark-graphics-geom/Point',[\r\n    \"skylark-langx/langx\",\r\n    \"./geom\",\r\n    \"./Geometry\",\r\n],function(langx, geom, Geometry) {\r\n\r\n    var Point = geom.Point = Geometry.inherit({\r\n        \"klassName\": \"Point\",\r\n        \"x\": {\r\n            get : function() {\r\n                return this._.x;\r\n            }\r\n        },\r\n        // y: Number\r\n        //\t\tThe Y coordinate of the default rectangle's position, value 0.\r\n        \"y\": {\r\n            get : function() {\r\n                return this._.y;\r\n            }\r\n        },\r\n\t\t\"clone\"\t: function(){\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn new Point(_.x,_.y);\r\n\t\t\r\n\t\t},\r\n\t\t\"move\"\t: function(/*Number*/dx,/*Number*/dy) {\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn new Point(_.x + dx,_.y + dy);\r\n\t\t},\r\n\t\t\"notEqual\"\t:\tfunction(/*Point*/p) {\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn !p || p.x != _.x || p.y != _.y;\r\n\t\t},\r\n\t\t\r\n\t\t\"equal\"\t:\tfunction(/*Point*/p){\r\n\t\t\treturn  !this.notEqual(p);\r\n\t\t},\r\n\t\t\r\n        \"init\" : function(x, y) {\r\n            var _ = this._ = {};\r\n            _.x = x || 0;\r\n            _.y = y || 0;\r\n        }\r\n\t});\r\n\t\r\n\tPoint.fromString = function(s) {\r\n\t\tvar a = s.split(\",\");\r\n\t\treturn new Point(parseFloat(a[0]),parseFloat(a[1]));\r\n\t};\r\n\r\n\tPoint.fromPlain = function(o) {\r\n\t\treturn new Point(o.x,o.y);\r\n\t};\r\n\r\n\tPoint.fromArray = function(a) {\r\n\t\treturn new Point(a[0],a[1]);\r\n\t};\r\n\t\r\n\tPoint.Zero = new Point(0,0);\r\n\r\n\treturn Point;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-geom/Arrow',[\r\n    \"skylark-langx/langx\",\r\n    \"./geom\",\r\n    \"./Geometry\",\r\n    \"./Point\"\r\n], function(langx, geom, Geometry, Point) {\r\n    var Direction = {\r\n        \"left\" : 1,\r\n        \"top\" : 2,\r\n        \"right\" : 3, \r\n        \"bottom\" : 4\r\n    };\r\n\r\n    var Arrow = geom.Arrow = Geometry.inherit({\r\n        \"klassName\": \"Arrow\",\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //\t\treturns the bounding box\r\n                var \r\n                    _ = this._,\r\n                    box = {\r\n                    x: _.x,\r\n                    y: this.y,\r\n                    width: _.width,\r\n                    height: _.height\r\n                };\r\n                return box;\r\n            }\r\n        },\r\n       \"x\": {\r\n            get : function() {\r\n                return this._.x;\r\n            }\r\n        },\r\n        // y: Number\r\n        //\t\tThe Y coordinate of the default rectangle's position, value 0.\r\n        \"y\": {\r\n            get : function() {\r\n                return this._.y;\r\n            }\r\n        },\r\n        // width: Number\r\n        //\t\tThe width of the default rectangle, value 100.\r\n        \"width\": {\r\n            get : function() {\r\n                return this._.width;\r\n            }\r\n        },\r\n        // height: Number\r\n        //\t\tThe height of the default rectangle, value 100.\r\n        \"height\": {\r\n            get : function() {\r\n                return this._.height;\r\n            }\r\n        },\r\n        // r: Number\r\n        //\t\tThe corner radius for the default rectangle, value 0.\r\n        \"direction\": {\r\n            get : function() {\r\n                return this._.direction;\r\n            }\r\n        },\r\n        \"leftTop\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x, _.y);\r\n            }\r\n        },\r\n        \"leftBottom\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x, _.y + _.height);\r\n            }\r\n        },\r\n        \"rightTop\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x + _.width, _.y);\r\n            }\r\n        },\r\n        \"rightBottom\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x + _.width, _.y + _.height);\r\n            }\r\n        },\r\n        \"move\": function(dx, dy) {\r\n            var _ = this._;\r\n            return new Arrow(_.x + dx,_.y + dy,_.width,_.height,_.direction);\r\n        },\r\n        \"containPoint\": function(x,y) {\r\n            // support function(p)\r\n            if (y === undefined) {\r\n                var p = x;\r\n                x = p.x;\r\n                y = p.y;\r\n            }\r\n            var _ = this._;\r\n\r\n            return (x >= _.x) && (x < _.x + _.width) && (y >= _.y) && (y < _.y + _.height);\r\n        },\r\n        \"init\" : function(x, y, width, height, direction) {\r\n            var _ = this._ = {};\r\n            _.x = x || 0;\r\n            _.y = y || 0;\r\n            _.width = width || 0;\r\n            _.height = height || 0;\r\n            _.direction = direction || Direction.top;\r\n        }\r\n    });\r\n\r\n    Arrow.Direction = Direction;\r\n\r\n    return Arrow;\r\n});\r\n\ndefine('skylark-graphics-geom/Circle',[\r\n    \"skylark-langx/langx\",\r\n    \"./geom\",\r\n    \"./Geometry\"\r\n], function(langx, geom, Geometry) {\r\n\r\n    var Circle = geom.Circle = Geometry.inherit({\r\n        \"klassName\": \"Circle\",\r\n\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //      returns the bounding box\r\n                var _ = this._,\r\n                    box = {\r\n                        x: _.cx - _.r,\r\n                        y: _.cy - _.r,\r\n                        width: 2 * _.r,\r\n                        height: 2 * _.r\r\n                    };\r\n                return box;\r\n            }\r\n        },\r\n\r\n        // cx: Number\r\n        //\t\tThe X coordinate of the center of the circle, default value 0.\r\n        \"cx\": {\r\n            get : function() {\r\n                return this._.cx;\r\n            }\r\n        },\r\n        // cy: Number\r\n        //\t\tThe Y coordinate of the center of the circle, default value 0.\r\n        \"cy\": {\r\n            get : function() {\r\n                return this._.cy;\r\n            }\r\n        },\r\n        // r: Number\r\n        //\t\tThe radius, default value 100.\r\n        \"r\": {\r\n            get : function() {\r\n                return this._.r;\r\n            }\r\n        },\r\n        move: function(dx, dy) {\r\n            var _ = this._;            \r\n            return new Circle(_.cx + dx,_.cy + dy,_.r);\r\n        },\r\n        containPoint: function(x,y) {\r\n            // support function(p)\r\n            if (y === undefined) {\r\n                var p = x;\r\n                x = p.x;\r\n                y = p.y;\r\n            }\r\n            var _ = this._;\r\n\r\n            var diff = (x - _.x) * (x - _.x) + (y - _.y) * (y - _.y);\r\n            if (diff < _.r * _.r) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        \"init\" : function(cx, cy, r) {\r\n            var _ = this._ = {};\r\n            _.cx = cx || 0;\r\n            _.cy = cy || 0;\r\n            _.r = r || 0;\r\n        }\r\n\r\n    });\r\n\r\n    return Circle;\r\n});\r\n\ndefine('skylark-graphics-geom/Ellipse',[\r\n    \"skylark-langx/langx\",\r\n    \"./geom\",\r\n    \"./Geometry\",\r\n], function(langx, geom, Geometry) {\r\n\r\n    var Ellipse = geom.Ellipse = Geometry.inherit({\r\n        \"klassName\": \"Ellipse\",\r\n\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //      returns the bounding box\r\n                var _ = this._,\r\n                    box = {\r\n                        x: _.cx - _.rx,\r\n                        y: _.cy - _.ry,\r\n                        width: 2 * _.rx,\r\n                        height: 2 * _.ry\r\n                    };\r\n                return box;\r\n            }\r\n        },\r\n\r\n        // cx: Number\r\n        //\t\tThe X coordinate of the center of the ellipse, default value 0.\r\n        \"cx\": {\r\n            get : function() {\r\n                return this._.cx;\r\n            }\r\n        },\r\n        // cy: Number\r\n        //\t\tThe Y coordinate of the center of the ellipse, default value 0.\r\n        \"cy\": {\r\n            get : function() {\r\n                return this._.cy;\r\n            }\r\n        },\r\n        // rx: Number\r\n        //\t\tThe radius of the ellipse in the X direction, default value 200.\r\n        \"rx\": {\r\n            get : function() {\r\n                return this._.rx;\r\n            }\r\n        },\r\n        // ry: Number\r\n        //\t\tThe radius of the ellipse in the Y direction, default value 200.\r\n        \"ry\": {\r\n            get : function() {\r\n                return this._.ry;\r\n            }\r\n        },\r\n        \"move\": function(dx, dy) {\r\n            var _ = this._;            \r\n            return new Ellipse(_.cx + dx,_.cy + dy,_.rx,_.ry);\r\n        },\r\n\r\n        \"containPoint\": function(p) {\r\n        },\r\n\r\n        \"init\" :  function(cx, cy, rx, ry) {\r\n            var _ = this._ = {};\r\n            _.cx = cx || 0;\r\n            _.cy = cy || 0;\r\n            _.rx = rx || 0;\r\n            _.ry = ry || 0;\r\n        }\r\n    });\r\n\r\n    return Ellipse;\r\n});\r\n\n/**\r\n *\r\n * Copyright (c) 2013 psteam Inc.(http://www.psteam.co.jp)\r\n * http://www.psteam.co.jp/qface/license\r\n * \r\n * @Author: liwenfeng\r\n * @Date: 2013/02/28\r\n */\r\ndefine('skylark-graphics-geom/Line',[\r\n    \"skylark-langx/langx\",\r\n    \"./geom\",\r\n    \"./Geometry\",\r\n    \"./Point\"\r\n], function(langx, geom, Geometry, Point) {\r\n\r\n    var Line = geom.Line = Geometry.inherit({\r\n        \"klassName\": \"Line\",\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //\t\treturns the bounding box\r\n                var \r\n                    _ = this._,\r\n                    box = {\r\n\t\t\t\t\t\tx:\t\tMath.min(_.x1, _.x2),\r\n\t\t\t\t\t\ty:\t\tMath.min(_.y1, _.y2),\r\n\t\t\t\t\t\twidth:\tMath.abs(_.x2 - _.x1),\r\n\t\t\t\t\t\theight:\tMath.abs(_.y2 -_.y1)\r\n\t                };\r\n                return box;\r\n            }\r\n        },\r\n       \"x1\": {\r\n            get : function() {\r\n                return this._.x1;\r\n            }\r\n        },\r\n        // y: Number\r\n        //\t\tThe Y coordinate of the default rectangle's position, value 0.\r\n        \"y1\": {\r\n            get : function() {\r\n                return this._.y1;\r\n            }\r\n        },\r\n        \"x2\": {\r\n            get : function() {\r\n                return this._.x2;\r\n            }\r\n        },\r\n        \"y2\": {\r\n            get : function() {\r\n                return this._.y2;\r\n            }\r\n        },\r\n\r\n\t\t\"startPoint\" :{\r\n\t\t\tget : function(){\r\n\t\t\t\tvar _ = this._;\r\n\t\t\t\treturn new Point(_.x1,_.y1);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"endPointer\" :{\r\n\t\t\tget : function(){\r\n\t\t\t\tvar _ = this._;\r\n\t\t\t\treturn new Point(_.x2,_.y2);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\t\r\n\t\tmove\t: function(dx,dy) {\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn new Line(_.x1+dx,_.y1+dy,_.x2+dx,_.y2+dy);\r\n\t\t},\r\n\r\n\t\tcontainPoint : function(x,y) {\r\n            if (y === undefined) {\r\n                var p = x;\r\n                x = p.x;\r\n                y = p.y;\r\n            }\r\n            var _ = this._;\r\n\t\t\r\n    \t\treturn Math.abs((y-_.y1)*(_.x2-_.x1) - (_.y2-_.y1)*(x-_.x1)) < 1e-6;\r\n\r\n\t\t},\r\n\r\n        \"init\" : function(x1, y1, x2,y2) {\r\n            var _ = this._ = {};\r\n            _.x1 = x1 || 0;\r\n            _.y1 = y1 || 0;\r\n            _.x2 = x2 || 0;\r\n            _.y2 = y2 || 0;\r\n        }\r\n\t});\r\n\t\r\n\t\r\n\treturn Line;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-geom/Polyline',[\r\n    \"skylark-langx/langx\",\r\n    \"./geom\",\r\n    \"./Geometry\"\r\n], function(langx, geom, Geometry) {\r\n\r\n    var Polyline = geom.Polyline = Geometry.inherit({\r\n        \"klassName\": \"Polyline\",\r\n\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //      returns the bounding box\r\n                var _ = this._,\r\n\t\t\t\t\tp = _.points,\r\n\t\t\t\t\tl = p.length,\r\n\t\t\t\t\tt = p[0],\r\n\t\t\t\t\tbbox = {l: t.x, t: t.y, r: t.x, b: t.y};\r\n\t\t\t\tfor(var i = 1; i < l; ++i){\r\n\t\t\t\t\tt = p[i];\r\n\t\t\t\t\tif(bbox.l > t.x) bbox.l = t.x;\r\n\t\t\t\t\tif(bbox.r < t.x) bbox.r = t.x;\r\n\t\t\t\t\tif(bbox.t > t.y) bbox.t = t.y;\r\n\t\t\t\t\tif(bbox.b < t.y) bbox.b = t.y;\r\n\t\t\t\t}\r\n\t\t\t\tvar box = {\r\n\t\t\t\t\tx:\t\tbbox.l,\r\n\t\t\t\t\ty:\t\tbbox.t,\r\n\t\t\t\t\twidth:\tbbox.r - bbox.l,\r\n\t\t\t\t\theight:\tbbox.b - bbox.t\r\n\t\t\t\t};\r\n                return box;\r\n            }\r\n        },\r\n\t\t\"points\" : {\r\n            get : function() {\r\n                return this._.points;\r\n            }\r\n\t\t},\r\n\t\t\r\n\t\t\"init\" : function(/*Array*/points) {\r\n\t\t\t//TODO: will be modified\r\n\t\t\tvar _ = this._ = {};\r\n\t\t\t_.points = points?points:[];\r\n\t\t}\r\n\t});\r\n\t\r\n\t\r\n\treturn Polyline;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-geom/PolyStar',[\r\n    \"skylark-langx/langx\",\r\n    \"./geom\",\r\n    \"./Geometry\",\r\n],function(langx, geom, Geometry) {\r\n\r\n    var PolyStar = geom.PolyStar = Geometry.inherit({\r\n        \"klassName\": \"PolyStar\",\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //\t\treturns the bounding box\r\n\t\t\t\tvar _ = this._,\r\n\t\t\t\t\tp = _.points,\r\n\t\t\t\t\tl = p.length,\r\n\t\t\t\t\tt = p[0];\r\n\t\t\t\t\tbbox = {l: t.x, t: t.y, r: t.x, b: t.y};\r\n\t\t\t\tfor(var i = 1; i < l; ++i){\r\n\t\t\t\t\tt = p[i];\r\n\t\t\t\t\tif(bbox.l > t.x) bbox.l = t.x;\r\n\t\t\t\t\tif(bbox.r < t.x) bbox.r = t.x;\r\n\t\t\t\t\tif(bbox.t > t.y) bbox.t = t.y;\r\n\t\t\t\t\tif(bbox.b < t.y) bbox.b = t.y;\r\n\t\t\t\t}\r\n\t\t\t\tvar box = {\r\n\t\t\t\t\tx:\t\tbbox.l,\r\n\t\t\t\t\ty:\t\tbbox.t,\r\n\t\t\t\t\twidth:\tbbox.r - bbox.l,\r\n\t\t\t\t\theight:\tbbox.b - bbox.t\r\n\t\t\t\t};\r\n\t\t\t\treturn box;\t\r\n            }\r\n        },\r\n       \"x\": {\r\n            get : function() {\r\n                return this._.x;\r\n            }\r\n        },\r\n        // y: Number\r\n        //\t\tThe Y coordinate of the default rectangle's position, value 0.\r\n        \"y\": {\r\n            get : function() {\r\n                return this._.y;\r\n            }\r\n        },\r\n        \"radius\": {\r\n            get : function() {\r\n                return this._.radius;\r\n            }\r\n        },\r\n        \"sides\": {\r\n            get : function() {\r\n                return this._.sides;\r\n            }\r\n        },\r\n        \"pointSize\": {\r\n            get : function() {\r\n                return this._.pointSize;\r\n            }\r\n        },\r\n        \"angle\": {\r\n            get : function() {\r\n                return this._.angle;\r\n            }\r\n         },\r\n\t\t\"init\"\t:function(x, y, radius, sides, pointSize, angle){\r\n\t\t\tvar _ = this._;\r\n\t\t\t_.x = x;\r\n\t\t\t_.y = y;\r\n\t\t\t_.radius = radius;\r\n\t\t\t_.sides = sides;\r\n\t\t\t_.pointSize = pointSize;\r\n\t\t\t_.angle = angle;\r\n\t\t}\r\n\r\n\t});\r\n\t\r\n\t\r\n\treturn PolyStar;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-geom/Size',[\r\n    \"skylark-langx/langx\",\r\n    \"./geom\",\r\n    \"./Geometry\"\r\n],function(langx,geom,Geometry) {\r\n\r\n    var Size = geom.Size = Geometry.inherit({\r\n        \"klassName\": \"Size\",\r\n\t\t// width: Number\r\n\t\t//\t\tThe width of the default rectangle, value 100.\r\n\t\t\"width\" : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.width;\r\n\t\t\t}\r\n\t\t},\r\n\t\t// height: Number\r\n\t\t//\t\tThe height of the default rectangle, value 100.\r\n\t\t\"height\" : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.height;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"clone\"\t: function(){\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn new Size(_.width,_.height);\r\n\t\t},\r\n\r\n        \"toArray\" : function() {\r\n            return [this.width,this.height];\r\n        },\r\n\r\n        \"toPlain\" : function() {\r\n            return {\r\n                \"width\"  : this.width,\r\n                \"height\"  : this.height\r\n            };\r\n        },\r\n        \"toString\": function() {\r\n        \treturn this.width +\",\" + this.height;\r\n        },\r\n\r\n        \"init\" : function(width,height) {\r\n        \tvar _ = this._ = {};\r\n        \t_.width = width || 0;\r\n        \t_.height = height || 0;\r\n        }\r\n\t});\r\n\t\r\n\tSize.fromString = function(s) {\r\n\t\tvar a = s.split(\",\");\r\n\t\treturn new Size(parseFloat(a[0]),parseFloat(a[1]));\r\n\t};\r\n\r\n\tSize.fromPlain = function(o) {\r\n\t\treturn new Size(o.w || o.width,o.h || o.height);\r\n\t};\r\n\r\n\tSize.fromArray = function(a) {\r\n\t\treturn new Size(a[0],a[1]);\r\n\t};\r\n\r\n\tSize.Zero = new Size(0,0);\r\n\t\r\n\treturn Size;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-geom/Rect',[\r\n    \"skylark-langx/langx\",\r\n    \"./geom\",\r\n    \"./Geometry\",\r\n    \"./Point\",\r\n\t\"./Size\"\r\n],function(langx, geom, Geometry,Point,Size) {\r\n\r\n    var Rect = geom.Rect = Geometry.inherit({\r\n        \"klassName\": \"Rect\",\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //\t\treturns the bounding box\r\n                var \r\n                    _ = this._,\r\n                    box = {\r\n                    x: _.x,\r\n                    y: this.y,\r\n                    width: _.width,\r\n                    height: _.height\r\n                };\r\n                return box;\r\n            }\r\n        },\r\n       \"x\": {\r\n            get : function() {\r\n                return this._.x;\r\n            }\r\n        },\r\n        // y: Number\r\n        //\t\tThe Y coordinate of the default rectangle's position, value 0.\r\n        \"y\": {\r\n            get : function() {\r\n                return this._.y;\r\n            }\r\n        },\r\n        // width: Number\r\n        //\t\tThe width of the default rectangle, value 100.\r\n        \"width\": {\r\n            get : function() {\r\n                return this._.width;\r\n            }\r\n        },\r\n        // height: Number\r\n        //\t\tThe height of the default rectangle, value 100.\r\n        \"height\": {\r\n            get : function() {\r\n                return this._.height;\r\n            }\r\n        },\r\n        // r: Number\r\n        //\t\tThe corner radius for the default rectangle, value 0.\r\n        \"radius\": {\r\n            get : function() {\r\n                return this._.radius;\r\n            }\r\n        },\r\n        \"leftTop\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x, _.y);\r\n            }\r\n        },\r\n        \"leftBottom\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x, _.y + _.height);\r\n            }\r\n        },\r\n        \"rightTop\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x + _.width, _.y);\r\n            }\r\n        },\r\n        \"rightBottom\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x + _.width, _.y + _.height);\r\n            }\r\n        },\r\n\r\n        \"size\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Size(_.width, _.height);\r\n            }\r\n        },\r\n\r\n        \"move\": function(dx, dy) {\r\n            var _ = this._;\r\n            return new Rect(_.x + dx,_.y + dy,_.width,_.height,_.radius);\r\n        },\r\n\r\n        \"containPoint\": function(x,y) {\r\n            // support function(p)\r\n            if (y === undefined) {\r\n                var p = x;\r\n                x = p.x;\r\n                y = p.y;\r\n            }\r\n            var _ = this._;\r\n\r\n            return (x >= _.x) && (x < _.x + _.width) && (y >= _.y) && (y < _.y + _.height);\r\n        },\r\n\r\n\t\t\"isEmpty\"\t:\tfunction(){\r\n\t\t\treturn this.width <=0 || this.height<=0;\r\n\t\t},\r\n\t\t\r\n\t\t\"notEqual\"\t:\tfunction(/*Rect*/r) {\r\n\t\t\treturn !r || r.x != this.x || r.y != this.y || r.width != this.width || r.height != this.height || r.radius != this.radius;\r\n\t\t},\r\n\t\t\r\n\t\t\"equal\"\t:\tfunction(/*Rect*/r){\r\n\t\t\treturn  !this.notEqual(r);\r\n\t\t},\r\n\t\t\r\n\t\t\"isIntersect\"\t:function(/*Number*/x2,/*Number*/y2,/*Number*/width2,/*Number*/height2){\r\n\t\t\tvar x1 = this.x1,y1=this.y,width1=this.width,height1=this.height;\r\n\t\t\t \r\n\t\t    return (Math.min(x1 + width1, x2 + width2) - (x1 > x2 ? x1 : x2)) > 0 &&\r\n\t\t           (Math.min(y1 + height1, y2 + height2) - (y1 > y2 ? y1 : y2)) > 0;\r\n\t\t},\r\n\t\t\r\n\t\t\"intersect\"\t:\tfunction(/*Number*/x2,/*Number*/y2,/*Number*/width2,/*Number*/height2){\r\n\t\t\tvar x1 = this.x1,y1=this.y,width1=this.width,height1=this.height;\r\n\t\t\t \r\n\t\t    return (Math.min(x1 + width1, x2 + width2) - (x1 > x2 ? x1 : x2)) > 0 &&\r\n\t\t           (Math.min(y1 + height1, y2 + height2) - (y1 > y2 ? y1 : y2)) > 0;\r\n\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\"unite\"\t: function(/*Number*/x2,/*Number*/y2,/*Number*/width2,/*Number*/height2){\r\n\t\t\tvar x1 = this.x1,y1=this.y,width1=this.width,height1=this.height;\r\n\t\t\t \r\n\t\t\tvar x = x1 < x2 ? x1 : x2,\r\n\t\t\t\ty = y1 < y2 ? y1 : y2,\r\n\t\t\t\twidth  = Math.max(x1 + width1, x2 + width2) - x;\r\n\t\t\t\theight = Math.max(y1 + height1, y2 + height2) - y;\r\n\t\t    \r\n\t\t    return new Rect(x,y,width,height);\r\n\t\t},\r\n\t\t\r\n\t\t\"clone\"\t: function(){\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn new Rect(_.x,_.y,_.width,_.height,_.radius);\r\n\t\t},\r\n\r\n        \"init\" : function(x, y, width, height, radius) {\r\n            var _ = this._ = {};\r\n            _.x = x || 0;\r\n            _.y = y || 0;\r\n            _.width = width || 0;\r\n            _.height = height || 0;\r\n            _.radius = radius || 0;\r\n        }\r\n    });\r\n\r\n\r\n\tRect.fromString = function(s) {\r\n\t\tvar a = s.split(\",\");\r\n\t\treturn new Rect(parseFloat(a[0]),parseFloat(a[1]),parseFloat(a[2]),parseFloat(a[3]));\r\n\t};\r\n\r\n\tRect.fromPlain = function(o) {\r\n\t\treturn new Rect(o.x || o.l,o.y || o.t, o.w || o.width,o.h || o.height);\r\n\t};\r\n\r\n\tRect.fromArray = function(a) {\r\n\t\treturn new Rect(a[0],a[1],a[2],a[3]);\r\n\t};\r\n\t\r\n\tRect.Zero = new Rect(0,0,0,0);\r\n\t\r\n\treturn Rect;\r\n\t\r\n});\t\r\n\ndefine( 'skylark-graphics-geom/transform/Matrix',[\r\n    \"skylark-langx/langx\",\r\n    \"../geom\",\r\n], function(langx,geom){\r\n\t// reference easeljs/geom/Matrix2D  and dojox/gfx/matrix\r\n\t\r\n\tvar DEG_TO_RAD = Math.PI/180;\r\n\tvar _degToRadCache = {};\r\n\tvar degToRad = function(degree){\r\n\t\treturn _degToRadCache[degree] || (_degToRadCache[degree] = (Math.PI * degree / 180));\r\n\t};\r\n\tvar radToDeg = function(radian){ return radian / Math.PI * 180; };\r\n\t\r\n\r\n\t//Represents a 3 x 3 affine transformation matrix used for transformation in 2-D space.\r\n\t//|----------|\r\n\t//|m11|m21|dx| \r\n\t//|----------|\r\n\t//|m12|m22|dy|\r\n\t//|----------|\r\n\t//|  0|  0| 1|\r\n\t//|----------|\r\n\t\r\n    var Matrix = geom.TransformMatrix = langx.klass({\r\n        \"klassName\": \"TransformMatrix\",\r\n\r\n\t\t\"_multiplyPoint\"\t: \tfunction(p){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies the matrix to a point\r\n\t\t\t// p: Point\r\n\t\t\t//\t\ta point\r\n\t\t\t// returns: Point\r\n\t\t\tvar _ = this._,\r\n\t\t\t\tx = p.x * _.m11 + p.y * _.m21  + _.dx,\r\n\t\t\t    y = p.x * _.m12 +  p.y * _.m22 + _.dy;\r\n\t\t\treturn new Point(x,y); // Point\r\n\t\t},\r\n\r\n       \"m11\": {\r\n       \t\t//Position (0, 0) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.m11;\r\n            }\r\n        },\r\n\r\n       \"m12\": {\r\n       \t\t//Position (0, 1) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.m12;\r\n            }\r\n        },\r\n\r\n       \"m21\": {\r\n       \t\t//Position (1, 0) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.m21;\r\n            }\r\n        },\r\n\r\n       \"m22\": {\r\n       \t\t//Position (1, 1) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.m22;\r\n            }\r\n        },\r\n\r\n       \"dx\": {\r\n       \t\t// Position (2, 1) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.dx;\r\n            }\r\n        },\r\n\r\n       \"dy\": {\r\n       \t\t// Position (2, 1) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.dy;\r\n            }\r\n        },\r\n\r\n       \"alpha\": {\r\n       \t\t// Property representing the alpha that will be applied to a display object. This is not part of matrix\r\n       \t\t// operations, but is used for operations like getConcatenatedMatrix to provide concatenated alpha values.\r\n            get : function() {\r\n                return this._.alpha;\r\n            }\r\n        },\r\n\r\n       \"shadow\": {\r\n       \t\t// Property representing the shadow that will be applied to a display object. This is not part of matrix\r\n       \t\t// operations, but is used for operations like getConcatenatedMatrix to provide concatenated shadow values..\r\n            get : function() {\r\n                return this._.shadow;\r\n            }\r\n        },\r\n\r\n       \"compositeOperation\": {\r\n\t\t\t/**\r\n\t\t\t * Property representing the compositeOperation that will be applied to a display object. This is not part of\r\n\t\t\t * matrix operations, but is used for operations like getConcatenatedMatrix to provide concatenated\r\n\t\t\t * compositeOperation values. You can find a list of valid composite operations at:\r\n\t\t\t * <a href=\"https://developer.mozilla.org/en/Canvas_tutorial/Compositing\">https://developer.mozilla.org/en/Canvas_tutorial/Compositing</a>\r\n\t\t\t * @property compositeOperation\r\n\t\t\t * @type String\r\n\t\t\t **/\r\n            get : function() {\r\n                return this._.compositeOperation;\r\n            }\r\n        },\r\n\r\n        //Converts the specified point with Matrix and returns the result.\r\n\t\tmultiplyPoint: /*Point*/function(/*Point */ p){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies the matrix to a point\r\n\t\t\treturn this._multiplyPoint(p); // Point\r\n\t\t},\r\n\t\t\t\t/**\r\n\t\t\t\t * 指定した矩形を Matrix で変換し、その結果を返します。\r\n\t\t\t\t */\r\n\t\tmultiplyRectangle: /*Rect*/function(/*Rect*/ rect){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tApplies the matrix to a rectangle.\r\n\t\t\t// returns: Rect\r\n\t\t\tif(this.isIdentity())\r\n\t\t\t\treturn rect.clone(); // Rect\r\n\t\t\tvar p0 = this.multiplyPoint(rect.leftTop),\r\n\t\t\t\tp1 = this.multiplyPoint(rect.leftBottom),\r\n\t\t\t\tp2 = this.multiplyPoint(rect.right),\r\n\t\t\t\tp3 = this.multiplyPoint(rect.rightBottom),\r\n\t\t\t\tminx = Math.min(p0.x, p1.x, p2.x, p3.x),\r\n\t\t\t\tminy = Math.min(p0.y, p1.y, p2.y, p3.y),\r\n\t\t\t\tmaxx = Math.max(p0.x, p1.x, p2.x, p3.x),\r\n\t\t\t\tmaxy = Math.max(p0.y, p1.y, p2.y, p3.y);\r\n\t\t\treturn new Rect(minx,miny,maxx-minx,maxy-miny);  // Rect\r\n\t\t},\r\n\t\t/**\r\n\t\t * Concatenates the specified matrix properties with this matrix. All parameters are required.\r\n\t\t * @method prepend\r\n\t\t * @param {Number} m11\r\n\t\t * @param {Number} m12\r\n\t\t * @param {Number} m21\r\n\t\t * @param {Number} m22\r\n\t\t * @param {Number} dx\r\n\t\t * @param {Number} dy\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tprepend : function(m11, m12, m21, m22, dx, dy) {\r\n\t\t\tvar tx1 = this.dx;\r\n\t\t\tif (m11 != 1 || m12 != 0 || m21 != 0 || m22 != 1) {\r\n\t\t\t\tvar a1 = this.m11;\r\n\t\t\t\tvar c1 = this.m21;\r\n\t\t\t\tthis.m11  = a1*m11+this.m12*m21;\r\n\t\t\t\tthis.m12  = a1*m12+this.m12*m22;\r\n\t\t\t\tthis.m21  = c1*m11+this.m22*m21;\r\n\t\t\t\tthis.m22  = c1*m12+this.m22*m22;\r\n\t\t\t}\r\n\t\t\tthis.dx = tx1*m11+this.dy*m21+dx;\r\n\t\t\tthis.dy = tx1*m12+this.dy*m22+dy;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Appends the specified matrix properties with this matrix. All parameters are required.\r\n\t\t * 指定した Matrixをこの Matrixに追加します。\r\n\t\t * @method append\r\n\t\t * @param {Number} m11\r\n\t\t * @param {Number} m12\r\n\t\t * @param {Number} m21\r\n\t\t * @param {Number} m22\r\n\t\t * @param {Number} dx\r\n\t\t * @param {Number} dy\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tappend : function(m11, m12, m21, m22, dx, dy) {\r\n\t\t\tvar a1 = this.m11;\r\n\t\t\tvar b1 = this.m12;\r\n\t\t\tvar c1 = this.m21;\r\n\t\t\tvar d1 = this.m22;\r\n\r\n\t\t\tthis.m11  = m11*a1+m12*c1;\r\n\t\t\tthis.m12  = m11*b1+m12*d1;\r\n\t\t\tthis.m21  = m21*a1+m22*c1;\r\n\t\t\tthis.m22  = m21*b1+m22*d1;\r\n\t\t\tthis.dx = dx*a1+dy*c1+this.dx;\r\n\t\t\tthis.dy = dx*b1+dy*d1+this.dy;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Prepends the specified matrix with this matrix.\r\n\t\t * @method prependMatrix\r\n\t\t * @param {Matrix} matrix\r\n\t\t **/\r\n\t\tprependMatrix : function(matrix) {\r\n\t\t\tthis.prepend(matrix.m11, matrix.m12, matrix.m21, matrix.m22, matrix.dx, matrix.dy);\r\n\t\t\tthis.prependProperties(matrix.alpha, matrix.shadow,  matrix.compositeOperation);\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Appends the specified matrix with this matrix.\r\n\t\t * 指定した Matrixをこの Matrixに追加します。\r\n\t\t * @method appendMatrix\r\n\t\t * @param {Matrix} matrix\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tappendMatrix : function(matrix) {\r\n\t\t\tthis.append(matrix.m11, matrix.m12, matrix.m21, matrix.m22, matrix.dx, matrix.dy);\r\n\t\t\tthis.appendProperties(matrix.alpha, matrix.shadow,  matrix.compositeOperation);\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Generates matrix properties from the specified display object transform properties, and prepends them with this matrix.\r\n\t\t * For example, you can use this to generate a matrix from a display object: var mtx = new Matrix();\r\n\t\t * mtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\r\n\t\t * @method prependTransform\r\n\t\t * @param {Number} x\r\n\t\t * @param {Number} y\r\n\t\t * @param {Number} scaleX\r\n\t\t * @param {Number} scaleY\r\n\t\t * @param {Number} rotation\r\n\t\t * @param {Number} skewX\r\n\t\t * @param {Number} skewY\r\n\t\t * @param {Number} regX Optional.\r\n\t\t * @param {Number} regY Optional.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tprependTransform : function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\r\n\t\t\tif (rotation%360) {\r\n\t\t\t\tvar r = rotation*DEG_TO_RAD;\r\n\t\t\t\tvar cos = Math.cos(r);\r\n\t\t\t\tvar sin = Math.sin(r);\r\n\t\t\t} else {\r\n\t\t\t\tcos = 1;\r\n\t\t\t\tsin = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (regX || regY) {\r\n\t\t\t\t// append the registration offset:\r\n\t\t\t\tthis.dx -= regX; this.dy -= regY;\r\n\t\t\t}\r\n\t\t\tif (skewX || skewY) {\r\n\t\t\t\t// TODO: can this be combined into a single prepend operation?\r\n\t\t\t\tskewX *= DEG_TO_RAD;\r\n\t\t\t\tskewY *= DEG_TO_RAD;\r\n\t\t\t\tthis.prepend(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);\r\n\t\t\t\tthis.prepend(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\r\n\t\t\t} else {\r\n\t\t\t\tthis.prepend(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, x, y);\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Generates matrix properties from the specified display object transform properties, and appends them with this matrix.\r\n\t\t * For example, you can use this to generate a matrix from a display object: var mtx = new Matrix();\r\n\t\t * mtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\r\n\t\t * @method appendTransform\r\n\t\t * @param {Number} x\r\n\t\t * @param {Number} y\r\n\t\t * @param {Number} scaleX\r\n\t\t * @param {Number} scaleY\r\n\t\t * @param {Number} rotation\r\n\t\t * @param {Number} skewX\r\n\t\t * @param {Number} skewY\r\n\t\t * @param {Number} regX Optional.\r\n\t\t * @param {Number} regY Optional.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tappendTransform : function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\r\n\t\t\tif (rotation%360) {\r\n\t\t\t\tvar r = rotation*DEG_TO_RAD;\r\n\t\t\t\tvar cos = Math.cos(r);\r\n\t\t\t\tvar sin = Math.sin(r);\r\n\t\t\t} else {\r\n\t\t\t\tcos = 1;\r\n\t\t\t\tsin = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (skewX || skewY) {\r\n\t\t\t\t// TODO: can this be combined into a single append?\r\n\t\t\t\tskewX *= DEG_TO_RAD;\r\n\t\t\t\tskewY *= DEG_TO_RAD;\r\n\t\t\t\tthis.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\r\n\t\t\t\tthis.append(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);\r\n\t\t\t} else {\r\n\t\t\t\tthis.append(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, x, y);\r\n\t\t\t}\r\n\r\n\t\t\tif (regX || regY) {\r\n\t\t\t\t// prepend the registration offset:\r\n\t\t\t\tthis.dx -= regX*this.m11+regY*this.m21; \r\n\t\t\t\tthis.dy -= regX*this.m12+regY*this.m22;\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Applies a rotation transformation to the matrix.\r\n\t\t * この Matrix の原点を中心とする指定した角度の回転を適用します。\r\n\t\t * @method rotate\r\n\t\t * @param {Number} angle The angle in degrees.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\trotate : function(angle) {\r\n\t\t\tvar cos = Math.cos(angle);\r\n\t\t\tvar sin = Math.sin(angle);\r\n\r\n\t\t\tvar a1 = this.m11;\r\n\t\t\tvar c1 = this.m21;\r\n\t\t\tvar tx1 = this.dx;\r\n\r\n\t\t\tthis.m11 = a1*cos-this.m12*sin;\r\n\t\t\tthis.m12 = a1*sin+this.m12*cos;\r\n\t\t\tthis.m21 = c1*cos-this.m22*sin;\r\n\t\t\tthis.m22 = c1*sin+this.m22*cos;\r\n\t\t\tthis.dx = tx1*cos-this.dy*sin;\r\n\t\t\tthis.dy = tx1*sin+this.dy*cos;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Applies a skew transformation to the matrix.\r\n\t\t * @method skew\r\n\t\t * @param {Number} skewX The amount to skew horizontally in degrees.\r\n\t\t * @param {Number} skewY The amount to skew vertically in degrees.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\tskew : function(skewX, skewY) {\r\n\t\t\tskewX = skewX*DEG_TO_RAD;\r\n\t\t\tskewY = skewY*DEG_TO_RAD;\r\n\t\t\tthis.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), 0, 0);\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Applies a scale transformation to the matrix.\r\n\t\t * @method scale\r\n\t\t * @param {Number} x\r\n\t\t * @param {Number} y\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tscale : function(x, y) {\r\n\t\t\tthis.m11 *= x;\r\n\t\t\tthis.m22 *= y;\r\n\t\t\tthis.dx *= x;\r\n\t\t\tthis.dy *= y;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Translates the matrix on the x and y axes.\r\n\t\t * @method translate\r\n\t\t * @param {Number} x\r\n\t\t * @param {Number} y\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\ttranslate : function(x, y) {\r\n\t\t\tthis.dx += x;\r\n\t\t\tthis.dy += y;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Sets the properties of the matrix to those of an identity matrix (one that applies a null transformation).\r\n\t\t * @method identity\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tidentity : function() {\r\n\t\t\tthis.alpha = this.m11 = this.m22 = 1;\r\n\t\t\tthis.m12 = this.m21 = this.dx = this.dy = 0;\r\n\t\t\tthis.shadow = this.compositeOperation = null;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Inverts the matrix, causing it to perform the opposite transformation.\r\n\t\t * @method invert\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tinvert : function() {\r\n\t\t\tvar a1 = this.m11;\r\n\t\t\tvar b1 = this.m12;\r\n\t\t\tvar c1 = this.m21;\r\n\t\t\tvar d1 = this.m22;\r\n\t\t\tvar tx1 = this.dx;\r\n\t\t\tvar n = a1*d1-b1*c1;\r\n\r\n\t\t\tthis.m11 = d1/n;\r\n\t\t\tthis.m12 = -b1/n;\r\n\t\t\tthis.m21 = -c1/n;\r\n\t\t\tthis.m22 = a1/n;\r\n\t\t\tthis.dx = (c1*this.dy-d1*tx1)/n;\r\n\t\t\tthis.dy = -(a1*this.dy-b1*tx1)/n;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns true if the matrix is an identity matrix.\r\n\t\t * @method isIdentity\r\n\t\t * @return {Boolean}\r\n\t\t **/\r\n\t\tisIdentity : function() {\r\n\t\t\treturn this.dx == 0 && this.dy == 0 && this.m11 == 1 && this.m12 == 0 && this.m21 == 0 && this.m22 == 1;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Decomposes the matrix into transform properties (x, y, scaleX, scaleY, and rotation). Note that this these values\r\n\t\t * may not match the transform properties you used to generate the matrix, though they will produce the same visual\r\n\t\t * results.\r\n\t\t * @method decompose\r\n\t\t * @param {Object} target The object to apply the transform properties to. If null, then a new object will be returned.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\tdecompose : function(target) {\r\n\t\t\t// TODO: it would be nice to be able to solve for whether the matrix can be decomposed into only scale/rotation\r\n\t\t\t// even when scale is negative\r\n\t\t\tif (target == null) { target = {}; }\r\n\t\t\ttarget.x = this.dx;\r\n\t\t\ttarget.y = this.dy;\r\n\t\t\ttarget.scaleX = Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12);\r\n\t\t\ttarget.scaleY = Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22);\r\n\r\n\t\t\tvar skewX = Math.atan2(-this.m21, this.m22);\r\n\t\t\tvar skewY = Math.atan2(this.m12, this.m11);\r\n\r\n\t\t\tif (skewX == skewY) {\r\n\t\t\t\ttarget.rotation = skewY/DEG_TO_RAD;\r\n\t\t\t\tif (this.m11 < 0 && this.m22 >= 0) {\r\n\t\t\t\t\ttarget.rotation += (target.rotation <= 0) ? 180 : -180;\r\n\t\t\t\t}\r\n\t\t\t\ttarget.skewX = target.skewY = 0;\r\n\t\t\t} else {\r\n\t\t\t\ttarget.skewX = skewX/DEG_TO_RAD;\r\n\t\t\t\ttarget.skewY = skewY/DEG_TO_RAD;\r\n\t\t\t}\r\n\t\t\treturn target;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Reinitializes all matrix properties to those specified.\r\n\t\t * @method appendProperties\r\n\t\t * @param {Number} m11\r\n\t\t * @param {Number} m12\r\n\t\t * @param {Number} m21\r\n\t\t * @param {Number} m22\r\n\t\t * @param {Number} dx\r\n\t\t * @param {Number} dy\r\n\t\t * @param {Number} alpha desired alpha value\r\n\t\t * @param {Shadow} shadow desired shadow value\r\n\t\t * @param {String} compositeOperation desired composite operation value\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\treinitialize : function(m11,m12,m21,m22,dx,dy,alpha,shadow,compositeOperation) {\r\n\t\t\tthis._initialize(m11,m12,m21,m22,dx,dy);\r\n\t\t\tthis.alpha = alpha || 1;\r\n\t\t\tthis.shadow = shadow;\r\n\t\t\tthis.compositeOperation = compositeOperation;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Appends the specified visual properties to the current matrix.\r\n\t\t * @method appendProperties\r\n\t\t * @param {Number} alpha desired alpha value\r\n\t\t * @param {Shadow} shadow desired shadow value\r\n\t\t * @param {String} compositeOperation desired composite operation value\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\tappendProperties : function(alpha, shadow, compositeOperation) {\r\n\t\t\tthis.alpha *= alpha;\r\n\t\t\tthis.shadow = shadow || this.shadow;\r\n\t\t\tthis.compositeOperation = compositeOperation || this.compositeOperation;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Prepends the specified visual properties to the current matrix.\r\n\t\t * @method prependProperties\r\n\t\t * @param {Number} alpha desired alpha value\r\n\t\t * @param {Shadow} shadow desired shadow value\r\n\t\t * @param {String} compositeOperation desired composite operation value\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\tprependProperties : function(alpha, shadow, compositeOperation) {\r\n\t\t\tthis.alpha *= alpha;\r\n\t\t\tthis.shadow = this.shadow || shadow;\r\n\t\t\tthis.compositeOperation = this.compositeOperation || compositeOperation;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t *Multiply Matrix by another Matrix.\r\n\t\t */\r\n\t\tmultiply: function(matrix){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcombines matrices by multiplying them sequentially in the given order\r\n\t\t\t// matrix: Matrix\r\n\t\t\t//\t\ta 2D matrix-like object,\r\n\t\t\t//\t\tall subsequent arguments are matrix-like objects too\r\n\r\n\t\t\t// combine matrices\r\n\t\t\tvar m11 = this.m11,m12 = this.m12,m21 = this.m21,m22=this.m22,dx=this.dx,dy=this.dy;\r\n\t\t\tvar r = matrix;\r\n\t\t\tthis.m11 = m11 * r.m11 + m21 * r.m12;\r\n\t\t\tthis.m12 = m12 * r.m11 + m22 * r.m12;\r\n\t\t\tthis.m21 = m11 * r.m21 + m21 * r.m22;\r\n\t\t\tthis.m22 = m12 * r.m21 + m22 * r.m22;\r\n\t\t\tthis.dx =  m11 * r.dx + m21 * r.dy + dx;\r\n\t\t\tthis.dy =  m12 * r.dx + m22 * r.dy + dy;\r\n\t\t\treturn this // Matrix\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns a clone of the Matrix instance.\r\n\t\t * @method clone\r\n\t\t * @return {Matrix} a clone of the Matrix instance.\r\n\t\t **/\r\n\t\tclone : function() {\r\n\r\n\t\t\tvar _ = this._,\r\n\t\t\t\tmtx = new Matrix(_.m11, _.m12, _.m21, _.m22, _.dx, _.dy);\r\n\t\t\tmtx.shadow = this.shadow;\r\n\t\t\tmtx.alpha = this.alpha;\r\n\t\t\tmtx.compositeOperation = this.compositeOperation;\r\n\t\t\treturn mtx;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns a string representation of this object.\r\n\t\t * @method toString\r\n\t\t * @return {String} a string representation of the instance.\r\n\t\t **/\r\n\t\ttoString : function() {\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn \"[Matrix (m11=\"+_.m11+\" m12=\"+_.m12+\" m21=\"+_.m21+\" m22=\"+_.m22+\" dx=\"+_.dx+\" dy=\"+_.dy+\")]\";\r\n\t\t},\r\n\t\t\r\n\t\t\"init\" : function(m11, m12, m21, m22, dx, dy) {\r\n\t\t\tvar _ = this._;\r\n\t\t\t_.m11 = m11 || 1;\r\n\t\t\t_.m12 = m12 || 0;\r\n\t\t\t_.m21 = m21 || 0;\r\n\t\t\t_.m22 = m22 || 1;\r\n\t\t\t_.dx = dx || 0;\r\n\t\t\t_.dy = dy || 0;\r\n\t\t}\r\n\r\n\t});\r\n\t\r\n\tlangx.mixin(Matrix,{\r\n\t\ttranslate: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a translation matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to translate (move) points by specified offsets.\r\n\t\t\t// a: Number\r\n\t\t\t//\t\tan x coordinate value\r\n\t\t\t// b: Number\r\n\t\t\t//\t\ta y coordinate value\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |  1|   0| a|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |  0|   1| b|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\r\n\t\t\treturn new Matrix(1,0,0,1,a,b); // Matrix\r\n\t\t},\r\n\t\tscale: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a scaling matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to scale (magnify) points by specified offsets.\r\n\t\t\t// a: Number\r\n\t\t\t//\t\ta scaling factor used for the x coordinate\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta scaling factor used for the y coordinate\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |  a|   0| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |  0|   b| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\treturn new Matrix(a,0,0,b?b:a,0,0); // Matrix\r\n\t\t},\r\n\t\trotate: function(angle){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\tan angle of rotation in radians (>0 for CW)\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |cos|-sin| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |sin| cos| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\tvar cos = Math.cos(angle);\r\n\t\t\tvar sin = Math.sin(angle);\r\n\t\t\treturn new Matrix(cos,sin,-sin,cos,0,0); // Matrix\r\n\t\t},\r\n\t\trotateg: function(degree){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSeerotate() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\tan angle of rotation in degrees (>0 for CW)\r\n\t\t\t// returns: Matrix\r\n\t\t\treturn this.rotate(degToRad(degree)); // Matrix\r\n\t\t},\r\n\t\tskewX: function(angle) {\r\n\t\t\t//TODO : will be modified\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms an x skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the x dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |  1| tan| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |  0|   1| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\tvar tan = Math.tan(angle);\r\n\t\t\treturn new Matrix(1,0,tan,1); // Matrix\r\n\t\t},\r\n\t\tskewXg: function(degree){\r\n\t\t\t//TODO : will be modified\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms an x skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the x dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSee dojox/gfx/matrix.skewX() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// returns: Matrix\r\n\t\t\treturn this.skewX(degToRad(degree)); // dojox/gfx/matrix.Matrix\r\n\t\t},\r\n\t\tskewY: function(angle){\r\n\t\t\t//TODO : will be modified\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a y skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the y dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |  1|   0| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |tan|   1| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\tvar tan = Math.tan(angle);\r\n\r\n\t\t\treturn new Matrix(1,tan,0,1); // Matrix\r\n\t\t},\r\n\t\tskewYg: function(degree){\r\n\t\t\t//TODO : will be modified\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a y skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the y dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSee skewY() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// returns: Matrix\r\n\t\t\treturn this.skewY(degToRad(degree)); // Matrix\r\n\t\t},\r\n\t\treflect: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a reflection matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to reflect points around a vector,\r\n\t\t\t//\t\twhich goes through the origin.\r\n\t\t\t// a: dojox/gfx.Point|Number\r\n\t\t\t//\t\ta point-like object, which specifies a vector of reflection, or an X value\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta Y value\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length == 1){\r\n\t\t\t\tb = a.y;\r\n\t\t\t\ta = a.x;\r\n\t\t\t}\r\n\t\t\t// make a unit vector\r\n\t\t\tvar a2 = a * a, b2 = b * b, n2 = a2 + b2, \r\n\t\t\t\txx=2 * a2 / n2 - 1, \r\n\t\t\t\txy = 2 * a * b / n2,\r\n\t\t\t\tyx = xy,\r\n\t\t\t\tyy = 2 * b2 / n2 - 1;\r\n\t\t\treturn new Matrix(xx,yx,xy, yy); // Matrix\r\n\t\t},\r\n\t\tproject: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms an orthogonal projection matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to project points orthogonally on a vector,\r\n\t\t\t//\t\twhich goes through the origin.\r\n\t\t\t// a:   Number\r\n\t\t\t//\t\tan x coordinate value\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y coordinate value\r\n\t\t\t// returns: Matrix\r\n\r\n\t\t\t// make a unit vector\r\n\t\t\tvar a2 = a * a, b2 = b * b, n2 = a2 + b2, \r\n\t\t\t\txx = a2 / n2,\r\n\t\t\t\txy = a * b / n2\r\n\t\t\t\tyx = xy,\r\n\t\t\t\tyy = b2 / n2;\r\n\t\t\treturn new Matrix(xx,yx,xy,yy); // Matrix\r\n\t\t},\r\n\r\n\t\t// common operations\r\n\r\n\t\t// high level operations\r\n\r\n\t\t_sandwich: function(matrix, x, y){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies a matrix at a central point\r\n\t\t\t// matrix: Matrix\r\n\t\t\t//\t\ta 2D matrix-like object, which is applied at a central point\r\n\t\t\t// x: Number\r\n\t\t\t//\t\tan x component of the central point\r\n\t\t\t// y: Number\r\n\t\t\t//\t\ta y component of the central point\r\n\t\t\treturn this.translate(x, y).multiply(matrix)\r\n\t\t\t                           .multiply(this.translate(-x, -y)); // Matrix\r\n\t\t},\r\n\t\tscaleAt: function(a, b, c, d){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tscales a picture using a specified point as a center of scaling\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with scale().\r\n\t\t\t// a: Number\r\n\t\t\t//\t\ta scaling factor used for the x coordinate, or a uniform scaling factor used for both coordinates\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta scaling factor used for the y coordinate\r\n\t\t\t// c: Number|Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// d: Number\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tswitch(arguments.length){\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\t// a and b are scale factor components, c and d are components of a point\r\n\t\t\t\t\treturn this._sandwich(this.scale(a, b), c, d); // Matrix\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tif(typeof c == \"number\"){\r\n\t\t\t\t\t\treturn this._sandwich(this.scale(a), b, c); // Matrix\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn this._sandwich(this.scale(a, b), c.x, c.y); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.scale(a), b.x, b.y); // Matrix\r\n\t\t},\r\n\t\trotateAt: function(angle, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\trotates a picture using a specified point as a center of rotation\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with rotate().\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\tan angle of rotation in radians (>0 for CW)\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.rotate(angle), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.rotate(angle), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\trotategAt: function(degree, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\trotates a picture using a specified point as a center of rotation\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with rotateg().\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\tan angle of rotation in degrees (>0 for CW)\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.rotateg(degree), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.rotateg(degree), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\tskewXAt: function(angle, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the x axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with skewX().\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.skewX(angle), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.skewX(angle), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\tskewXgAt: function(degree, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the x axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with skewXg().\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.skewXg(degree), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.skewXg(degree), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\tskewYAt: function(angle, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the y axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with skewY().\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.skewY(angle), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.skewY(angle), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\tskewYgAt: function(/* Number */ degree, /* Number||Point */ a, /* Number? */ b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the y axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with skewYg().\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.skewYg(degree), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.skewYg(degree), a.x, a.y); // Matrix\r\n\t\t}\r\n\t\r\n\t\r\n\t});\r\n\r\n\treturn Matrix;\r\n});\r\n\ndefine('skylark-graphics-geom/transform/Transform',[\r\n    \"skylark-langx/langx\",\r\n    \"../geom\",\r\n\t\"./Matrix\"\r\n], function(langx,geom, Matrix) {\r\n\r\n    var Transform = geom.Transform = langx.klass({\r\n        \"klassName\": \"Transform\",\r\n\t\t\"value\": {\r\n\t\t\tget : function(){\r\n\t\t\t\treturn this._.value;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn Transform;\r\n});\r\n\ndefine('skylark-graphics-geom/transform/MatrixTransform',[\r\n    \"skylark-langx/langx\",\r\n    \"../geom\",\r\n\t\"./Transform\",\r\n\t\"../Point\",\r\n\t\"../Rect\"\r\n],function(langx,geom,Transform,Point,Rect) {\r\n\r\n    var MatrixTransform = geom.MatrixTransform = Transform.inherit({\r\n        \"klassName\": \"MatrixTransform\",\r\n\r\n\t\t\"value\"\t:\t{\r\n\t\t\tget : function(){\r\n\t\t\t\treturn this.matrix.clone();\r\n\t\t\t}\r\n\t\t},\r\n\t\t\r\n\t\t\"matrix\" : {\r\n\t\t\tget : function(){\r\n\t\t\t\treturn this._.matrix;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tclone : /*ScaleTransform*/function() {\r\n\t\t},\r\n\t\t\r\n\t\ttransform : /*Point*/function(/*Point*/point) {\r\n\t\t},\r\n\t\t\r\n\t\t//�w�肳�ꂽ���E�{�b�N�X��ϊ����A��������傤�Ǌi�[�ł���傫���̎����s���E�{�b�N�X��Ԃ��܂��B\r\n\t\ttransformBounds : /*Rect*/function(/*Rect*/rect) {\r\n\t\t},\t\t\r\n\t\t\"initialize\" : function(/*Martix*/matrix) {\r\n            var _ = this._;\r\n\t\t\t\r\n\t\t\t_.matrix = matrix;\r\n\t\t}\r\n\t\t\t\t\r\n\t});\r\n\r\n\treturn MatrixTransform;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-geom/transform/RotateTransform',[\r\n    \"skylark-langx/langx\",\r\n    \"../geom\",\r\n\t\"./Transform\",\r\n\t\"./Matrix\",\r\n\t\"../Point\",\r\n\t\"../Rect\"\r\n],function(langx,geom,Transform,Matrix,Point,Rect) {\r\n\r\n\r\n    var RotateTransform = geom.RotateTransform = Transform.inherit({\r\n        \"klassName\": \"RotateTransform\",\r\n\r\n        \"value\": {\r\n            get: function() {\r\n                return Matrix.rotateAt(this.angle, this.centerX, this.centerY);\r\n            }\r\n        },\r\n\r\n        \"angle\": {\r\n            get : function() {\r\n                return this._.angle;\r\n            }\r\n        },\r\n        // cy: Number\r\n        //\t\tThe Y coordinate of the center of the circle, default value 0.\r\n        \"centerX\": {\r\n            get : function() {\r\n                return this._.centerX;\r\n            }\r\n        },\r\n        // r: Number\r\n        //\t\tThe radius, default value 100.\r\n        \"centerY\": {\r\n            get : function() {\r\n                return this._.centerY;\r\n            }\r\n        },\r\n\r\n\t\tclone : /*ScaleTransform*/function() {\r\n\t\t},\r\n\t\t\r\n\t\ttransform : /*Point*/function(/*Point*/point) {\r\n\t\t},\r\n\t\t\r\n\t\ttransformBounds : /*Rect*/function(/*Rect*/rect) {\r\n\t\t},\r\n\t\t\r\n\t\t\"init\" : function(/*Number*/angle,/*Number*/centerX,/*Number*/centerY) {\r\n\t\t\tvar _ = this._ = {};\r\n\t\t\t_.angle = angle ? angle :0;\r\n\t\t\t_.centerX = centerX ? centerX :0;\r\n\t\t\t_.centerY = centerY ? centerY :0;\r\n\t\t}\r\n\t});\r\n\r\n\treturn RotateTransform;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-geom/transform/ScaleTransform',[\r\n    \"skylark-langx/langx\",\r\n    \"../geom\",\r\n    \"./Transform\",\r\n    \"./Matrix\",\r\n    \"../Point\",\r\n    \"../Rect\"\r\n], function(langx,geom, Transform, Matrix, Point, Rect) {\r\n\r\n   var ScaleTransform = geom.ScaleTransform = Transform.inherit({\r\n        \"klassName\": \"ScaleTransform\",\r\n\r\n        \"value\": {\r\n            get: function() {\r\n                    return Matrix.scaleAt(this.scaleX, this.scaleY, this.centerX, this.centerY);\r\n            }\r\n        },\r\n\r\n        \"scaleX\": {\r\n            get : function() {\r\n                return this._.scaleX;\r\n            }\r\n        },\r\n\r\n        \"scaleY\": {\r\n            get : function() {\r\n                return this._.scaleY;\r\n            }\r\n        },\r\n\r\n        // cy: Number\r\n        //      The Y coordinate of the center of the circle, default value 0.\r\n        \"centerX\": {\r\n            get : function() {\r\n                return this._.centerX;\r\n            }\r\n        },\r\n        // r: Number\r\n        //      The radius, default value 100.\r\n        \"centerY\": {\r\n            get : function() {\r\n                return this._.centerY;\r\n            }\r\n        },\r\n\r\n        clone: /*ScaleTransform*/ function() {},\r\n\r\n        transform: /*Point*/ function( /*Point*/ point) {},\r\n\r\n        transformBounds: /*Rect*/ function( /*Rect*/ rect) {},\r\n\r\n        \"init\": function( /*Number*/ scaleX, /*Number*/ scaleY, /*Number*/ centerX, /*Number*/ centerY) {\r\n            var _ = this._;\r\n\r\n            _.scaleX = scaleX ? scaleX : 1;\r\n            _.scaleY = scaleY ? scaleY : 1;\r\n            _.centerX = centerX ? centerX : 0;\r\n            _.centerY = centerY ? centerY : 0;\r\n        }\r\n    });\r\n\r\n    return ScaleTransform;\r\n\r\n});\r\n\ndefine('skylark-graphics-geom/transform/SkewTransform',[\r\n    \"skylark-langx/langx\",\r\n    \"../geom\",\r\n    \"./Transform\",\r\n    \"./Matrix\",\r\n    \"../Point\",\r\n    \"../Rect\"\r\n], function(Class, Transform, Matrix, Point, Rect) {\r\n\r\n   var SkewTransform = geom.SkewTransform = Transform.inherit({\r\n        \"klassName\": \"SkewTransform\",\r\n\r\n        \"value\": {\r\n            get: function() {\r\n                    return Matrix.scaleAt(this.skewX, this.skewY);\r\n            }\r\n        },\r\n\r\n        \"skewX\": {\r\n            get : function() {\r\n                return this._.skewX;\r\n            }\r\n        },\r\n\r\n        \"skewY\": {\r\n            get : function() {\r\n                return this._.skewY;\r\n            }\r\n        },\r\n\r\n        clone: /*SkewTransform*/ function() {},\r\n\r\n        transform: /*Point*/ function( /*Point*/ point) {},\r\n\r\n        transformBounds: /*Rect*/ function( /*Rect*/ rect) {},\r\n\r\n        \"init\": function( /*Number*/ skewX, /*Number*/ skewY) {\r\n            var _ = this._;\r\n\r\n            _.skewX = skewX ? skewX : 0;\r\n            _.skewY = skewY ? skewY : 0;\r\n        }\r\n    });\r\n\r\n    return SkewTransform;\r\n\r\n});\r\n\ndefine('skylark-graphics-geom/transform/TranslateTransform',[\r\n    \"skylark-langx/langx\",\r\n    \"../geom\",\r\n    \"./Transform\",\r\n    \"./Matrix\",\r\n    \"../Point\",\r\n    \"../Rect\"\r\n],function(langx,geom,Transform,Matrix,Point,Rect) {\r\n\r\n    //|1   0   dx|\r\n    //|0   1   dy|\r\n    //|0   0    1|\r\n\r\n   var TranslateTransform = geom.TranslateTransform = Transform.inherit({\r\n        \"klassName\": \"TranslateTransform\",\r\n\r\n        \"value\": {\r\n            get: function() {\r\n                    return Matrix.scaleAt(this.x, this.y);\r\n            }\r\n        },\r\n\r\n        \"x\": {\r\n            get : function() {\r\n                return this._.x;\r\n            }\r\n        },\r\n\r\n        \"y\": {\r\n            get : function() {\r\n                return this._.y;\r\n            }\r\n        },\r\n\r\n        clone: /*SkewTransform*/ function() {},\r\n\r\n        transform: /*Point*/ function( /*Point*/ point) {},\r\n\r\n        transformBounds: /*Rect*/ function( /*Rect*/ rect) {},\r\n\r\n        \"init\": function( /*Number*/ x, /*Number*/ y) {\r\n            var _ = this._;\r\n\r\n            _.x = x ? x : 0;\r\n            _.y = y ? y : 0;\r\n        }\r\n    });\r\n\r\n    return TranslateTransform;\r\n\r\n\tvar TranslateTransform = Class.declare(Transform,{\r\n\t\t\"-parent-\"\t:\tTransform,\r\n\t\t\r\n\t\t\"-module-\"\t:\t\"qface/geom/transform/TranslateTransform\",\r\n\r\n\t\t\"-protected-\" : {\r\n\t\t\t\"-methods-\"\t:\t{\r\n\t\t\t\t_valueGetter : function(){\r\n\t\t\t\t\treturn Matrix.translate(this.x,this.y);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"-public-\" : {\r\n\t\t\t\"-attributes-\" : {\r\n\t\t\t\t//x ���ɉ����ĕ��s�ړ����鋗�����擾�܂��͐ݒ肵�܂��B\r\n\t\t\t\t\"x\" : {\r\n\t\t\t\t\ttype : Number,\r\n\t\t\t\t\treadOnly : true\r\n\t\t\t\t},\r\n\t\t\t\t//y ���ɉ����ăI�u�W�F�N�g��ϊ� (�ړ�) ���鋗�����擾�܂��͐ݒ肵�܂��B\r\n\t\t\t\t\"y\" : {\r\n\t\t\t\t\ttype : Number,\r\n\t\t\t\t\treadOnly : true\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"-methods-\"\t:\t{\r\n\t\t\t\t//���� ScaleTransform �̒l�̏ڍ׃R�s�[���쐬���ĕԂ��܂��B\r\n\t\t\t\tclone : /*ScaleTransform*/function() {\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\t//�w�肵���_��ϊ����A���ʂ�Ԃ��܂��B\r\n\t\t\t\ttransform : /*Point*/function(/*Point*/point) {\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\t//�w�肳�ꂽ���E�{�b�N�X��ϊ����A��������傤�Ǌi�[�ł���傫���̎����s���E�{�b�N�X��Ԃ��܂��B\r\n\t\t\t\ttransformBounds : /*Rect*/function(/*Rect*/rect) {\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"-constructor-\"\t:\t{\t\t\r\n\t\t\t\"initialize\" : function(x,y) {\r\n\t\t\t\tthis._x = x ? x :0;\r\n\t\t\t\tthis._y = y ? y :0;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn TranslateTransform;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-geom/main',[\r\n    \"./geom\",\r\n    \"./Arrow\",\r\n    \"./Circle\",\r\n    \"./Ellipse\",\r\n    \"./Geometry\",\r\n    \"./Line\",\r\n    \"./Point\",\r\n    \"./Polyline\",\r\n    \"./PolyStar\",\r\n    \"./Rect\",\r\n    \"./Size\",\r\n    \"./transform/Matrix\",\r\n    \"./transform/MatrixTransform\",\r\n    \"./transform/RotateTransform\",\r\n    \"./transform/ScaleTransform\",\r\n    \"./transform/SkewTransform\",\r\n    \"./transform/Transform\",\r\n    \"./transform/TranslateTransform\"\r\n], function(geom) {\r\n\r\n\treturn geom;\r\n});\ndefine('skylark-graphics-geom', ['skylark-graphics-geom/main'], function (main) { return main; });\n\n"]}