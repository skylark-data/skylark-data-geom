{"version":3,"sources":["skylark-graphics-shapes.js"],"names":["define","skylark","langx","attach","log2","x","n","i","shapes","Geometry","klass","klassName","Point","inherit","get","this","_","y","clone","move","dx","dy","notEqual","p","equal","init","fromString","s","a","split","parseFloat","fromPlain","o","fromArray","Zero","Direction","left","top","right","bottom","Arrow","bounds","box","width","height","direction","leftTop","leftBottom","rightTop","rightBottom","containPoint","undefined","Circle","cx","r","cy","diff","Ellipse","rx","ry","Line","Math","min","x1","x2","y1","y2","abs","startPoint","endPointer","Polyline","points","l","length","t","bbox","b","Polystar","radius","sides","pointSize","angle","Size","toArray","toPlain","toString","w","h","Rect","size","isEmpty","isIntersect","width2","height2","width1","height1","intersect","unite","max","main"],"mappings":";;;;;;;g4BAAAA,EAAA,kCACA,wBACA,uBACA,SAAAC,EAAAC,GAgBA,OAAAD,EAAAE,OAAA,mBAZAC,KAAA,SAAAC,GAEA,IADA,IAAAC,EAAA,EAAAC,EAAA,EACAF,EAAAC,GACAA,IAAA,EACAC,IAEA,OAAAA,OAQAP,EAAA,oCACA,sBACA,YACA,SAAAE,EAAAM,GACA,IAAAC,EAAAD,EAAAC,SAAAP,EAAAQ,OACAC,UAAA,aAIA,OAAAF,IAIAT,EAAA,iCACA,sBACA,WACA,cACA,SAAAE,EAAAM,EAAAC,GAEA,IAAAG,EAAAJ,EAAAI,MAAAH,EAAAI,SACAF,UAAA,QACAN,GACAS,IAAA,WACA,OAAAC,KAAAC,EAAAX,IAKAY,GACAH,IAAA,WACA,OAAAC,KAAAC,EAAAC,IAGAC,MAAA,WACA,IAAAF,EAAAD,KAAAC,EACA,OAAA,IAAAJ,EAAAI,EAAAX,EAAAW,EAAAC,IAGAE,KAAA,SAAAC,EAAAC,GACA,IAAAL,EAAAD,KAAAC,EACA,OAAA,IAAAJ,EAAAI,EAAAX,EAAAe,EAAAJ,EAAAC,EAAAI,IAEAC,SAAA,SAAAC,GACA,IAAAP,EAAAD,KAAAC,EACA,OAAAO,GAAAA,EAAAlB,GAAAW,EAAAX,GAAAkB,EAAAN,GAAAD,EAAAC,GAGAO,MAAA,SAAAD,GACA,OAAAR,KAAAO,SAAAC,IAGAE,KAAA,SAAApB,EAAAY,GACA,IAAAD,EAAAD,KAAAC,KACAA,EAAAX,EAAAA,GAAA,EACAW,EAAAC,EAAAA,GAAA,KA9DA,OAkEAL,EAAAc,WAAA,SAAAC,GACA,IAAAC,EAAAD,EAAAE,MAAA,KAhFA,OAAA,IAAAjB,EAAAkB,WAAAF,EAAA,IAAAE,WAAAF,EAAA,MAGAhB,EAAAmB,UAAA,SAAAC,GACA,OAAA,IAAApB,EAAAoB,EAAA3B,EAAA2B,EAAAf,IAGAL,EAAAqB,UAAA,SAAAL,GACA,OAAA,IAAAhB,EAAAgB,EAAA,GAAAA,EAAA,KAGAhB,EAAAsB,KAAA,IAAAtB,EAAA,EAAA,GAEAA,IAIAZ,EAAA,iCACA,sBACA,WACA,aACA,WACA,SAAAE,EAAAM,EAAAC,EAAAG,GACA,IAAAuB,GACAC,KAAA,EACAC,IAAA,EACAC,MAAA,EACAC,OAAA,GAGAC,EAAAhC,EAAAgC,MAAA/B,EAAAI,SACAF,UAAA,QACA8B,QACA3B,IAAA,WAGA,IACAE,EAAAD,KAAAC,EACA0B,GACArC,EAAAW,EAAAX,EACAY,EAAAF,KAAAE,EACA0B,MAAA3B,EAAA2B,MACAC,OAAA5B,EAAA4B,QAEA,OAAAF,IAGArC,GACAS,IAAA,WACA,OAAAC,KAAAC,EAAAX,IAKAY,GACAH,IAAA,WACA,OAAAC,KAAAC,EAAAC,IAKA0B,OACA7B,IAAA,WACA,OAAAC,KAAAC,EAAA2B,QAKAC,QACA9B,IAAA,WACA,OAAAC,KAAAC,EAAA4B,SAKAC,WACA/B,IAAA,WACA,OAAAC,KAAAC,EAAA6B,YAGAC,SACAhC,IAAA,WACA,IAAAE,EAAAD,KAAAC,EACA,OAAA,IAAAJ,EAAAI,EAAAX,EAAAW,EAAAC,KAGA8B,YACAjC,IAAA,WACA,IAAAE,EAAAD,KAAAC,EACA,OAAA,IAAAJ,EAAAI,EAAAX,EAAAW,EAAAC,EAAAD,EAAA4B,UAGAI,UACAlC,IAAA,WACA,IAAAE,EAAAD,KAAAC,EACA,OAAA,IAAAJ,EAAAI,EAAAX,EAAAW,EAAA2B,MAAA3B,EAAAC,KAGAgC,aACAnC,IAAA,WACA,IAAAE,EAAAD,KAAAC,EACA,OAAA,IAAAJ,EAAAI,EAAAX,EAAAW,EAAA2B,MAAA3B,EAAAC,EAAAD,EAAA4B,UAGAzB,KAAA,SAAAC,EAAAC,GACA,IAAAL,EAAAD,KAAAC,EACA,OAAA,IAAAwB,EAAAxB,EAAAX,EAAAe,EAAAJ,EAAAC,EAAAI,EAAAL,EAAA2B,MAAA3B,EAAA4B,OAAA5B,EAAA6B,YAEAK,aAAA,SAAA7C,EAAAY,GAEA,QAAAkC,IAAAlC,EAAA,CACA,IAAAM,EAAAlB,EACAA,EAAAkB,EAAAlB,EACAY,EAAAM,EAAAN,EAEA,IAAAD,EAAAD,KAAAC,EAEA,OAAAX,GAAAW,EAAAX,GAAAA,EAAAW,EAAAX,EAAAW,EAAA2B,OAAA1B,GAAAD,EAAAC,GAAAA,EAAAD,EAAAC,EAAAD,EAAA4B,QAEAnB,KAAA,SAAApB,EAAAY,EAAA0B,EAAAC,EAAAC,GACA,IAAA7B,EAAAD,KAAAC,KACAA,EAAAX,EAAAA,GAAA,EACAW,EAAAC,EAAAA,GAAA,EACAD,EAAA2B,MAAAA,GAAA,EACA3B,EAAA4B,OAAAA,GAAA,EACA5B,EAAA6B,UAAAA,GAAAV,EAAAE,OAMA,OAFAG,EAAAL,UAAAA,EAEAK,IAGAxC,EAAA,kCACA,sBACA,WACA,cACA,SAAAE,EAAAM,EAAAC,GAEA,IAAA2C,EAAA5C,EAAA4C,OAAA3C,EAAAI,SACAF,UAAA,SAEA8B,QACA3B,IAAA,WAGA,IAAAE,EAAAD,KAAAC,EACA0B,GACArC,EAAAW,EAAAqC,GAAArC,EAAAsC,EACArC,EAAAD,EAAAuC,GAAAvC,EAAAsC,EACAX,MAAA,EAAA3B,EAAAsC,EACAV,OAAA,EAAA5B,EAAAsC,GAEA,OAAAZ,IAMAW,IACAvC,IAAA,WACA,OAAAC,KAAAC,EAAAqC,KAKAE,IACAzC,IAAA,WACA,OAAAC,KAAAC,EAAAuC,KAKAD,GACAxC,IAAA,WACA,OAAAC,KAAAC,EAAAsC,IAGAnC,KAAA,SAAAC,EAAAC,GACA,IAAAL,EAAAD,KAAAC,EACA,OAAA,IAAAoC,EAAApC,EAAAqC,GAAAjC,EAAAJ,EAAAuC,GAAAlC,EAAAL,EAAAsC,IAEAJ,aAAA,SAAA7C,EAAAY,GAEA,QAAAkC,IAAAlC,EAAA,CACA,IAAAM,EAAAlB,EACAA,EAAAkB,EAAAlB,EACAY,EAAAM,EAAAN,EAEA,IAAAD,EAAAD,KAAAC,EAEAwC,GAAAnD,EAAAW,EAAAX,IAAAA,EAAAW,EAAAX,IAAAY,EAAAD,EAAAC,IAAAA,EAAAD,EAAAC,GACA,OAAAuC,EAAAxC,EAAAsC,EAAAtC,EAAAsC,GAKA7B,KAAA,SAAA4B,EAAAE,EAAAD,GACA,IAAAtC,EAAAD,KAAAC,KACAA,EAAAqC,GAAAA,GAAA,EACArC,EAAAuC,GAAAA,GAAA,EACAvC,EAAAsC,EAAAA,GAAA,KAKA,OAAAF,IAGApD,EAAA,mCACA,sBACA,WACA,cACA,SAAAE,EAAAM,EAAAC,GAEA,IAAAgD,EAAAjD,EAAAiD,QAAAhD,EAAAI,SACAF,UAAA,UAEA8B,QACA3B,IAAA,WAGA,IAAAE,EAAAD,KAAAC,EACA0B,GACArC,EAAAW,EAAAqC,GAAArC,EAAA0C,GACAzC,EAAAD,EAAAuC,GAAAvC,EAAA2C,GACAhB,MAAA,EAAA3B,EAAA0C,GACAd,OAAA,EAAA5B,EAAA2C,IAEA,OAAAjB,IAMAW,IACAvC,IAAA,WACA,OAAAC,KAAAC,EAAAqC,KAKAE,IACAzC,IAAA,WACA,OAAAC,KAAAC,EAAAuC,KAKAG,IACA5C,IAAA,WACA,OAAAC,KAAAC,EAAA0C,KAKAC,IACA7C,IAAA,WACA,OAAAC,KAAAC,EAAA2C,KAGAxC,KAAA,SAAAC,EAAAC,GACA,IAAAL,EAAAD,KAAAC,EACA,OAAA,IAAAyC,EAAAzC,EAAAqC,GAAAjC,EAAAJ,EAAAuC,GAAAlC,EAAAL,EAAA0C,GAAA1C,EAAA2C,KAGAT,aAAA,SAAA3B,KAGAE,KAAA,SAAA4B,EAAAE,EAAAG,EAAAC,GACA,IAAA3C,EAAAD,KAAAC,KACAA,EAAAqC,GAAAA,GAAA,EACArC,EAAAuC,GAAAA,GAAA,EACAvC,EAAA0C,GAAAA,GAAA,EACA1C,EAAA2C,GAAAA,GAAA,KAIA,OAAAF,IAWAzD,EAAA,gCACA,sBACA,WACA,aACA,WACA,SAAAE,EAAAM,EAAAC,EAAAG,GAEA,IAAAgD,EAAApD,EAAAoD,KAAAnD,EAAAI,SACAF,UAAA,OACA8B,QACA3B,IAAA,WAGA,IACAE,EAAAD,KAAAC,EACA0B,GACArC,EAAAwD,KAAAC,IAAA9C,EAAA+C,GAAA/C,EAAAgD,IACA/C,EAAA4C,KAAAC,IAAA9C,EAAAiD,GAAAjD,EAAAkD,IACAvB,MAAAkB,KAAAM,IAAAnD,EAAAgD,GAAAhD,EAAA+C,IACAnB,OAAAiB,KAAAM,IAAAnD,EAAAkD,GAAAlD,EAAAiD,KAEA,OAAAvB,IAGAqB,IACAjD,IAAA,WACA,OAAAC,KAAAC,EAAA+C,KAKAE,IACAnD,IAAA,WACA,OAAAC,KAAAC,EAAAiD,KAGAD,IACAlD,IAAA,WACA,OAAAC,KAAAC,EAAAgD,KAGAE,IACApD,IAAA,WACA,OAAAC,KAAAC,EAAAkD,KAIAE,YACAtD,IAAA,WACA,IAAAE,EAAAD,KAAAC,EACA,OAAA,IAAAJ,EAAAI,EAAA+C,GAAA/C,EAAAiD,MAGAI,YACAvD,IAAA,WACA,IAAAE,EAAAD,KAAAC,EACA,OAAA,IAAAJ,EAAAI,EAAAgD,GAAAhD,EAAAkD,MAIA/C,KAAA,SAAAC,EAAAC,GACA,IAAAL,EAAAD,KAAAC,EACA,OAAA,IAAA4C,EAAA5C,EAAA+C,GAAA3C,EAAAJ,EAAAiD,GAAA5C,EAAAL,EAAAgD,GAAA5C,EAAAJ,EAAAkD,GAAA7C,IAGA6B,aAAA,SAAA7C,EAAAY,GACA,QAAAkC,IAAAlC,EAAA,CACA,IAAAM,EAAAlB,EACAA,EAAAkB,EAAAlB,EACAY,EAAAM,EAAAN,EAEA,IAAAD,EAAAD,KAAAC,EAEA,OAAA6C,KAAAM,KAAAlD,EAAAD,EAAAiD,KAAAjD,EAAAgD,GAAAhD,EAAA+C,KAAA/C,EAAAkD,GAAAlD,EAAAiD,KAAA5D,EAAAW,EAAA+C,KAAA,MAIAtC,KAAA,SAAAsC,EAAAE,EAAAD,EAAAE,GACA,IAAAlD,EAAAD,KAAAC,KACAA,EAAA+C,GAAAA,GAAA,EACA/C,EAAAiD,GAAAA,GAAA,EACAjD,EAAAgD,GAAAA,GAAA,EACAhD,EAAAkD,GAAAA,GAAA,KAKA,OAAAN,IAIA5D,EAAA,oCACA,sBACA,WACA,cACA,SAAAE,EAAAM,EAAAC,GAEA,IAAA6D,EAAA9D,EAAA8D,SAAA7D,EAAAI,SACAF,UAAA,WAEA8B,QACA3B,IAAA,WAQA,IALA,IAAAE,EAAAD,KAAAC,EACAO,EAAAP,EAAAuD,OACAC,EAAAjD,EAAAkD,OACAC,EAAAnD,EAAA,GACAoD,GAAAH,EAAAE,EAAArE,EAAAqE,EAAAA,EAAAzD,EAAAqC,EAAAoB,EAAArE,EAAAuE,EAAAF,EAAAzD,GACAV,EAAA,EAAAA,EAAAiE,IAAAjE,EACAmE,EAAAnD,EAAAhB,GACAoE,EAAAH,EAAAE,EAAArE,IAAAsE,EAAAH,EAAAE,EAAArE,GACAsE,EAAArB,EAAAoB,EAAArE,IAAAsE,EAAArB,EAAAoB,EAAArE,GACAsE,EAAAD,EAAAA,EAAAzD,IAAA0D,EAAAD,EAAAA,EAAAzD,GACA0D,EAAAC,EAAAF,EAAAzD,IAAA0D,EAAAC,EAAAF,EAAAzD,GAEA,IAAAyB,GACArC,EAAAsE,EAAAH,EACAvD,EAAA0D,EAAAD,EACA/B,MAAAgC,EAAArB,EAAAqB,EAAAH,EACA5B,OAAA+B,EAAAC,EAAAD,EAAAD,GAEA,OAAAhC,IAGA6B,QACAzD,IAAA,WACA,OAAAC,KAAAC,EAAAuD,SAIA9C,KAAA,SAAA8C,GAEA,IAAAvD,EAAAD,KAAAC,KACAA,EAAAuD,OAAAA,SAKA,OAAAD,IAIAtE,EAAA,oCACA,sBACA,WACA,cACA,SAAAE,EAAAM,EAAAC,GAEA,IAAAoE,EAAArE,EAAAqE,SAAApE,EAAAI,SACAF,UAAA,WACA8B,QACA3B,IAAA,WAGA,IAAAE,EAAAD,KAAAC,EACAO,EAAAP,EAAAuD,OACAC,EAAAjD,EAAAkD,OACAC,EAAAnD,EAAA,GACAoD,MAAAH,EAAAE,EAAArE,EAAAqE,EAAAA,EAAAzD,EAAAqC,EAAAoB,EAAArE,EAAAuE,EAAAF,EAAAzD,GACA,IAAA,IAAAV,EAAA,EAAAA,EAAAiE,IAAAjE,EACAmE,EAAAnD,EAAAhB,GACAoE,KAAAH,EAAAE,EAAArE,IAAAsE,KAAAH,EAAAE,EAAArE,GACAsE,KAAArB,EAAAoB,EAAArE,IAAAsE,KAAArB,EAAAoB,EAAArE,GACAsE,KAAAD,EAAAA,EAAAzD,IAAA0D,KAAAD,EAAAA,EAAAzD,GACA0D,KAAAC,EAAAF,EAAAzD,IAAA0D,KAAAC,EAAAF,EAAAzD,GAEA,IAAAyB,GACArC,EAAAsE,KAAAH,EACAvD,EAAA0D,KAAAD,EACA/B,MAAAgC,KAAArB,EAAAqB,KAAAH,EACA5B,OAAA+B,KAAAC,EAAAD,KAAAD,GAEA,OAAAhC,IAGArC,GACAS,IAAA,WACA,OAAAC,KAAAC,EAAAX,IAKAY,GACAH,IAAA,WACA,OAAAC,KAAAC,EAAAC,IAGA6D,QACAhE,IAAA,WACA,OAAAC,KAAAC,EAAA8D,SAGAC,OACAjE,IAAA,WACA,OAAAC,KAAAC,EAAA+D,QAGAC,WACAlE,IAAA,WACA,OAAAC,KAAAC,EAAAgE,YAGAC,OACAnE,IAAA,WACA,OAAAC,KAAAC,EAAAiE,QAGAxD,KAAA,SAAApB,EAAAY,EAAA6D,EAAAC,EAAAC,EAAAC,GACA,IAAAjE,EAAAD,KAAAC,EACAA,EAAAX,EAAAA,EACAW,EAAAC,EAAAA,EACAD,EAAA8D,OAAAA,EACA9D,EAAA+D,MAAAA,EACA/D,EAAAgE,UAAAA,EACAhE,EAAAiE,MAAAA,KAMA,OAAAJ,IAIA7E,EAAA,gCACA,sBACA,WACA,cACA,SAAAE,EAAAM,EAAAC,GAEA,IAAAyE,EAAA1E,EAAA0E,KAAAzE,EAAAI,SACAF,UAAA,OAGAgC,OACA7B,IAAA,WACA,OAAAC,KAAAC,EAAA2B,QAKAC,QACA9B,IAAA,WACA,OAAAC,KAAAC,EAAA4B,SAIA1B,MAAA,WACA,IAAAF,EAAAD,KAAAC,EACA,OAAA,IAAAkE,EAAAlE,EAAA2B,MAAA3B,EAAA4B,SAGAuC,QAAA,WACA,OAAApE,KAAA4B,MAAA5B,KAAA6B,SAGAwC,QAAA,WACA,OACAzC,MAAA5B,KAAA4B,MACAC,OAAA7B,KAAA6B,SAGAyC,SAAA,WACA,OAAAtE,KAAA4B,MAAA,IAAA5B,KAAA6B,QAGAnB,KAAA,SAAAkB,EAAAC,GACA,IAAA5B,EAAAD,KAAAC,KACAA,EAAA2B,MAAAA,GAAA,EACA3B,EAAA4B,OAAAA,GAAA,KAmBA,OAfAsC,EAAAxD,WAAA,SAAAC,GACA,IAAAC,EAAAD,EAAAE,MAAA,KACA,OAAA,IAAAqD,EAAApD,WAAAF,EAAA,IAAAE,WAAAF,EAAA,MAGAsD,EAAAnD,UAAA,SAAAC,GACA,OAAA,IAAAkD,EAAAlD,EAAAsD,GAAAtD,EAAAW,MAAAX,EAAAuD,GAAAvD,EAAAY,SAGAsC,EAAAjD,UAAA,SAAAL,GACA,OAAA,IAAAsD,EAAAtD,EAAA,GAAAA,EAAA,KAGAsD,EAAAhD,KAAA,IAAAgD,EAAA,EAAA,GAEAA,IAIAlF,EAAA,gCACA,sBACA,WACA,aACA,UACA,UACA,SAAAE,EAAAM,EAAAC,EAAAG,EAAAsE,GAEA,IAAAM,EAAAhF,EAAAgF,KAAA/E,EAAAI,SACAF,UAAA,OACA8B,QACA3B,IAAA,WAGA,IACAE,EAAAD,KAAAC,EACA0B,GACArC,EAAAW,EAAAX,EACAY,EAAAF,KAAAE,EACA0B,MAAA3B,EAAA2B,MACAC,OAAA5B,EAAA4B,QAEA,OAAAF,IAGArC,GACAS,IAAA,WACA,OAAAC,KAAAC,EAAAX,IAKAY,GACAH,IAAA,WACA,OAAAC,KAAAC,EAAAC,IAKA0B,OACA7B,IAAA,WACA,OAAAC,KAAAC,EAAA2B,QAKAC,QACA9B,IAAA,WACA,OAAAC,KAAAC,EAAA4B,SAKAkC,QACAhE,IAAA,WACA,OAAAC,KAAAC,EAAA8D,SAGAhC,SACAhC,IAAA,WACA,IAAAE,EAAAD,KAAAC,EACA,OAAA,IAAAJ,EAAAI,EAAAX,EAAAW,EAAAC,KAGA8B,YACAjC,IAAA,WACA,IAAAE,EAAAD,KAAAC,EACA,OAAA,IAAAJ,EAAAI,EAAAX,EAAAW,EAAAC,EAAAD,EAAA4B,UAGAI,UACAlC,IAAA,WACA,IAAAE,EAAAD,KAAAC,EACA,OAAA,IAAAJ,EAAAI,EAAAX,EAAAW,EAAA2B,MAAA3B,EAAAC,KAGAgC,aACAnC,IAAA,WACA,IAAAE,EAAAD,KAAAC,EACA,OAAA,IAAAJ,EAAAI,EAAAX,EAAAW,EAAA2B,MAAA3B,EAAAC,EAAAD,EAAA4B,UAIA6C,MACA3E,IAAA,WACA,IAAAE,EAAAD,KAAAC,EACA,OAAA,IAAAkE,EAAAlE,EAAA2B,MAAA3B,EAAA4B,UAIAzB,KAAA,SAAAC,EAAAC,GACA,IAAAL,EAAAD,KAAAC,EACA,OAAA,IAAAwE,EAAAxE,EAAAX,EAAAe,EAAAJ,EAAAC,EAAAI,EAAAL,EAAA2B,MAAA3B,EAAA4B,OAAA5B,EAAA8D,SAGA5B,aAAA,SAAA7C,EAAAY,GAEA,QAAAkC,IAAAlC,EAAA,CACA,IAAAM,EAAAlB,EACAA,EAAAkB,EAAAlB,EACAY,EAAAM,EAAAN,EAEA,IAAAD,EAAAD,KAAAC,EAEA,OAAAX,GAAAW,EAAAX,GAAAA,EAAAW,EAAAX,EAAAW,EAAA2B,OAAA1B,GAAAD,EAAAC,GAAAA,EAAAD,EAAAC,EAAAD,EAAA4B,QAGA8C,QAAA,WACA,OAAA3E,KAAA4B,OAAA,GAAA5B,KAAA6B,QAAA,GAGAtB,SAAA,SAAAgC,GACA,OAAAA,GAAAA,EAAAjD,GAAAU,KAAAV,GAAAiD,EAAArC,GAAAF,KAAAE,GAAAqC,EAAAX,OAAA5B,KAAA4B,OAAAW,EAAAV,QAAA7B,KAAA6B,QAAAU,EAAAwB,QAAA/D,KAAA+D,QAGAtD,MAAA,SAAA8B,GACA,OAAAvC,KAAAO,SAAAgC,IAGAqC,YAAA,SAAA3B,EAAAE,EAAA0B,EAAAC,GACA,IAAA9B,EAAAhD,KAAAgD,GAAAE,EAAAlD,KAAAE,EAAA6E,EAAA/E,KAAA4B,MAAAoD,EAAAhF,KAAA6B,OAEA,OAAAiB,KAAAC,IAAAC,EAAA+B,EAAA9B,EAAA4B,IAAA7B,EAAAC,EAAAD,EAAAC,GAAA,GACAH,KAAAC,IAAAG,EAAA8B,EAAA7B,EAAA2B,IAAA5B,EAAAC,EAAAD,EAAAC,GAAA,GAGA8B,UAAA,SAAAhC,EAAAE,EAAA0B,EAAAC,GACA,IAAA9B,EAAAhD,KAAAgD,GAAAE,EAAAlD,KAAAE,EAAA6E,EAAA/E,KAAA4B,MAAAoD,EAAAhF,KAAA6B,OAEA,OAAAiB,KAAAC,IAAAC,EAAA+B,EAAA9B,EAAA4B,IAAA7B,EAAAC,EAAAD,EAAAC,GAAA,GACAH,KAAAC,IAAAG,EAAA8B,EAAA7B,EAAA2B,IAAA5B,EAAAC,EAAAD,EAAAC,GAAA,GAGA+B,MAAA,SAAAjC,EAAAE,EAAA0B,EAAAC,GACA,IAAA9B,EAAAhD,KAAAgD,GAAAE,EAAAlD,KAAAE,EAAA6E,EAAA/E,KAAA4B,MAAAoD,EAAAhF,KAAA6B,OAEAvC,EAAA0D,EAAAC,EAAAD,EAAAC,EACA/C,EAAAgD,EAAAC,EAAAD,EAAAC,EACAvB,EAAAkB,KAAAqC,IAAAnC,EAAA+B,EAAA9B,EAAA4B,GAAAvF,EAGA,OAFAuC,OAAAiB,KAAAqC,IAAAjC,EAAA8B,EAAA7B,EAAA2B,GAAA5E,EAEA,IAAAuE,EAAAnF,EAAAY,EAAA0B,EAAAC,SAGA1B,MAAA,WACA,IAAAF,EAAAD,KAAAC,EACA,OAAA,IAAAwE,EAAAxE,EAAAX,EAAAW,EAAAC,EAAAD,EAAA2B,MAAA3B,EAAA4B,OAAA5B,EAAA8D,SAGArD,KAAA,SAAApB,EAAAY,EAAA0B,EAAAC,EAAAkC,GACA,IAAA9D,EAAAD,KAAAC,KACAA,EAAAX,EAAAA,GAAA,EACAW,EAAAC,EAAAA,GAAA,EACAD,EAAA2B,MAAAA,GAAA,EACA3B,EAAA4B,OAAAA,GAAA,EACA5B,EAAA8D,OAAAA,GAAA,KAoBA,OAfAU,EAAA9D,WAAA,SAAAC,GACA,IAAAC,EAAAD,EAAAE,MAAA,KACA,OAAA,IAAA2D,EAAA1D,WAAAF,EAAA,IAAAE,WAAAF,EAAA,IAAAE,WAAAF,EAAA,IAAAE,WAAAF,EAAA,MAGA4D,EAAAzD,UAAA,SAAAC,GACA,OAAA,IAAAwD,EAAAxD,EAAA3B,GAAA2B,EAAAwC,EAAAxC,EAAAf,GAAAe,EAAA0C,EAAA1C,EAAAsD,GAAAtD,EAAAW,MAAAX,EAAAuD,GAAAvD,EAAAY,SAGA4C,EAAAvD,UAAA,SAAAL,GACA,OAAA,IAAA4D,EAAA5D,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,KAGA4D,EAAAtD,KAAA,IAAAsD,EAAA,EAAA,EAAA,EAAA,GAEAA,IAIAxF,EAAA,gCACA,WACA,UACA,WACA,YACA,aACA,SACA,UACA,aACA,aACA,SACA,UACA,SAAAQ,GAEA,OAAAA,IAEAR,EAAA,2BAAA,gCAAA,SAAAmG,GAAA,OAAAA","file":"../skylark-graphics-shapes.js","sourcesContent":["define('skylark-graphics-shapes/shapes',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\"\r\n], function(skylark, langx) {\r\n\t\r\n\tvar shapes =  {\r\n\r\n\t  log2 : function (x) {\r\n\t    var n = 1, i = 0;\r\n\t    while (x > n) {\r\n\t      n <<= 1;\r\n\t      i++;\r\n\t    }\r\n\t    return i;\r\n\t  }\r\n\r\n\t};\r\n\r\n\r\n\treturn skylark.attach(\"graphics.shapes\",shapes);\r\n});\ndefine('skylark-graphics-shapes/geometry',[\r\n    \"skylark-langx/langx\",\r\n    \"./shapes\"\r\n],function(langx, shapes) {\r\n\tvar Geometry  = shapes.Geometry = langx.klass({\r\n\t\t\"klassName\"\t:\t\"Geometry\",\r\n\t});\r\n\r\n\r\n\treturn Geometry;\r\n\r\n});\r\n\ndefine('skylark-graphics-shapes/point',[\r\n    \"skylark-langx/langx\",\r\n    \"./shapes\",\r\n    \"./geometry\",\r\n],function(langx, shapes, Geometry) {\r\n\r\n    var Point = shapes.Point = Geometry.inherit({\r\n        \"klassName\": \"Point\",\r\n        \"x\": {\r\n            get : function() {\r\n                return this._.x;\r\n            }\r\n        },\r\n        // y: Number\r\n        //\t\tThe Y coordinate of the default rectangle's position, value 0.\r\n        \"y\": {\r\n            get : function() {\r\n                return this._.y;\r\n            }\r\n        },\r\n\t\t\"clone\"\t: function(){\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn new Point(_.x,_.y);\r\n\t\t\r\n\t\t},\r\n\t\t\"move\"\t: function(/*Number*/dx,/*Number*/dy) {\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn new Point(_.x + dx,_.y + dy);\r\n\t\t},\r\n\t\t\"notEqual\"\t:\tfunction(/*Point*/p) {\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn !p || p.x != _.x || p.y != _.y;\r\n\t\t},\r\n\t\t\r\n\t\t\"equal\"\t:\tfunction(/*Point*/p){\r\n\t\t\treturn  !this.notEqual(p);\r\n\t\t},\r\n\t\t\r\n        \"init\" : function(x, y) {\r\n            var _ = this._ = {};\r\n            _.x = x || 0;\r\n            _.y = y || 0;\r\n        }\r\n\t});\r\n\t\r\n\tPoint.fromString = function(s) {\r\n\t\tvar a = s.split(\",\");\r\n\t\treturn new Point(parseFloat(a[0]),parseFloat(a[1]));\r\n\t};\r\n\r\n\tPoint.fromPlain = function(o) {\r\n\t\treturn new Point(o.x,o.y);\r\n\t};\r\n\r\n\tPoint.fromArray = function(a) {\r\n\t\treturn new Point(a[0],a[1]);\r\n\t};\r\n\t\r\n\tPoint.Zero = new Point(0,0);\r\n\r\n\treturn Point;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-shapes/arrow',[\r\n    \"skylark-langx/langx\",\r\n    \"./shapes\",\r\n    \"./geometry\",\r\n    \"./point\"\r\n], function(langx, shapes, Geometry, Point) {\r\n    var Direction = {\r\n        \"left\" : 1,\r\n        \"top\" : 2,\r\n        \"right\" : 3, \r\n        \"bottom\" : 4\r\n    };\r\n\r\n    var Arrow = shapes.Arrow = Geometry.inherit({\r\n        \"klassName\": \"Arrow\",\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //\t\treturns the bounding box\r\n                var \r\n                    _ = this._,\r\n                    box = {\r\n                    x: _.x,\r\n                    y: this.y,\r\n                    width: _.width,\r\n                    height: _.height\r\n                };\r\n                return box;\r\n            }\r\n        },\r\n       \"x\": {\r\n            get : function() {\r\n                return this._.x;\r\n            }\r\n        },\r\n        // y: Number\r\n        //\t\tThe Y coordinate of the default rectangle's position, value 0.\r\n        \"y\": {\r\n            get : function() {\r\n                return this._.y;\r\n            }\r\n        },\r\n        // width: Number\r\n        //\t\tThe width of the default rectangle, value 100.\r\n        \"width\": {\r\n            get : function() {\r\n                return this._.width;\r\n            }\r\n        },\r\n        // height: Number\r\n        //\t\tThe height of the default rectangle, value 100.\r\n        \"height\": {\r\n            get : function() {\r\n                return this._.height;\r\n            }\r\n        },\r\n        // r: Number\r\n        //\t\tThe corner radius for the default rectangle, value 0.\r\n        \"direction\": {\r\n            get : function() {\r\n                return this._.direction;\r\n            }\r\n        },\r\n        \"leftTop\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x, _.y);\r\n            }\r\n        },\r\n        \"leftBottom\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x, _.y + _.height);\r\n            }\r\n        },\r\n        \"rightTop\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x + _.width, _.y);\r\n            }\r\n        },\r\n        \"rightBottom\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x + _.width, _.y + _.height);\r\n            }\r\n        },\r\n        \"move\": function(dx, dy) {\r\n            var _ = this._;\r\n            return new Arrow(_.x + dx,_.y + dy,_.width,_.height,_.direction);\r\n        },\r\n        \"containPoint\": function(x,y) {\r\n            // support function(p)\r\n            if (y === undefined) {\r\n                var p = x;\r\n                x = p.x;\r\n                y = p.y;\r\n            }\r\n            var _ = this._;\r\n\r\n            return (x >= _.x) && (x < _.x + _.width) && (y >= _.y) && (y < _.y + _.height);\r\n        },\r\n        \"init\" : function(x, y, width, height, direction) {\r\n            var _ = this._ = {};\r\n            _.x = x || 0;\r\n            _.y = y || 0;\r\n            _.width = width || 0;\r\n            _.height = height || 0;\r\n            _.direction = direction || Direction.top;\r\n        }\r\n    });\r\n\r\n    Arrow.Direction = Direction;\r\n\r\n    return Arrow;\r\n});\r\n\ndefine('skylark-graphics-shapes/circle',[\r\n    \"skylark-langx/langx\",\r\n    \"./shapes\",\r\n    \"./geometry\"\r\n], function(langx, shapes, Geometry) {\r\n\r\n    var Circle = shapes.Circle = Geometry.inherit({\r\n        \"klassName\": \"Circle\",\r\n\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //      returns the bounding box\r\n                var _ = this._,\r\n                    box = {\r\n                        x: _.cx - _.r,\r\n                        y: _.cy - _.r,\r\n                        width: 2 * _.r,\r\n                        height: 2 * _.r\r\n                    };\r\n                return box;\r\n            }\r\n        },\r\n\r\n        // cx: Number\r\n        //\t\tThe X coordinate of the center of the circle, default value 0.\r\n        \"cx\": {\r\n            get : function() {\r\n                return this._.cx;\r\n            }\r\n        },\r\n        // cy: Number\r\n        //\t\tThe Y coordinate of the center of the circle, default value 0.\r\n        \"cy\": {\r\n            get : function() {\r\n                return this._.cy;\r\n            }\r\n        },\r\n        // r: Number\r\n        //\t\tThe radius, default value 100.\r\n        \"r\": {\r\n            get : function() {\r\n                return this._.r;\r\n            }\r\n        },\r\n        move: function(dx, dy) {\r\n            var _ = this._;            \r\n            return new Circle(_.cx + dx,_.cy + dy,_.r);\r\n        },\r\n        containPoint: function(x,y) {\r\n            // support function(p)\r\n            if (y === undefined) {\r\n                var p = x;\r\n                x = p.x;\r\n                y = p.y;\r\n            }\r\n            var _ = this._;\r\n\r\n            var diff = (x - _.x) * (x - _.x) + (y - _.y) * (y - _.y);\r\n            if (diff < _.r * _.r) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        \"init\" : function(cx, cy, r) {\r\n            var _ = this._ = {};\r\n            _.cx = cx || 0;\r\n            _.cy = cy || 0;\r\n            _.r = r || 0;\r\n        }\r\n\r\n    });\r\n\r\n    return Circle;\r\n});\r\n\ndefine('skylark-graphics-shapes/ellipse',[\r\n    \"skylark-langx/langx\",\r\n    \"./shapes\",\r\n    \"./geometry\",\r\n], function(langx, shapes, Geometry) {\r\n\r\n    var Ellipse = shapes.Ellipse = Geometry.inherit({\r\n        \"klassName\": \"Ellipse\",\r\n\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //      returns the bounding box\r\n                var _ = this._,\r\n                    box = {\r\n                        x: _.cx - _.rx,\r\n                        y: _.cy - _.ry,\r\n                        width: 2 * _.rx,\r\n                        height: 2 * _.ry\r\n                    };\r\n                return box;\r\n            }\r\n        },\r\n\r\n        // cx: Number\r\n        //\t\tThe X coordinate of the center of the ellipse, default value 0.\r\n        \"cx\": {\r\n            get : function() {\r\n                return this._.cx;\r\n            }\r\n        },\r\n        // cy: Number\r\n        //\t\tThe Y coordinate of the center of the ellipse, default value 0.\r\n        \"cy\": {\r\n            get : function() {\r\n                return this._.cy;\r\n            }\r\n        },\r\n        // rx: Number\r\n        //\t\tThe radius of the ellipse in the X direction, default value 200.\r\n        \"rx\": {\r\n            get : function() {\r\n                return this._.rx;\r\n            }\r\n        },\r\n        // ry: Number\r\n        //\t\tThe radius of the ellipse in the Y direction, default value 200.\r\n        \"ry\": {\r\n            get : function() {\r\n                return this._.ry;\r\n            }\r\n        },\r\n        \"move\": function(dx, dy) {\r\n            var _ = this._;            \r\n            return new Ellipse(_.cx + dx,_.cy + dy,_.rx,_.ry);\r\n        },\r\n\r\n        \"containPoint\": function(p) {\r\n        },\r\n\r\n        \"init\" :  function(cx, cy, rx, ry) {\r\n            var _ = this._ = {};\r\n            _.cx = cx || 0;\r\n            _.cy = cy || 0;\r\n            _.rx = rx || 0;\r\n            _.ry = ry || 0;\r\n        }\r\n    });\r\n\r\n    return Ellipse;\r\n});\r\n\n/**\r\n *\r\n * Copyright (c) 2013 psteam Inc.(http://www.psteam.co.jp)\r\n * http://www.psteam.co.jp/qface/license\r\n * \r\n * @Author: liwenfeng\r\n * @Date: 2013/02/28\r\n */\r\ndefine('skylark-graphics-shapes/line',[\r\n    \"skylark-langx/langx\",\r\n    \"./shapes\",\r\n    \"./geometry\",\r\n    \"./point\"\r\n], function(langx, shapes, Geometry, Point) {\r\n\r\n    var Line = shapes.Line = Geometry.inherit({\r\n        \"klassName\": \"Line\",\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //\t\treturns the bounding box\r\n                var \r\n                    _ = this._,\r\n                    box = {\r\n\t\t\t\t\t\tx:\t\tMath.min(_.x1, _.x2),\r\n\t\t\t\t\t\ty:\t\tMath.min(_.y1, _.y2),\r\n\t\t\t\t\t\twidth:\tMath.abs(_.x2 - _.x1),\r\n\t\t\t\t\t\theight:\tMath.abs(_.y2 -_.y1)\r\n\t                };\r\n                return box;\r\n            }\r\n        },\r\n       \"x1\": {\r\n            get : function() {\r\n                return this._.x1;\r\n            }\r\n        },\r\n        // y: Number\r\n        //\t\tThe Y coordinate of the default rectangle's position, value 0.\r\n        \"y1\": {\r\n            get : function() {\r\n                return this._.y1;\r\n            }\r\n        },\r\n        \"x2\": {\r\n            get : function() {\r\n                return this._.x2;\r\n            }\r\n        },\r\n        \"y2\": {\r\n            get : function() {\r\n                return this._.y2;\r\n            }\r\n        },\r\n\r\n\t\t\"startPoint\" :{\r\n\t\t\tget : function(){\r\n\t\t\t\tvar _ = this._;\r\n\t\t\t\treturn new Point(_.x1,_.y1);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"endPointer\" :{\r\n\t\t\tget : function(){\r\n\t\t\t\tvar _ = this._;\r\n\t\t\t\treturn new Point(_.x2,_.y2);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\t\r\n\t\tmove\t: function(dx,dy) {\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn new Line(_.x1+dx,_.y1+dy,_.x2+dx,_.y2+dy);\r\n\t\t},\r\n\r\n\t\tcontainPoint : function(x,y) {\r\n            if (y === undefined) {\r\n                var p = x;\r\n                x = p.x;\r\n                y = p.y;\r\n            }\r\n            var _ = this._;\r\n\t\t\r\n    \t\treturn Math.abs((y-_.y1)*(_.x2-_.x1) - (_.y2-_.y1)*(x-_.x1)) < 1e-6;\r\n\r\n\t\t},\r\n\r\n        \"init\" : function(x1, y1, x2,y2) {\r\n            var _ = this._ = {};\r\n            _.x1 = x1 || 0;\r\n            _.y1 = y1 || 0;\r\n            _.x2 = x2 || 0;\r\n            _.y2 = y2 || 0;\r\n        }\r\n\t});\r\n\t\r\n\t\r\n\treturn Line;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-shapes/polyline',[\r\n    \"skylark-langx/langx\",\r\n    \"./shapes\",\r\n    \"./geometry\"\r\n], function(langx, shapes, Geometry) {\r\n\r\n    var Polyline = shapes.Polyline = Geometry.inherit({\r\n        \"klassName\": \"Polyline\",\r\n\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //      returns the bounding box\r\n                var _ = this._,\r\n\t\t\t\t\tp = _.points,\r\n\t\t\t\t\tl = p.length,\r\n\t\t\t\t\tt = p[0],\r\n\t\t\t\t\tbbox = {l: t.x, t: t.y, r: t.x, b: t.y};\r\n\t\t\t\tfor(var i = 1; i < l; ++i){\r\n\t\t\t\t\tt = p[i];\r\n\t\t\t\t\tif(bbox.l > t.x) bbox.l = t.x;\r\n\t\t\t\t\tif(bbox.r < t.x) bbox.r = t.x;\r\n\t\t\t\t\tif(bbox.t > t.y) bbox.t = t.y;\r\n\t\t\t\t\tif(bbox.b < t.y) bbox.b = t.y;\r\n\t\t\t\t}\r\n\t\t\t\tvar box = {\r\n\t\t\t\t\tx:\t\tbbox.l,\r\n\t\t\t\t\ty:\t\tbbox.t,\r\n\t\t\t\t\twidth:\tbbox.r - bbox.l,\r\n\t\t\t\t\theight:\tbbox.b - bbox.t\r\n\t\t\t\t};\r\n                return box;\r\n            }\r\n        },\r\n\t\t\"points\" : {\r\n            get : function() {\r\n                return this._.points;\r\n            }\r\n\t\t},\r\n\t\t\r\n\t\t\"init\" : function(/*Array*/points) {\r\n\t\t\t//TODO: will be modified\r\n\t\t\tvar _ = this._ = {};\r\n\t\t\t_.points = points?points:[];\r\n\t\t}\r\n\t});\r\n\t\r\n\t\r\n\treturn Polyline;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-shapes/polystar',[\r\n    \"skylark-langx/langx\",\r\n    \"./shapes\",\r\n    \"./geometry\",\r\n],function(langx, shapes, Geometry) {\r\n\r\n    var Polystar = shapes.Polystar = Geometry.inherit({\r\n        \"klassName\": \"Polystar\",\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //\t\treturns the bounding box\r\n\t\t\t\tvar _ = this._,\r\n\t\t\t\t\tp = _.points,\r\n\t\t\t\t\tl = p.length,\r\n\t\t\t\t\tt = p[0];\r\n\t\t\t\t\tbbox = {l: t.x, t: t.y, r: t.x, b: t.y};\r\n\t\t\t\tfor(var i = 1; i < l; ++i){\r\n\t\t\t\t\tt = p[i];\r\n\t\t\t\t\tif(bbox.l > t.x) bbox.l = t.x;\r\n\t\t\t\t\tif(bbox.r < t.x) bbox.r = t.x;\r\n\t\t\t\t\tif(bbox.t > t.y) bbox.t = t.y;\r\n\t\t\t\t\tif(bbox.b < t.y) bbox.b = t.y;\r\n\t\t\t\t}\r\n\t\t\t\tvar box = {\r\n\t\t\t\t\tx:\t\tbbox.l,\r\n\t\t\t\t\ty:\t\tbbox.t,\r\n\t\t\t\t\twidth:\tbbox.r - bbox.l,\r\n\t\t\t\t\theight:\tbbox.b - bbox.t\r\n\t\t\t\t};\r\n\t\t\t\treturn box;\t\r\n            }\r\n        },\r\n       \"x\": {\r\n            get : function() {\r\n                return this._.x;\r\n            }\r\n        },\r\n        // y: Number\r\n        //\t\tThe Y coordinate of the default rectangle's position, value 0.\r\n        \"y\": {\r\n            get : function() {\r\n                return this._.y;\r\n            }\r\n        },\r\n        \"radius\": {\r\n            get : function() {\r\n                return this._.radius;\r\n            }\r\n        },\r\n        \"sides\": {\r\n            get : function() {\r\n                return this._.sides;\r\n            }\r\n        },\r\n        \"pointSize\": {\r\n            get : function() {\r\n                return this._.pointSize;\r\n            }\r\n        },\r\n        \"angle\": {\r\n            get : function() {\r\n                return this._.angle;\r\n            }\r\n         },\r\n\t\t\"init\"\t:function(x, y, radius, sides, pointSize, angle){\r\n\t\t\tvar _ = this._;\r\n\t\t\t_.x = x;\r\n\t\t\t_.y = y;\r\n\t\t\t_.radius = radius;\r\n\t\t\t_.sides = sides;\r\n\t\t\t_.pointSize = pointSize;\r\n\t\t\t_.angle = angle;\r\n\t\t}\r\n\r\n\t});\r\n\t\r\n\t\r\n\treturn Polystar;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-shapes/size',[\r\n    \"skylark-langx/langx\",\r\n    \"./shapes\",\r\n    \"./geometry\"\r\n],function(langx,shapes,Geometry) {\r\n\r\n    var Size = shapes.Size = Geometry.inherit({\r\n        \"klassName\": \"Size\",\r\n\t\t// width: Number\r\n\t\t//\t\tThe width of the default rectangle, value 100.\r\n\t\t\"width\" : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.width;\r\n\t\t\t}\r\n\t\t},\r\n\t\t// height: Number\r\n\t\t//\t\tThe height of the default rectangle, value 100.\r\n\t\t\"height\" : {\r\n\t\t\tget : function() {\r\n\t\t\t\treturn this._.height;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t\"clone\"\t: function(){\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn new Size(_.width,_.height);\r\n\t\t},\r\n\r\n        \"toArray\" : function() {\r\n            return [this.width,this.height];\r\n        },\r\n\r\n        \"toPlain\" : function() {\r\n            return {\r\n                \"width\"  : this.width,\r\n                \"height\"  : this.height\r\n            };\r\n        },\r\n        \"toString\": function() {\r\n        \treturn this.width +\",\" + this.height;\r\n        },\r\n\r\n        \"init\" : function(width,height) {\r\n        \tvar _ = this._ = {};\r\n        \t_.width = width || 0;\r\n        \t_.height = height || 0;\r\n        }\r\n\t});\r\n\t\r\n\tSize.fromString = function(s) {\r\n\t\tvar a = s.split(\",\");\r\n\t\treturn new Size(parseFloat(a[0]),parseFloat(a[1]));\r\n\t};\r\n\r\n\tSize.fromPlain = function(o) {\r\n\t\treturn new Size(o.w || o.width,o.h || o.height);\r\n\t};\r\n\r\n\tSize.fromArray = function(a) {\r\n\t\treturn new Size(a[0],a[1]);\r\n\t};\r\n\r\n\tSize.Zero = new Size(0,0);\r\n\t\r\n\treturn Size;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-shapes/rect',[\r\n    \"skylark-langx/langx\",\r\n    \"./shapes\",\r\n    \"./geometry\",\r\n    \"./point\",\r\n\t\"./size\"\r\n],function(langx, shapes, Geometry,Point,Size) {\r\n\r\n    var Rect = shapes.Rect = Geometry.inherit({\r\n        \"klassName\": \"Rect\",\r\n        \"bounds\": {\r\n            get : function() {\r\n                // summary:\r\n                //\t\treturns the bounding box\r\n                var \r\n                    _ = this._,\r\n                    box = {\r\n                    x: _.x,\r\n                    y: this.y,\r\n                    width: _.width,\r\n                    height: _.height\r\n                };\r\n                return box;\r\n            }\r\n        },\r\n       \"x\": {\r\n            get : function() {\r\n                return this._.x;\r\n            }\r\n        },\r\n        // y: Number\r\n        //\t\tThe Y coordinate of the default rectangle's position, value 0.\r\n        \"y\": {\r\n            get : function() {\r\n                return this._.y;\r\n            }\r\n        },\r\n        // width: Number\r\n        //\t\tThe width of the default rectangle, value 100.\r\n        \"width\": {\r\n            get : function() {\r\n                return this._.width;\r\n            }\r\n        },\r\n        // height: Number\r\n        //\t\tThe height of the default rectangle, value 100.\r\n        \"height\": {\r\n            get : function() {\r\n                return this._.height;\r\n            }\r\n        },\r\n        // r: Number\r\n        //\t\tThe corner radius for the default rectangle, value 0.\r\n        \"radius\": {\r\n            get : function() {\r\n                return this._.radius;\r\n            }\r\n        },\r\n        \"leftTop\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x, _.y);\r\n            }\r\n        },\r\n        \"leftBottom\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x, _.y + _.height);\r\n            }\r\n        },\r\n        \"rightTop\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x + _.width, _.y);\r\n            }\r\n        },\r\n        \"rightBottom\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Point(_.x + _.width, _.y + _.height);\r\n            }\r\n        },\r\n\r\n        \"size\": {\r\n            get: function() {\r\n                var _ = this._;\r\n                return new Size(_.width, _.height);\r\n            }\r\n        },\r\n\r\n        \"move\": function(dx, dy) {\r\n            var _ = this._;\r\n            return new Rect(_.x + dx,_.y + dy,_.width,_.height,_.radius);\r\n        },\r\n\r\n        \"containPoint\": function(x,y) {\r\n            // support function(p)\r\n            if (y === undefined) {\r\n                var p = x;\r\n                x = p.x;\r\n                y = p.y;\r\n            }\r\n            var _ = this._;\r\n\r\n            return (x >= _.x) && (x < _.x + _.width) && (y >= _.y) && (y < _.y + _.height);\r\n        },\r\n\r\n\t\t\"isEmpty\"\t:\tfunction(){\r\n\t\t\treturn this.width <=0 || this.height<=0;\r\n\t\t},\r\n\t\t\r\n\t\t\"notEqual\"\t:\tfunction(/*Rect*/r) {\r\n\t\t\treturn !r || r.x != this.x || r.y != this.y || r.width != this.width || r.height != this.height || r.radius != this.radius;\r\n\t\t},\r\n\t\t\r\n\t\t\"equal\"\t:\tfunction(/*Rect*/r){\r\n\t\t\treturn  !this.notEqual(r);\r\n\t\t},\r\n\t\t\r\n\t\t\"isIntersect\"\t:function(/*Number*/x2,/*Number*/y2,/*Number*/width2,/*Number*/height2){\r\n\t\t\tvar x1 = this.x1,y1=this.y,width1=this.width,height1=this.height;\r\n\t\t\t \r\n\t\t    return (Math.min(x1 + width1, x2 + width2) - (x1 > x2 ? x1 : x2)) > 0 &&\r\n\t\t           (Math.min(y1 + height1, y2 + height2) - (y1 > y2 ? y1 : y2)) > 0;\r\n\t\t},\r\n\t\t\r\n\t\t\"intersect\"\t:\tfunction(/*Number*/x2,/*Number*/y2,/*Number*/width2,/*Number*/height2){\r\n\t\t\tvar x1 = this.x1,y1=this.y,width1=this.width,height1=this.height;\r\n\t\t\t \r\n\t\t    return (Math.min(x1 + width1, x2 + width2) - (x1 > x2 ? x1 : x2)) > 0 &&\r\n\t\t           (Math.min(y1 + height1, y2 + height2) - (y1 > y2 ? y1 : y2)) > 0;\r\n\t\t},\r\n\t\t\t\t\t\t\r\n\t\t\"unite\"\t: function(/*Number*/x2,/*Number*/y2,/*Number*/width2,/*Number*/height2){\r\n\t\t\tvar x1 = this.x1,y1=this.y,width1=this.width,height1=this.height;\r\n\t\t\t \r\n\t\t\tvar x = x1 < x2 ? x1 : x2,\r\n\t\t\t\ty = y1 < y2 ? y1 : y2,\r\n\t\t\t\twidth  = Math.max(x1 + width1, x2 + width2) - x;\r\n\t\t\t\theight = Math.max(y1 + height1, y2 + height2) - y;\r\n\t\t    \r\n\t\t    return new Rect(x,y,width,height);\r\n\t\t},\r\n\t\t\r\n\t\t\"clone\"\t: function(){\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn new Rect(_.x,_.y,_.width,_.height,_.radius);\r\n\t\t},\r\n\r\n        \"init\" : function(x, y, width, height, radius) {\r\n            var _ = this._ = {};\r\n            _.x = x || 0;\r\n            _.y = y || 0;\r\n            _.width = width || 0;\r\n            _.height = height || 0;\r\n            _.radius = radius || 0;\r\n        }\r\n    });\r\n\r\n\r\n\tRect.fromString = function(s) {\r\n\t\tvar a = s.split(\",\");\r\n\t\treturn new Rect(parseFloat(a[0]),parseFloat(a[1]),parseFloat(a[2]),parseFloat(a[3]));\r\n\t};\r\n\r\n\tRect.fromPlain = function(o) {\r\n\t\treturn new Rect(o.x || o.l,o.y || o.t, o.w || o.width,o.h || o.height);\r\n\t};\r\n\r\n\tRect.fromArray = function(a) {\r\n\t\treturn new Rect(a[0],a[1],a[2],a[3]);\r\n\t};\r\n\t\r\n\tRect.Zero = new Rect(0,0,0,0);\r\n\t\r\n\treturn Rect;\r\n\t\r\n});\t\r\n\ndefine('skylark-graphics-shapes/main',[\r\n    \"./shapes\",\r\n    \"./arrow\",\r\n    \"./circle\",\r\n    \"./ellipse\",\r\n    \"./geometry\",\r\n    \"./line\",\r\n    \"./point\",\r\n    \"./polyline\",\r\n    \"./polystar\",\r\n    \"./rect\",\r\n    \"./size\"\r\n], function(shapes) {\r\n\r\n\treturn shapes;\r\n});\ndefine('skylark-graphics-shapes', ['skylark-graphics-shapes/main'], function (main) { return main; });\n\n"]}