{"version":3,"sources":["transform/Matrix.js"],"names":["define","langx","geom","DEG_TO_RAD","Math","PI","_degToRadCache","degToRad","degree","Matrix","TransformMatrix","klass","klassName","_multiplyPoint","p","_","this","x","m11","y","m21","dx","m12","m22","dy","Point","get","alpha","shadow","compositeOperation","multiplyPoint","multiplyRectangle","rect","isIdentity","clone","p0","leftTop","p1","leftBottom","p2","right","p3","rightBottom","minx","min","miny","maxx","max","maxy","Rect","prepend","tx1","a1","c1","append","b1","d1","prependMatrix","matrix","prependProperties","appendMatrix","appendProperties","prependTransform","scaleX","scaleY","rotation","skewX","skewY","regX","regY","r","cos","sin","appendTransform","rotate","angle","skew","scale","translate","identity","invert","n","decompose","target","sqrt","atan2","reinitialize","_initialize","multiply","mtx","toString","init","mixin","a","b","rotateg","tan","skewXg","skewYg","reflect","arguments","length","a2","b2","n2","xy","project","yx","yy","_sandwich","scaleAt","c","d","rotateAt","rotategAt","skewXAt","skewXgAt","skewYAt","skewYgAt"],"mappings":"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","file":"../../transform/Matrix.js","sourcesContent":["define( [\r\n    \"skylark-langx/langx\",\r\n    \"../geom\",\r\n], function(langx,geom){\r\n\t// reference easeljs/geom/Matrix2D  and dojox/gfx/matrix\r\n\t\r\n\tvar DEG_TO_RAD = Math.PI/180;\r\n\tvar _degToRadCache = {};\r\n\tvar degToRad = function(degree){\r\n\t\treturn _degToRadCache[degree] || (_degToRadCache[degree] = (Math.PI * degree / 180));\r\n\t};\r\n\tvar radToDeg = function(radian){ return radian / Math.PI * 180; };\r\n\t\r\n\r\n\t//Represents a 3 x 3 affine transformation matrix used for transformation in 2-D space.\r\n\t//|----------|\r\n\t//|m11|m21|dx| \r\n\t//|----------|\r\n\t//|m12|m22|dy|\r\n\t//|----------|\r\n\t//|  0|  0| 1|\r\n\t//|----------|\r\n\t\r\n    var Matrix = geom.TransformMatrix = langx.klass({\r\n        \"klassName\": \"TransformMatrix\",\r\n\r\n\t\t\"_multiplyPoint\"\t: \tfunction(p){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies the matrix to a point\r\n\t\t\t// p: Point\r\n\t\t\t//\t\ta point\r\n\t\t\t// returns: Point\r\n\t\t\tvar _ = this._,\r\n\t\t\t\tx = p.x * _.m11 + p.y * _.m21  + _.dx,\r\n\t\t\t    y = p.x * _.m12 +  p.y * _.m22 + _.dy;\r\n\t\t\treturn new Point(x,y); // Point\r\n\t\t},\r\n\r\n       \"m11\": {\r\n       \t\t//Position (0, 0) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.m11;\r\n            }\r\n        },\r\n\r\n       \"m12\": {\r\n       \t\t//Position (0, 1) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.m12;\r\n            }\r\n        },\r\n\r\n       \"m21\": {\r\n       \t\t//Position (1, 0) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.m21;\r\n            }\r\n        },\r\n\r\n       \"m22\": {\r\n       \t\t//Position (1, 1) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.m22;\r\n            }\r\n        },\r\n\r\n       \"dx\": {\r\n       \t\t// Position (2, 1) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.dx;\r\n            }\r\n        },\r\n\r\n       \"dy\": {\r\n       \t\t// Position (2, 1) in a 3x3 affine transformation matrix.\r\n            get : function() {\r\n                return this._.dy;\r\n            }\r\n        },\r\n\r\n       \"alpha\": {\r\n       \t\t// Property representing the alpha that will be applied to a display object. This is not part of matrix\r\n       \t\t// operations, but is used for operations like getConcatenatedMatrix to provide concatenated alpha values.\r\n            get : function() {\r\n                return this._.alpha;\r\n            }\r\n        },\r\n\r\n       \"shadow\": {\r\n       \t\t// Property representing the shadow that will be applied to a display object. This is not part of matrix\r\n       \t\t// operations, but is used for operations like getConcatenatedMatrix to provide concatenated shadow values..\r\n            get : function() {\r\n                return this._.shadow;\r\n            }\r\n        },\r\n\r\n       \"compositeOperation\": {\r\n\t\t\t/**\r\n\t\t\t * Property representing the compositeOperation that will be applied to a display object. This is not part of\r\n\t\t\t * matrix operations, but is used for operations like getConcatenatedMatrix to provide concatenated\r\n\t\t\t * compositeOperation values. You can find a list of valid composite operations at:\r\n\t\t\t * <a href=\"https://developer.mozilla.org/en/Canvas_tutorial/Compositing\">https://developer.mozilla.org/en/Canvas_tutorial/Compositing</a>\r\n\t\t\t * @property compositeOperation\r\n\t\t\t * @type String\r\n\t\t\t **/\r\n            get : function() {\r\n                return this._.compositeOperation;\r\n            }\r\n        },\r\n\r\n        //Converts the specified point with Matrix and returns the result.\r\n\t\tmultiplyPoint: /*Point*/function(/*Point */ p){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies the matrix to a point\r\n\t\t\treturn this._multiplyPoint(p); // Point\r\n\t\t},\r\n\t\t\t\t/**\r\n\t\t\t\t * 指定した矩形を Matrix で変換し、その結果を返します。\r\n\t\t\t\t */\r\n\t\tmultiplyRectangle: /*Rect*/function(/*Rect*/ rect){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tApplies the matrix to a rectangle.\r\n\t\t\t// returns: Rect\r\n\t\t\tif(this.isIdentity())\r\n\t\t\t\treturn rect.clone(); // Rect\r\n\t\t\tvar p0 = this.multiplyPoint(rect.leftTop),\r\n\t\t\t\tp1 = this.multiplyPoint(rect.leftBottom),\r\n\t\t\t\tp2 = this.multiplyPoint(rect.right),\r\n\t\t\t\tp3 = this.multiplyPoint(rect.rightBottom),\r\n\t\t\t\tminx = Math.min(p0.x, p1.x, p2.x, p3.x),\r\n\t\t\t\tminy = Math.min(p0.y, p1.y, p2.y, p3.y),\r\n\t\t\t\tmaxx = Math.max(p0.x, p1.x, p2.x, p3.x),\r\n\t\t\t\tmaxy = Math.max(p0.y, p1.y, p2.y, p3.y);\r\n\t\t\treturn new Rect(minx,miny,maxx-minx,maxy-miny);  // Rect\r\n\t\t},\r\n\t\t/**\r\n\t\t * Concatenates the specified matrix properties with this matrix. All parameters are required.\r\n\t\t * @method prepend\r\n\t\t * @param {Number} m11\r\n\t\t * @param {Number} m12\r\n\t\t * @param {Number} m21\r\n\t\t * @param {Number} m22\r\n\t\t * @param {Number} dx\r\n\t\t * @param {Number} dy\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tprepend : function(m11, m12, m21, m22, dx, dy) {\r\n\t\t\tvar tx1 = this.dx;\r\n\t\t\tif (m11 != 1 || m12 != 0 || m21 != 0 || m22 != 1) {\r\n\t\t\t\tvar a1 = this.m11;\r\n\t\t\t\tvar c1 = this.m21;\r\n\t\t\t\tthis.m11  = a1*m11+this.m12*m21;\r\n\t\t\t\tthis.m12  = a1*m12+this.m12*m22;\r\n\t\t\t\tthis.m21  = c1*m11+this.m22*m21;\r\n\t\t\t\tthis.m22  = c1*m12+this.m22*m22;\r\n\t\t\t}\r\n\t\t\tthis.dx = tx1*m11+this.dy*m21+dx;\r\n\t\t\tthis.dy = tx1*m12+this.dy*m22+dy;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Appends the specified matrix properties with this matrix. All parameters are required.\r\n\t\t * 指定した Matrixをこの Matrixに追加します。\r\n\t\t * @method append\r\n\t\t * @param {Number} m11\r\n\t\t * @param {Number} m12\r\n\t\t * @param {Number} m21\r\n\t\t * @param {Number} m22\r\n\t\t * @param {Number} dx\r\n\t\t * @param {Number} dy\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tappend : function(m11, m12, m21, m22, dx, dy) {\r\n\t\t\tvar a1 = this.m11;\r\n\t\t\tvar b1 = this.m12;\r\n\t\t\tvar c1 = this.m21;\r\n\t\t\tvar d1 = this.m22;\r\n\r\n\t\t\tthis.m11  = m11*a1+m12*c1;\r\n\t\t\tthis.m12  = m11*b1+m12*d1;\r\n\t\t\tthis.m21  = m21*a1+m22*c1;\r\n\t\t\tthis.m22  = m21*b1+m22*d1;\r\n\t\t\tthis.dx = dx*a1+dy*c1+this.dx;\r\n\t\t\tthis.dy = dx*b1+dy*d1+this.dy;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Prepends the specified matrix with this matrix.\r\n\t\t * @method prependMatrix\r\n\t\t * @param {Matrix} matrix\r\n\t\t **/\r\n\t\tprependMatrix : function(matrix) {\r\n\t\t\tthis.prepend(matrix.m11, matrix.m12, matrix.m21, matrix.m22, matrix.dx, matrix.dy);\r\n\t\t\tthis.prependProperties(matrix.alpha, matrix.shadow,  matrix.compositeOperation);\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Appends the specified matrix with this matrix.\r\n\t\t * 指定した Matrixをこの Matrixに追加します。\r\n\t\t * @method appendMatrix\r\n\t\t * @param {Matrix} matrix\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tappendMatrix : function(matrix) {\r\n\t\t\tthis.append(matrix.m11, matrix.m12, matrix.m21, matrix.m22, matrix.dx, matrix.dy);\r\n\t\t\tthis.appendProperties(matrix.alpha, matrix.shadow,  matrix.compositeOperation);\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Generates matrix properties from the specified display object transform properties, and prepends them with this matrix.\r\n\t\t * For example, you can use this to generate a matrix from a display object: var mtx = new Matrix();\r\n\t\t * mtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\r\n\t\t * @method prependTransform\r\n\t\t * @param {Number} x\r\n\t\t * @param {Number} y\r\n\t\t * @param {Number} scaleX\r\n\t\t * @param {Number} scaleY\r\n\t\t * @param {Number} rotation\r\n\t\t * @param {Number} skewX\r\n\t\t * @param {Number} skewY\r\n\t\t * @param {Number} regX Optional.\r\n\t\t * @param {Number} regY Optional.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tprependTransform : function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\r\n\t\t\tif (rotation%360) {\r\n\t\t\t\tvar r = rotation*DEG_TO_RAD;\r\n\t\t\t\tvar cos = Math.cos(r);\r\n\t\t\t\tvar sin = Math.sin(r);\r\n\t\t\t} else {\r\n\t\t\t\tcos = 1;\r\n\t\t\t\tsin = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (regX || regY) {\r\n\t\t\t\t// append the registration offset:\r\n\t\t\t\tthis.dx -= regX; this.dy -= regY;\r\n\t\t\t}\r\n\t\t\tif (skewX || skewY) {\r\n\t\t\t\t// TODO: can this be combined into a single prepend operation?\r\n\t\t\t\tskewX *= DEG_TO_RAD;\r\n\t\t\t\tskewY *= DEG_TO_RAD;\r\n\t\t\t\tthis.prepend(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);\r\n\t\t\t\tthis.prepend(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\r\n\t\t\t} else {\r\n\t\t\t\tthis.prepend(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, x, y);\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Generates matrix properties from the specified display object transform properties, and appends them with this matrix.\r\n\t\t * For example, you can use this to generate a matrix from a display object: var mtx = new Matrix();\r\n\t\t * mtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);\r\n\t\t * @method appendTransform\r\n\t\t * @param {Number} x\r\n\t\t * @param {Number} y\r\n\t\t * @param {Number} scaleX\r\n\t\t * @param {Number} scaleY\r\n\t\t * @param {Number} rotation\r\n\t\t * @param {Number} skewX\r\n\t\t * @param {Number} skewY\r\n\t\t * @param {Number} regX Optional.\r\n\t\t * @param {Number} regY Optional.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tappendTransform : function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {\r\n\t\t\tif (rotation%360) {\r\n\t\t\t\tvar r = rotation*DEG_TO_RAD;\r\n\t\t\t\tvar cos = Math.cos(r);\r\n\t\t\t\tvar sin = Math.sin(r);\r\n\t\t\t} else {\r\n\t\t\t\tcos = 1;\r\n\t\t\t\tsin = 0;\r\n\t\t\t}\r\n\r\n\t\t\tif (skewX || skewY) {\r\n\t\t\t\t// TODO: can this be combined into a single append?\r\n\t\t\t\tskewX *= DEG_TO_RAD;\r\n\t\t\t\tskewY *= DEG_TO_RAD;\r\n\t\t\t\tthis.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);\r\n\t\t\t\tthis.append(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);\r\n\t\t\t} else {\r\n\t\t\t\tthis.append(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, x, y);\r\n\t\t\t}\r\n\r\n\t\t\tif (regX || regY) {\r\n\t\t\t\t// prepend the registration offset:\r\n\t\t\t\tthis.dx -= regX*this.m11+regY*this.m21; \r\n\t\t\t\tthis.dy -= regX*this.m12+regY*this.m22;\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Applies a rotation transformation to the matrix.\r\n\t\t * この Matrix の原点を中心とする指定した角度の回転を適用します。\r\n\t\t * @method rotate\r\n\t\t * @param {Number} angle The angle in degrees.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\trotate : function(angle) {\r\n\t\t\tvar cos = Math.cos(angle);\r\n\t\t\tvar sin = Math.sin(angle);\r\n\r\n\t\t\tvar a1 = this.m11;\r\n\t\t\tvar c1 = this.m21;\r\n\t\t\tvar tx1 = this.dx;\r\n\r\n\t\t\tthis.m11 = a1*cos-this.m12*sin;\r\n\t\t\tthis.m12 = a1*sin+this.m12*cos;\r\n\t\t\tthis.m21 = c1*cos-this.m22*sin;\r\n\t\t\tthis.m22 = c1*sin+this.m22*cos;\r\n\t\t\tthis.dx = tx1*cos-this.dy*sin;\r\n\t\t\tthis.dy = tx1*sin+this.dy*cos;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Applies a skew transformation to the matrix.\r\n\t\t * @method skew\r\n\t\t * @param {Number} skewX The amount to skew horizontally in degrees.\r\n\t\t * @param {Number} skewY The amount to skew vertically in degrees.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\tskew : function(skewX, skewY) {\r\n\t\t\tskewX = skewX*DEG_TO_RAD;\r\n\t\t\tskewY = skewY*DEG_TO_RAD;\r\n\t\t\tthis.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), 0, 0);\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Applies a scale transformation to the matrix.\r\n\t\t * @method scale\r\n\t\t * @param {Number} x\r\n\t\t * @param {Number} y\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tscale : function(x, y) {\r\n\t\t\tthis.m11 *= x;\r\n\t\t\tthis.m22 *= y;\r\n\t\t\tthis.dx *= x;\r\n\t\t\tthis.dy *= y;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Translates the matrix on the x and y axes.\r\n\t\t * @method translate\r\n\t\t * @param {Number} x\r\n\t\t * @param {Number} y\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\ttranslate : function(x, y) {\r\n\t\t\tthis.dx += x;\r\n\t\t\tthis.dy += y;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Sets the properties of the matrix to those of an identity matrix (one that applies a null transformation).\r\n\t\t * @method identity\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tidentity : function() {\r\n\t\t\tthis.alpha = this.m11 = this.m22 = 1;\r\n\t\t\tthis.m12 = this.m21 = this.dx = this.dy = 0;\r\n\t\t\tthis.shadow = this.compositeOperation = null;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Inverts the matrix, causing it to perform the opposite transformation.\r\n\t\t * @method invert\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t **/\r\n\t\tinvert : function() {\r\n\t\t\tvar a1 = this.m11;\r\n\t\t\tvar b1 = this.m12;\r\n\t\t\tvar c1 = this.m21;\r\n\t\t\tvar d1 = this.m22;\r\n\t\t\tvar tx1 = this.dx;\r\n\t\t\tvar n = a1*d1-b1*c1;\r\n\r\n\t\t\tthis.m11 = d1/n;\r\n\t\t\tthis.m12 = -b1/n;\r\n\t\t\tthis.m21 = -c1/n;\r\n\t\t\tthis.m22 = a1/n;\r\n\t\t\tthis.dx = (c1*this.dy-d1*tx1)/n;\r\n\t\t\tthis.dy = -(a1*this.dy-b1*tx1)/n;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns true if the matrix is an identity matrix.\r\n\t\t * @method isIdentity\r\n\t\t * @return {Boolean}\r\n\t\t **/\r\n\t\tisIdentity : function() {\r\n\t\t\treturn this.dx == 0 && this.dy == 0 && this.m11 == 1 && this.m12 == 0 && this.m21 == 0 && this.m22 == 1;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Decomposes the matrix into transform properties (x, y, scaleX, scaleY, and rotation). Note that this these values\r\n\t\t * may not match the transform properties you used to generate the matrix, though they will produce the same visual\r\n\t\t * results.\r\n\t\t * @method decompose\r\n\t\t * @param {Object} target The object to apply the transform properties to. If null, then a new object will be returned.\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\tdecompose : function(target) {\r\n\t\t\t// TODO: it would be nice to be able to solve for whether the matrix can be decomposed into only scale/rotation\r\n\t\t\t// even when scale is negative\r\n\t\t\tif (target == null) { target = {}; }\r\n\t\t\ttarget.x = this.dx;\r\n\t\t\ttarget.y = this.dy;\r\n\t\t\ttarget.scaleX = Math.sqrt(this.m11 * this.m11 + this.m12 * this.m12);\r\n\t\t\ttarget.scaleY = Math.sqrt(this.m21 * this.m21 + this.m22 * this.m22);\r\n\r\n\t\t\tvar skewX = Math.atan2(-this.m21, this.m22);\r\n\t\t\tvar skewY = Math.atan2(this.m12, this.m11);\r\n\r\n\t\t\tif (skewX == skewY) {\r\n\t\t\t\ttarget.rotation = skewY/DEG_TO_RAD;\r\n\t\t\t\tif (this.m11 < 0 && this.m22 >= 0) {\r\n\t\t\t\t\ttarget.rotation += (target.rotation <= 0) ? 180 : -180;\r\n\t\t\t\t}\r\n\t\t\t\ttarget.skewX = target.skewY = 0;\r\n\t\t\t} else {\r\n\t\t\t\ttarget.skewX = skewX/DEG_TO_RAD;\r\n\t\t\t\ttarget.skewY = skewY/DEG_TO_RAD;\r\n\t\t\t}\r\n\t\t\treturn target;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Reinitializes all matrix properties to those specified.\r\n\t\t * @method appendProperties\r\n\t\t * @param {Number} m11\r\n\t\t * @param {Number} m12\r\n\t\t * @param {Number} m21\r\n\t\t * @param {Number} m22\r\n\t\t * @param {Number} dx\r\n\t\t * @param {Number} dy\r\n\t\t * @param {Number} alpha desired alpha value\r\n\t\t * @param {Shadow} shadow desired shadow value\r\n\t\t * @param {String} compositeOperation desired composite operation value\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\treinitialize : function(m11,m12,m21,m22,dx,dy,alpha,shadow,compositeOperation) {\r\n\t\t\tthis._initialize(m11,m12,m21,m22,dx,dy);\r\n\t\t\tthis.alpha = alpha || 1;\r\n\t\t\tthis.shadow = shadow;\r\n\t\t\tthis.compositeOperation = compositeOperation;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Appends the specified visual properties to the current matrix.\r\n\t\t * @method appendProperties\r\n\t\t * @param {Number} alpha desired alpha value\r\n\t\t * @param {Shadow} shadow desired shadow value\r\n\t\t * @param {String} compositeOperation desired composite operation value\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\tappendProperties : function(alpha, shadow, compositeOperation) {\r\n\t\t\tthis.alpha *= alpha;\r\n\t\t\tthis.shadow = shadow || this.shadow;\r\n\t\t\tthis.compositeOperation = compositeOperation || this.compositeOperation;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Prepends the specified visual properties to the current matrix.\r\n\t\t * @method prependProperties\r\n\t\t * @param {Number} alpha desired alpha value\r\n\t\t * @param {Shadow} shadow desired shadow value\r\n\t\t * @param {String} compositeOperation desired composite operation value\r\n\t\t * @return {Matrix} This matrix. Useful for chaining method calls.\r\n\t\t*/\r\n\t\tprependProperties : function(alpha, shadow, compositeOperation) {\r\n\t\t\tthis.alpha *= alpha;\r\n\t\t\tthis.shadow = this.shadow || shadow;\r\n\t\t\tthis.compositeOperation = this.compositeOperation || compositeOperation;\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t *Multiply Matrix by another Matrix.\r\n\t\t */\r\n\t\tmultiply: function(matrix){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tcombines matrices by multiplying them sequentially in the given order\r\n\t\t\t// matrix: Matrix\r\n\t\t\t//\t\ta 2D matrix-like object,\r\n\t\t\t//\t\tall subsequent arguments are matrix-like objects too\r\n\r\n\t\t\t// combine matrices\r\n\t\t\tvar m11 = this.m11,m12 = this.m12,m21 = this.m21,m22=this.m22,dx=this.dx,dy=this.dy;\r\n\t\t\tvar r = matrix;\r\n\t\t\tthis.m11 = m11 * r.m11 + m21 * r.m12;\r\n\t\t\tthis.m12 = m12 * r.m11 + m22 * r.m12;\r\n\t\t\tthis.m21 = m11 * r.m21 + m21 * r.m22;\r\n\t\t\tthis.m22 = m12 * r.m21 + m22 * r.m22;\r\n\t\t\tthis.dx =  m11 * r.dx + m21 * r.dy + dx;\r\n\t\t\tthis.dy =  m12 * r.dx + m22 * r.dy + dy;\r\n\t\t\treturn this // Matrix\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns a clone of the Matrix instance.\r\n\t\t * @method clone\r\n\t\t * @return {Matrix} a clone of the Matrix instance.\r\n\t\t **/\r\n\t\tclone : function() {\r\n\r\n\t\t\tvar _ = this._,\r\n\t\t\t\tmtx = new Matrix(_.m11, _.m12, _.m21, _.m22, _.dx, _.dy);\r\n\t\t\tmtx.shadow = this.shadow;\r\n\t\t\tmtx.alpha = this.alpha;\r\n\t\t\tmtx.compositeOperation = this.compositeOperation;\r\n\t\t\treturn mtx;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Returns a string representation of this object.\r\n\t\t * @method toString\r\n\t\t * @return {String} a string representation of the instance.\r\n\t\t **/\r\n\t\ttoString : function() {\r\n\t\t\tvar _ = this._;\r\n\t\t\treturn \"[Matrix (m11=\"+_.m11+\" m12=\"+_.m12+\" m21=\"+_.m21+\" m22=\"+_.m22+\" dx=\"+_.dx+\" dy=\"+_.dy+\")]\";\r\n\t\t},\r\n\t\t\r\n\t\t\"init\" : function(m11, m12, m21, m22, dx, dy) {\r\n\t\t\tvar _ = this._;\r\n\t\t\t_.m11 = m11 || 1;\r\n\t\t\t_.m12 = m12 || 0;\r\n\t\t\t_.m21 = m21 || 0;\r\n\t\t\t_.m22 = m22 || 1;\r\n\t\t\t_.dx = dx || 0;\r\n\t\t\t_.dy = dy || 0;\r\n\t\t}\r\n\r\n\t});\r\n\t\r\n\tlangx.mixin(Matrix,{\r\n\t\ttranslate: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a translation matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to translate (move) points by specified offsets.\r\n\t\t\t// a: Number\r\n\t\t\t//\t\tan x coordinate value\r\n\t\t\t// b: Number\r\n\t\t\t//\t\ta y coordinate value\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |  1|   0| a|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |  0|   1| b|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\r\n\t\t\treturn new Matrix(1,0,0,1,a,b); // Matrix\r\n\t\t},\r\n\t\tscale: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a scaling matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to scale (magnify) points by specified offsets.\r\n\t\t\t// a: Number\r\n\t\t\t//\t\ta scaling factor used for the x coordinate\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta scaling factor used for the y coordinate\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |  a|   0| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |  0|   b| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\treturn new Matrix(a,0,0,b?b:a,0,0); // Matrix\r\n\t\t},\r\n\t\trotate: function(angle){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\tan angle of rotation in radians (>0 for CW)\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |cos|-sin| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |sin| cos| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\tvar cos = Math.cos(angle);\r\n\t\t\tvar sin = Math.sin(angle);\r\n\t\t\treturn new Matrix(cos,sin,-sin,cos,0,0); // Matrix\r\n\t\t},\r\n\t\trotateg: function(degree){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a rotating matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to rotate points\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSeerotate() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\tan angle of rotation in degrees (>0 for CW)\r\n\t\t\t// returns: Matrix\r\n\t\t\treturn this.rotate(degToRad(degree)); // Matrix\r\n\t\t},\r\n\t\tskewX: function(angle) {\r\n\t\t\t//TODO : will be modified\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms an x skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the x dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |  1| tan| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |  0|   1| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\tvar tan = Math.tan(angle);\r\n\t\t\treturn new Matrix(1,0,tan,1); // Matrix\r\n\t\t},\r\n\t\tskewXg: function(degree){\r\n\t\t\t//TODO : will be modified\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms an x skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the x dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSee dojox/gfx/matrix.skewX() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// returns: Matrix\r\n\t\t\treturn this.skewX(degToRad(degree)); // dojox/gfx/matrix.Matrix\r\n\t\t},\r\n\t\tskewY: function(angle){\r\n\t\t\t//TODO : will be modified\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a y skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the y dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified angle.\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// returns: Matrix\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m11|m21|dx| |  1|   0| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|m12|m22|dy| |tan|   1| 0|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\t//|  0|  0| 1| |  0|   0| 1|\r\n\t\t\t//|----------| |-----------|\r\n\t\t\tvar tan = Math.tan(angle);\r\n\r\n\t\t\treturn new Matrix(1,tan,0,1); // Matrix\r\n\t\t},\r\n\t\tskewYg: function(degree){\r\n\t\t\t//TODO : will be modified\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a y skewing matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to skew points in the y dimension\r\n\t\t\t//\t\taround the origin of coordinates (0, 0) by specified degree.\r\n\t\t\t//\t\tSee skewY() for comparison.\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// returns: Matrix\r\n\t\t\treturn this.skewY(degToRad(degree)); // Matrix\r\n\t\t},\r\n\t\treflect: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms a reflection matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to reflect points around a vector,\r\n\t\t\t//\t\twhich goes through the origin.\r\n\t\t\t// a: dojox/gfx.Point|Number\r\n\t\t\t//\t\ta point-like object, which specifies a vector of reflection, or an X value\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta Y value\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length == 1){\r\n\t\t\t\tb = a.y;\r\n\t\t\t\ta = a.x;\r\n\t\t\t}\r\n\t\t\t// make a unit vector\r\n\t\t\tvar a2 = a * a, b2 = b * b, n2 = a2 + b2, \r\n\t\t\t\txx=2 * a2 / n2 - 1, \r\n\t\t\t\txy = 2 * a * b / n2,\r\n\t\t\t\tyx = xy,\r\n\t\t\t\tyy = 2 * b2 / n2 - 1;\r\n\t\t\treturn new Matrix(xx,yx,xy, yy); // Matrix\r\n\t\t},\r\n\t\tproject: function(a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tforms an orthogonal projection matrix\r\n\t\t\t// description:\r\n\t\t\t//\t\tThe resulting matrix is used to project points orthogonally on a vector,\r\n\t\t\t//\t\twhich goes through the origin.\r\n\t\t\t// a:   Number\r\n\t\t\t//\t\tan x coordinate value\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y coordinate value\r\n\t\t\t// returns: Matrix\r\n\r\n\t\t\t// make a unit vector\r\n\t\t\tvar a2 = a * a, b2 = b * b, n2 = a2 + b2, \r\n\t\t\t\txx = a2 / n2,\r\n\t\t\t\txy = a * b / n2\r\n\t\t\t\tyx = xy,\r\n\t\t\t\tyy = b2 / n2;\r\n\t\t\treturn new Matrix(xx,yx,xy,yy); // Matrix\r\n\t\t},\r\n\r\n\t\t// common operations\r\n\r\n\t\t// high level operations\r\n\r\n\t\t_sandwich: function(matrix, x, y){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tapplies a matrix at a central point\r\n\t\t\t// matrix: Matrix\r\n\t\t\t//\t\ta 2D matrix-like object, which is applied at a central point\r\n\t\t\t// x: Number\r\n\t\t\t//\t\tan x component of the central point\r\n\t\t\t// y: Number\r\n\t\t\t//\t\ta y component of the central point\r\n\t\t\treturn this.translate(x, y).multiply(matrix)\r\n\t\t\t                           .multiply(this.translate(-x, -y)); // Matrix\r\n\t\t},\r\n\t\tscaleAt: function(a, b, c, d){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tscales a picture using a specified point as a center of scaling\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with scale().\r\n\t\t\t// a: Number\r\n\t\t\t//\t\ta scaling factor used for the x coordinate, or a uniform scaling factor used for both coordinates\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta scaling factor used for the y coordinate\r\n\t\t\t// c: Number|Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// d: Number\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tswitch(arguments.length){\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\t// a and b are scale factor components, c and d are components of a point\r\n\t\t\t\t\treturn this._sandwich(this.scale(a, b), c, d); // Matrix\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tif(typeof c == \"number\"){\r\n\t\t\t\t\t\treturn this._sandwich(this.scale(a), b, c); // Matrix\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn this._sandwich(this.scale(a, b), c.x, c.y); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.scale(a), b.x, b.y); // Matrix\r\n\t\t},\r\n\t\trotateAt: function(angle, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\trotates a picture using a specified point as a center of rotation\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with rotate().\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\tan angle of rotation in radians (>0 for CW)\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.rotate(angle), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.rotate(angle), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\trotategAt: function(degree, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\trotates a picture using a specified point as a center of rotation\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with rotateg().\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\tan angle of rotation in degrees (>0 for CW)\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.rotateg(degree), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.rotateg(degree), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\tskewXAt: function(angle, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the x axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with skewX().\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.skewX(angle), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.skewX(angle), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\tskewXgAt: function(degree, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the x axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with skewXg().\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.skewXg(degree), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.skewXg(degree), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\tskewYAt: function(angle, a, b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the y axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with skewY().\r\n\t\t\t// angle: Number\r\n\t\t\t//\t\ta skewing angle in radians\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.skewY(angle), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.skewY(angle), a.x, a.y); // Matrix\r\n\t\t},\r\n\t\tskewYgAt: function(/* Number */ degree, /* Number||Point */ a, /* Number? */ b){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tskews a picture along the y axis using a specified point as a center of skewing\r\n\t\t\t// description:\r\n\t\t\t//\t\tCompare with skewYg().\r\n\t\t\t// degree: Number\r\n\t\t\t//\t\ta skewing angle in degrees\r\n\t\t\t// a: Number|dojox/gfx.Point\r\n\t\t\t//\t\tan x component of a central point, or a central point\r\n\t\t\t// b: Number?\r\n\t\t\t//\t\ta y component of a central point\r\n\t\t\t// returns: Matrix\r\n\t\t\tif(arguments.length > 2){\r\n\t\t\t\treturn this._sandwich(this.skewYg(degree), a, b); // Matrix\r\n\t\t\t}\r\n\t\t\treturn this._sandwich(this.skewYg(degree), a.x, a.y); // Matrix\r\n\t\t}\r\n\t\r\n\t\r\n\t});\r\n\r\n\treturn Matrix;\r\n});\r\n"]}